{
	//
	// HashiCorp Configuration language (hcl)
	// 	.tf
	// 	.tfvars
	// 	.nomad
	// 	.hcl
	// 	Appfile

	//
	// shipyard (https://shipyard.run)
	//
	"shipyard blueprint": {
		"prefix": ["shipyard-blueprint"],
		"body": [
			"---",
			"title: ${1:blueprint-title}",
			"author: ${2:blueprint-author}",
			"slug: ${3:blueprint-slug}",
			"env:",
			"  - ${4:blueprint-env1}",
			"  - ${5:blueprint-env2}",
			"  - ${6:blueprint-envN}",
			"browser_windows: ${7:blueprint-browser-windows1}, ${8:blueprint-browser-windows2}, ${9:blueprint-browser-windowsN}",
			"shipyard_version: ${10:blueprint-shipyard-version}",
			"---",
			"$0"
		],
		"description": "shipyard blueprint"
	},
	"shipyard resource 'container' - empty": {
		"prefix": ["shipyard-resource-container-empty"],
		"body": [
			"// container resource",
			"container \"${1:<container-name>}\" {",
			"  $0",
			"}",
			""
		],
		"description": "shipyard empty 'container' resource"
	},
	"shipyard resource 'container' - full": {
		"prefix": ["shipyard-resource-container-full"],
		"body": [
			"// container resource",
			"container \"${1:<container-name>}\" {",
			"  // container dependencies",
			"  depends_on = [\"${2:<depends-on>}\"]",
			"  ",
			"  // container networking",
			"  network {",
			"    name    = \"${3:<network-name>}\"",
			"    address =  \"${4:<ip-address>}\"",
			"    aliases = [\"${5:<alias1>}\",\"${6:<alias2>}\",\"${7:<aliasN>}\"]",
			"  }",
			"",
			"  // container image",
			"  image {",
			"    name     = \"${8:<image-name>}\"",
			"    user     = \"${9:<image-repo-user>}\"",
			"    password = \"${10:<image-repo-password>}\"",
			"  }",
			"",
			"  // container command",
			"  command = [",
			"    \"${11:<insert>}\",",
			"    \"${12:<command>}\",",
			"    \"${13:<here>}\"",
			"  ]",
			"",
			"  // container environment",
			"  env {",
			"    key   = \"${14:<key>}\"",
			"    value = \"${15:<value>}\"",
			"  }",
			"",
			"  // container volume(s)",
			"  volume {",
			"    source      = \"${16:<source>}\"",
			"    destination = \"${17:<destination>}\"",
			"    type        = \"${18:<type>}\" # (bind|volume|tmpfs)",
			"  }",
			"",
			"  // container port(s)",
			"  port {",
			"    local  = \"${19:<local>}\"",
			"    remote = \"${20:<remote>}\"",
			"    host   = \"${21:<host>}\"",
			"  }",
			"",
			"  // container port range(s)",
			"  port_range {",
			"    range       = \"${22:<range-start>}-${23:<range-end>}\"",
			"    enable_host = \"${24|true,false|}\"",
			"  }",
			"",
			"  // container privileged mode",
			"  privileged = ${25|true,false|}",
			"",
			"  // container health check",
			"  health_check {",
			"    duration          = \"${26:<duration>}s\"",
			"    http              = \"${27:<address-to-be-checked>}\"",
			"    http_status_codes = [${28:status-code1},${29:status-code2},${30:status-codeN}] # optional",
			"  }",
			"",
			"  // container resources",
			"  resources {",
			"    cpu     = ${31:<maximum-cpu>}",
			"    cpu_pin = [${32:pin-to-cpu1},${33:pin-to-cpu2},${34:pin-to-cpuN}]",
			"    memory  = \"${35:<maximum-memory>}M\"",
			"  }",
			"",
			"  // container failure behaviour",
			"  max_restart_count = ${1:<max-restart-count>}",
			"}",
			"$0"
		],
		"description": "shipyard full 'container' resource"
	},
	"shipyard resource 'container' - common": {
		"prefix": ["shipyard-resource-container-common"],
		"body": [
			"// container resource",
			"container \"${1:<container-name>}\" {",
			"  // container networking",
			"  network {",
			"    name    = \"${2:<network-name>}\"",
			"    address =  \"${3:<ip-address>}\"",
			"    aliases = [\"${4:<alias1>}\",\"${5:<alias2>}\",\"${6:<aliasN>}\"]",
			"  }",
			"",
			"  // container image",
			"  image {",
			"    name     = \"${7:<image-name>}\"",
			"    user     = \"${8:<image-repo-user>}\"",
			"    password = \"${9:<image-repo-password>}\"",
			"  }",
			"",
			"  // container environment",
			"  env {",
			"    key   = \"${10:<key>}\"",
			"    value = \"${11:<value>}\"",
			"  }",
			"",
			"  // container port(s)",
			"  port {",
			"    local  = \"${12:<local>}\"",
			"    remote = \"${13:<remote>}\"",
			"    host   = \"${14:<host>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "shipyard common 'container' resource"
	},
	"shipyard container parameter 'depends_on'": {
		"prefix": ["shipyard-container-parameter-depends-on"],
		"body": [
			"  // container dependencies",
			"  depends_on = [\"${1:<depends-on>}\"]",
			"$0"
		],
		"description": "templated 'depends_on' parameter of resource 'container'"
	},
	"shipyard container parameter 'network'": {
		"prefix": ["shipyard-container-parameter-network"],
		"body": [
			"  // container networking",
			"  network {",
			"    name    = \"${1:<network-name>}\"",
			"    address =  \"${2:<ip-address>}\"",
			"    aliases = [\"${3:<alias1>}\",\"${4:<alias2>}\",\"${5:<aliasN>}\"]",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'network' parameter of resource 'container'"
	},
	"shipyard container parameter 'image'": {
		"prefix": ["shipyard-container-parameter-image"],
		"body": [
			"  // container image",
			"  image {",
			"    name     = \"${1:<image-name>}\"",
			"    user     = \"${2:<image-repo-user>}\"",
			"    password = \"${3:<image-repo-password>}\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'image' parameter of resource 'container'"
	},
	"shipyard container parameter 'command'": {
		"prefix": ["shipyard-container-parameter-command"],
		"body": [
			"  // container command",
			"  command = [",
			"    \"${1:<insert>}\",",
			"    \"${2:<command>}\",",
			"    \"${3:<here>}\"",
			"  ]",
			"$0"
		],
		"description": "shipyard templated 'command' parameter of resource 'container'"
	},
	"shipyard container parameter 'env'": {
		"prefix": ["shipyard-container-parameter-env"],
		"body": [
			"  // container environment",
			"  env {",
			"    key   = \"${1:<key>}\"",
			"    value = \"${2:<value>}\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'env' parameter of resource 'container'"
	},
	"shipyard container parameter 'volume'": {
		"prefix": ["shipyard-container-parameter-volume"],
		"body": [
			"  // container volume(s)",
			"  volume {",
			"    source      = \"${1:<source>}\"",
			"    destination = \"${2:<destination>}\"",
			"    type        = \"${3:<type>}\" # (bind|volume|tmpfs)",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'volume' parameter of resource 'container'"
	},
	"shipyard container parameter 'port'": {
		"prefix": ["shipyard-container-parameter-port"],
		"body": [
			"  // container port(s)",
			"  port {",
			"    local  = \"${1:<local>}\"",
			"    remote = \"${2:<remote>}\"",
			"    host   = \"${3:<host>}\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'port' parameter of resource 'container'"
	},
	"shipyard container parameter 'port_range'": {
		"prefix": ["shipyard-container-parameter-port-range"],
		"body": [
			"  // container port range(s)",
			"  port_range {",
			"    range       = \"${1:<range-start>}-${2:<range-end>}\"",
			"    enable_host = \"${3|true,false|}",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'port_range' parameter of resource 'container'"
	},
	"shipyard container parameter 'privileged'": {
		"prefix": ["shipyard-container-parameter-privileged"],
		"body": [
			"  // container privileged mode",
			"  privileged = ${1|true,false|}",
			"$0"
		],
		"description": "shipyard templated 'privileged' parameter of resource 'container'"
	},
	"shipyard container parameter 'health_check'": {
		"prefix": ["shipyard-container-parameter-health-check"],
		"body": [
			"  // container health check",
			"  health_check {",
			"    duration          = \"${1:<duration>}s\"",
			"    http              = \"${2:<address-to-be-checked>}\"",
			"    http_status_codes = [${3:status-code1},${4:status-code2},${4:status-codeN}] # optional",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'health_check' parameter of resource 'container'"
	},
	"shipyard container parameter 'resources'": {
		"prefix": ["shipyard-container-parameter-resources"],
		"body": [
			"  // container resource",
			"  resources {",
			"    cpu     = ${1:<maximum-cpu>}",
			"    cpu_pin = [${2:pin-to-cpu1},${3:pin-to-cpu2},${4:pin-to-cpuN}]",
			"    memory  = \"${5:<maximum-memory>}M\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'resources' parameter of resource 'container'"
	},
	"shipyard container parameter 'max_restart_count'": {
		"prefix": ["shipyard-container-parameter-max-restart-count"],
		"body": [
			"  // container failure behaviour",
			"  max_restart_count = ${1:<max-restart-count>}",
			"$0"
		],
		"description": "templated 'max_restart_count' parameter of resource 'container'"
	},
	"shipyard resource 'docs' - empty": {
		"prefix": ["shipyard-resource-docs-empty"],
		"body": [
			"// docs resource",
			"docs \"${1:<docs-name>}\" {",
			"  $0",
			"}",
			""
		],
		"description": "shipyard empty 'docs' resource"
	},
	"shipyard resource 'docs' - full": {
		"prefix": ["shipyard-resource-docs-full"],
		"body": [
			"// docs resource",
			"docs \"${1:<docs-name>}\" {",
			"  // docs port",
			"  port = ${2:<port>}",
			"",
			"  // docs open_in_browser",
			"  open_in_browser = ${3|true,false|}",
			"",
			"  // docs path",
			"  path = \"${4:<path-to-md-files>}\"",
			"",
			"  // docs index title",
			"  index_title = \"${5:<index-title>}\"",
			"",
			"  // docs index pages",
			"  index_pages = [",
			"    \"${6:<index-page1>}\",",
			"    \"${7:<index-page2>}\",",
			"    \"${8:<index-pageN>}\",",
			"  ]",
			"}",
			"$0"
		],
		"description": "shipyard full 'docs' resource"
	},
	"shipyard resource 'docs' - common": {
		"prefix": ["shipyard-resource-docs-common"],
		"body": [
			"// docs resource",
			"docs \"${1:<docs-name>}\" {",
			"  // docs port",
			"  port = ${2:<port>}",
			"",
			"  // docs path",
			"  path = \"${3:<path-to-md-files>}\"",
			"",
			"  // docs index title",
			"  index_title = \"${4:<index-title>}\"",
			"",
			"  // docs index pages",
			"  index_pages = [",
			"    \"${5:<index-page1>}\",",
			"    \"${6:<index-page2>}\",",
			"    \"${7:<index-pageN>}\",",
			"  ]",
			"}",
			"$0"
		],
		"description": "shipyard common 'docs' resource"
	},
	"shipyard docs parameter 'port'": {
		"prefix": ["shipyard-docs-parameter-port"],
		"body": [
			"  // docs port",
			"  port = ${1:<port>}",
			"$0"
		],
		"description": "shipyard templated 'port' parameter of resource 'docs'"
	},
	"shipyard docs parameter 'open_in_browser'": {
		"prefix": ["shipyard-docs-parameter-open-in-browser"],
		"body": [
			"  // docs open in browser",
			"  open_in_browser = ${1|true,false|}",
			"$0"
		],
		"description": "shipyard templated 'open_in_browser' parameter of resource 'docs'"
	},
	"shipyard docs parameter 'path'": {
		"prefix": ["shipyard-docs-parameter-path"],
		"body": [
			"  // docs path",
			"  path = \"${1:<path-to-md-files>}\"",
			"$0"
		],
		"description": "shipyard templated 'path' parameter of resource 'docs'"
	},
	"shipyard docs parameter 'index_title'": {
		"prefix": ["shipyard-docs-parameter-index-title"],
		"body": [
			"  // docs index title",
			"  index_title = \"${1:<index-title>}\"",
			"$0"
		],
		"description": "shipyard templated 'index_title' parameter of resource 'docs'"
	},
	"shipyard docs parameter 'index_pages'": {
		"prefix": ["shipyard-docs-parameter-index-pages"],
		"body": [
			"  // docs index pages",
			"  index_pages = [",
			"    \"${1:<index-page1>}\",",
			"    \"${2:<index-page2>}\",",
			"    \"${3:<index-pageN>}\",",
			"  ]",
			"$0"
		],
		"description": "shipyard templated 'index_title' parameter of resource 'docs'"
	},
	"shipyard resource 'exec_remote' - empty": {
		"prefix": ["shipyard-resource-exec-remote-empty"],
		"body": [
			"// exec_remote resource",
			"exec_remote \"${1:<exec_remote-name>}\" {",
			"  $0",
			"}",
			""
		],
		"description": "shipyard empty 'exec_remote' resource"
	},
	"shipyard resource 'exec_remote' - full": {
		"prefix": ["shipyard-resource-exec-remote-full"],
		"body": [
			"// exec_remote resource",
			"exec_remote \"${1:<exec_remote-name>}\" {",
			"  // exec_remote dependencies",
			"  depends_on = [\"${2:<depends-on>}\"]",
			"",
			"  // exec_remote target",
			"  target = \"${3:<target>}\"",
			"",
			"  // exec_remote networking",
			"  // this block is ignored when 'target' is specified.",
			"  network {",
			"    name    = \"${4:<network-name>}\"",
			"  }",
			"",
			"  // exec_remote image",
			"  // this block is ignored when 'target' is specified.",
			"  image {",
			"    name     = \"${5:<image-name>}\"",
			"    user     = \"${6:<image-repo-user>}\"",
			"    password = \"${7:<image-repo-password>}\"",
			"  }",
			"",
			"  // exec_remote command",
			"  cmd  = \"${8:<command>}\"",
			"  // exec_remote command arguments",
			"  args = [",
			"    \"${9:<insert>}\",",
			"    \"${10:<arguments>}\",",
			"    \"${11:<here>}\"",
			"  ]",
			"  // exec_remote working directory",
			"  working_directory = \"${12:<working-directory>}\"",
			"",
			"  // exec_remote environment",
			"  env {",
			"    key   = \"${13:<key>}\"",
			"    value = \"${14:<value>}\"",
			"  }",
			"",
			"  // exec_remote volume(s)",
			"  // volumes can NOT be attached when a target is specified as it is not possible to add volumes to running containers.",
			"  // volumes can only be used when an image is defined.",
			"  volume {",
			"    source      = \"${15:<source>}\"",
			"    destination = \"${16:<destination>}\"",
			"    type        = \"${17:<type>}\" # (bind|volume|tmpfs)",
			"  }",
			"}",
			"$0"
		],
		"description": "shipyard full 'exec-remote' resource"
	},
	"shipyard resource 'exec_remote' - common": {
		"prefix": ["shipyard-resource-exec-remote-common"],
		"body": [
			"// exec_remote resource",
			"exec_remote \"${1:<exec_remote-name>}\" {",
			"  // exec_remote dependencies",
			"  depends_on = [\"${2:<depends-on>}\"]",
			"",
			"  // exec_remote target",
			"  target = \"${3:<target>}\"",
			"",
			"  // exec_remote command",
			"  cmd  = \"${4:<command>}\"",
			"  // exec_remote command arguments",
			"  args = [",
			"    \"${5:<insert>}\",",
			"    \"${6:<arguments>}\",",
			"    \"${7:<here>}\"",
			"  ]",
			"  // exec_remote working directory",
			"  working_directory = \"${8:<working-directory>}\"",
			"",
			"  // exec_remote environment",
			"  env {",
			"    key   = \"${9:<key>}\"",
			"    value = \"${10:<value>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "shipyard common 'exec-remote' resource"
	},
	"shipyard exec_remote parameter 'depends_on'": {
		"prefix": ["shipyard-exec-remote-parameter-depends-on"],
		"body": [
			"  // exec_remote dependencies",
			"  depends_on = [\"${1:<depends-on>}\"]",
			"$0"
		],
		"description": "shipyard templated 'depends_on' parameter of resource 'exec_remote'"
	},
	"shipyard exec_remote parameter 'target'": {
		"prefix": ["shipyard-exec-remote-parameter-target"],
		"body": [
			"  // exec_remote target",
			"  target = \"${1:<target>}\"",
			"$0"
		],
		"description": "shipyard templated 'target' parameter of resource 'exec_remote'"
	},
	"shipyard exec_remote parameter 'network'": {
		"prefix": ["shipyard-exec-remote-parameter-network"],
		"body": [
			"  // exec_remote networking",
			"  // this block is ignored when 'target' is specified.",
			"  network {",
			"    name    = \"${1:<network-name>}\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'network' parameter of resource 'exec_remote'"
	},
	"shipyard exec_remote parameter 'image'": {
		"prefix": ["shipyard-exec-remote-parameter-image"],
		"body": [
			"  // exec_remote image",
			"  // this block is ignored when 'target' is specified.",
			"  image {",
			"    name     = \"${1:<image-name>}\"",
			"    user     = \"${2:<image-repo-user>}\"",
			"    password = \"${3:<image-repo-password>}\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'image' parameter of resource 'exec_remote'"
	},
	"shipyard exec_remote parameter 'cmd'": {
		"prefix": ["shipyard-exec-remote-parameter-cmd"],
		"body": [
			"  // exec_remote command",
			"  cmd = \"${1:<command>}\"",
			"$0"
		],
		"description": "shipyard templated 'cmd' parameter of resource 'exec_remote'"
	},
	"shipyard exec_remote parameter 'args'": {
		"prefix": ["shipyard-exec-remote-parameter-args"],
		"body": [
			"  // exec_remote command arguments",
			"  args = [",
			"    \"${1:<insert>}\",",
			"    \"${2:<arguments>}\",",
			"    \"${3:<here>}\"",
			"  ]",
			"$0"
		],
		"description": "shipyard templated 'args' parameter of resource 'exec_remote'"
	},
	"shipyard exec_remote parameter 'working_directory'": {
		"prefix": ["shipyard-exec-remote-parameter-working-directory"],
		"body": [
			"  // exec_remote working directory",
			"  working_directory = \"${1:<working-directory>}\"",
			"$0"
		],
		"description": "shipyard templated 'working_directory' parameter of resource 'exec_remote'"
	},
	"shipyard exec_remote parameter 'env'": {
		"prefix": ["shipyard-exec-remote-parameter-env"],
		"body": [
			"  // exec_remote environment",
			"  env {",
			"    key   = \"${1:<key>}\"",
			"    value = \"${2:<value>}\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'env' parameter of resource 'exec_remote'"
	},
	"shipyard exec_remote parameter 'volume'": {
		"prefix": ["shipyard-exec-remote-parameter-volume"],
		"body": [
			"  // exec_remote volume(s)",
			"  // volumes can NOT be attached when a target is specified as it is not possible to add volumes to running containers.",
			"  // volumes can only be used when an image is defined.",
			"  volume {",
			"    source      = \"${1:<source>}\"",
			"    destination = \"${2:<destination>}\"",
			"    type        = \"${3:<type>}\" # (bind|volume|tmpfs)",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'volume' parameter of resource 'exec_remote'"
	},
	"shipyard resource 'exec_local' - empty": {
		"prefix": ["shipyard-resource-exec-local-empty"],
		"body": [
			"// exec_local resource",
			"exec_local \"${1:<exec_local-name>}\" {",
			"  $0",
			"}",
			""
		],
		"description": "shipyard empty 'exec_local' resource"
	},
	"shipyard resource 'exec_local' - full": {
		"prefix": ["shipyard-resource-exec-local-full"],
		"body": [
			"// exec_local resource",
			"exec_local \"${1:<exec_local-name>}\" {",
			"  // exec_local dependencies",
			"  depends_on = [\"${2:<depends-on>}\"]",
			"",
			"  // exec_local command",
			"  cmd  = \"${3:<command>}\"",
			"  // exec_local command arguments",
			"  args = [",
			"    \"${4:<insert>}\",",
			"    \"${5:<arguments>}\",",
			"    \"${6:<here>}\"",
			"  ]",
			"  // exec_local working directory",
			"  working_directory = \"${7:<working-directory>}\"",
			"",
			"  // exec_local environment",
			"  env {",
			"    key   = \"${8:<key>}\"",
			"    value = \"${9:<value>}\"",
			"  }",
			"  // exec_local environment",
			"  env_var {",
			"    key1 = \"${10:<value1>}\"",
			"    key2 = \"${11:<value2>}\"",
			"    keyN = \"${12:<valueN>}\"",
			"  }",
			"",
			"  // exec_local timeout",
			"  // when the 'daemon' parameter is set to 'true', timeout is ignored.",
			"  timeout = \"${13:<timeout>}\" # default 30s",
			"",
			"  // exec_local daemon",
			"  daemon = \"${1:<daemon-mode>}\"",
			"}",
			"$0"
		],
		"description": "shipyard full 'exec-local' resource"
	},
	"shipyard resource 'exec_local' - common": {
		"prefix": ["shipyard-resource-exec-local-common"],
		"body": [
			"// exec_local resource",
			"exec_local \"${1:<exec_local-name>}\" {",
			"  // exec_local dependencies",
			"  depends_on = [\"${2:<depends-on>}\"]",
			"",
			"  // exec_local command",
			"  cmd  = \"${3:<command>}\"",
			"  // exec_local command arguments",
			"  args = [",
			"    \"${4:<insert>}\",",
			"    \"${5:<arguments>}\",",
			"    \"${6:<here>}\"",
			"  ]",
			"  // exec_local working directory",
			"  working_directory = \"${7:<working-directory>}\"",
			"",
			"  // exec_local environment",
			"  env {",
			"    key   = \"${8:<key>}\"",
			"    value = \"${9:<value>}\"",
			"  }",
			"",
			"  // exec_local timeout",
			"  // when the 'daemon' parameter is set to 'true', timeout is ignored.",
			"  timeout = \"${10:<timeout>}\" # default 30s",
			"",
			"  // exec_local daemon",
			"  daemon = \"${11:<daemon-mode>}\"",
			"}",
			"$0"
		],
		"description": "shipyard common 'exec-local' resource"
	},
	"shipyard exec_local parameter 'depends_on'": {
		"prefix": ["shipyard-exec-local-parameter-depends-on"],
		"body": [
			"  // exec_local dependencies",
			"  depends_on = [\"${1:<depends-on>}\"]",
			"$0"
		],
		"description": "shipyard templated 'depends_on' parameter of resource 'exec_local'"
	},
	"shipyard exec_local parameter 'cmd'": {
		"prefix": ["shipyard-exec-local-parameter-cmd"],
		"body": [
			"  // exec_local command",
			"  cmd = \"${1:<command>}\"",
			"$0"
		],
		"description": "shipyard templated 'cmd' parameter of resource 'exec_local'"
	},
	"shipyard exec_local parameter 'args'": {
		"prefix": ["shipyard-exec-local-parameter-args"],
		"body": [
			"  // exec_local command arguments",
			"  args = [",
			"    \"${1:<insert>}\",",
			"    \"${2:<arguments>}\",",
			"    \"${3:<here>}\"",
			"  ]",
			"$0"
		],
		"description": "shipyard templated 'args' parameter of resource 'exec_local'"
	},
	"shipyard exec_local parameter 'working_directory'": {
		"prefix": ["shipyard-exec-local-parameter-working-directory"],
		"body": [
			"  // exec_local working directory",
			"  working_directory = \"${1:<working-directory>}\"",
			"$0"
		],
		"description": "shipyard templated 'working_directory' parameter of resource 'exec_local'"
	},
	"shipyard exec_local parameter 'env'": {
		"prefix": ["shipyard-exec-local-parameter-env"],
		"body": [
			"  // exec_local environment",
			"  env {",
			"    key   = \"${1:<key>}\"",
			"    value = \"${2:<value>}\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'env' parameter of resource 'exec_local'"
	},
	"shipyard exec_local parameter 'env_var'": {
		"prefix": ["shipyard-exec-local-parameter-env-var"],
		"body": [
			"  // exec_local environment",
			"  env_var {",
			"    key1 = \"${1:<value1>}\"",
			"    key2 = \"${2:<value2>}\"",
			"    keyN = \"${3:<valueN>}\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'env_var' parameter of resource 'exec_local'"
	},
	"shipyard exec_local parameter 'timeout'": {
		"prefix": ["shipyard-exec-local-parameter-timeout"],
		"body": [
			"  // exec_local timeout",
			"  // when the 'daemon' parameter is set to 'true', timeout is ignored.",
			"  timeout = \"${1:<timeout>}\" # default 30s",
			"$0"
		],
		"description": "shipyard templated 'timeout' parameter of resource 'exec_local'"
	},
	"shipyard exec_local parameter 'daemon'": {
		"prefix": ["shipyard-exec-local-parameter-daemon"],
		"body": [
			"  // exec_local daemon",
			"  daemon = \"${1:<daemon-mode>}\"",
			"$0"
		],
		"description": "shipyard templated 'daemon' parameter of resource 'exec_local'"
	},
	"shipyard resource 'module' - empty": {
		"prefix": ["shipyard-resource-module-empty"],
		"body": [
			"// module resource",
			"module \"${1:<module-name>}\" {",
			"  $0",
			"}",
			""
		],
		"description": "shipyard empty 'module' resource"
	},
	"shipyard resource 'module' -  full": {
		"prefix": ["shipyard-resource-module-full"],
		"body": [
			"// module resource",
			"module \"${1:<module-name>}\" {",
			"  // module dependencies",
			"  depends_on = [\"${1:<depends-on>}\"]",
			"  // module source",
			"  source     = [\"${2:<source-path>}\"]",
			"}",
			"$0"
		],
		"description": "shipyard full 'module' resource"
	},
	"shipyard resource 'module' -  common": {
		"prefix": ["shipyard-resource-module-common"],
		"body": [
			"// module resource",
			"module \"${1:<module-name>}\" {",
			"  // module source",
			"  source = [\"${1:<source-path>}\"]",
			"}",
			"$0"
		],
		"description": "shipyard common 'module' resource"
	},
	"shipyard module parameter 'depends_on'": {
		"prefix": ["shipyard-module-parameter-depends-on"],
		"body": [
			"  // module dependencies",
			"  depends_on = [\"${1:<depends-on>}\"]",
			"$0"
		],
		"description": "shipyard templated 'depends_on' parameter of resource 'module'"
	},
	"shipyard module parameter 'source'": {
		"prefix": ["shipyard-module-parameter-source"],
		"body": [
			"  // module source",
			"  source = [\"${1:<source-path>}\"]",
			"$0"
		],
		"description": "shipyard templated 'source' parameter of resource 'module'"
	},
	"shipyard resource 'network' - empty": {
		"prefix": ["shipyard-resource-network-empty"],
		"body": [
			"// network resource",
			"network \"${1:<network-name>}\" {",
			"  $0",
			"}",
			""
		],
		"description": "shipyard empty 'network' resource"
	},
	"shipyard resource 'network' -  full": {
		"prefix": ["shipyard-resource-network-full"],
		"body": [
			"// network resource",
			"network \"${1:<network-name>}\" {",
			"  // network subnet",
			"  subnet = \"${2:<subnet-cidr>}\"",
			"}",
			"$0"
		],
		"description": "shipyard full 'network' resource"
	},
	"shipyard resource 'network' -  common": {
		"prefix": ["shipyard-resource-network-common"],
		"body": [
			"// network resource",
			"network \"${1:<network-name>}\" {",
			"  // network subnet",
			"  subnet = \"${2:<subnet-cidr>}\"",
			"}",
			"$0"
		],
		"description": "shipyard common 'network' resource"
	},
	"shipyard network parameter 'subnet'": {
		"prefix": ["shipyard-network-parameter-subnet"],
		"body": [
			"  // network subnet",
			"  subnet = \"${1:<subnet-cidr>}\"",
			"$0"
		],
		"description": "shipyard templated 'subnet' parameter of resource 'network'"
	},
	"shipyard resource 'output' - empty": {
		"prefix": ["shipyard-resource-output-empty"],
		"body": [
			"// output resource",
			"output \"${1:<output-name>}\" {",
			"  $0",
			"}",
			""
		],
		"description": "shipyard empty 'output' resource"
	},
	"shipyard resource 'output' -  full": {
		"prefix": ["shipyard-resource-output-full"],
		"body": [
			"// output resource",
			"output \"${1:<output-name>}\" {",
			"  // output value",
			"  value = \"${2:<value>}\"",
			"}",
			"$0"
		],
		"description": "shipyard full 'output' resource"
	},
	"shipyard resource 'output' -  common": {
		"prefix": ["shipyard-resource-output-common"],
		"body": [
			"// output resource",
			"output \"${1:<output-name>}\" {",
			"  // output value",
			"  value = \"${2:<value>}\"",
			"}",
			"$0"
		],
		"description": "shipyard common 'output' resource"
	},
	"shipyard output parameter 'value'": {
		"prefix": ["shipyard-output-parameter-value"],
		"body": [
			"  // output value",
			"  value = \"${1:<value>}\"",
			"$0"
		],
		"description": "shipyard templated 'value' parameter of resource 'output'"
	},
	"shipyard resource 'sidecar' - empty": {
		"prefix": ["shipyard-resource-sidecar-empty"],
		"body": [
			"// sidecar resource",
			"sidecar \"${1:<sidecar-name>}\" {",
			"  $0",
			"}",
			""
		],
		"description": "shipyard empty 'sidecar' resource"
	},
	"shipyard resource 'sidecar' -  full": {
		"prefix": ["shipyard-resource-sidecar-full"],
		"body": [
			"// sidecar resource",
			"sidecar \"${1:<sidecar-name>}\" {",
			"  // exec_remote dependencies",
			"  depends_on = [\"${2:<depends-on>}\"]",
			"",
			"  // exec_remote target",
			"  target = \"${3:<target>}\"",
			"",
			"  // sidecar image",
			"  image {",
			"    name     = \"${4:<image-name>}\"",
			"    user     = \"${5:<image-repo-user>}\"",
			"    password = \"${6:<image-repo-password>}\"",
			"  }",
			"",
			"  // sidecar entrypoint",
			"  entrypoint = [",
			"    \"${7:<insert>}\",",
			"    \"${8:<entrypoint>}\",",
			"    \"${9:<here>}\"",
			"  ]",
			"  // sidecar command",
			"  command = [",
			"    \"${10:<insert>}\",",
			"    \"${11:<command>}\",",
			"    \"${12:<here>}\"",
			"  ]",
			"",
			"  // sidecar environment",
			"  env {",
			"    key   = \"${13:<key>}\"",
			"    value = \"${14:<value>}\"",
			"  }",
			"",
			"  // sidecar volume(s)",
			"  volume {",
			"    source      = \"${15:<source>}\"",
			"    destination = \"${16:<destination>}\"",
			"    type        = \"${17:<type>}\" # (bind|volume|tmpfs)",
			"  }",
			"",
			"  // container privileged mode",
			"  privileged = ${18|true,false|}",
			"",
			"  // container health check",
			"  health_check {",
			"    duration          = \"${19:<duration>}s\"",
			"    http              = \"${20:<address-to-be-checked>}\"",
			"    http_status_codes = [${21:status-code1},${22:status-code2},${23:status-codeN}] # optional",
			"  }",
			"",
			"  // container failure behaviour",
			"  max_restart_count = ${24:<max-restart-count>}",
			"}",
			"$0"
		],
		"description": "shipyard full 'sidecar' resource"
	},
	"shipyard resource 'sidecar' -  common": {
		"prefix": ["shipyard-resource-sidecar-common"],
		"body": [
			"// sidecar resource",
			"sidecar \"${1:<sidecar-name>}\" {",
			"  // exec_remote dependencies",
			"  depends_on = [\"${2:<depends-on>}\"]",
			"",
			"  // exec_remote target",
			"  target = \"${3:<target>}\"",
			"",
			"  // sidecar image",
			"  image {",
			"    name     = \"${4:<image-name>}\"",
			"    user     = \"${5:<image-repo-user>}\"",
			"    password = \"${6:<image-repo-password>}\"",
			"  }",
			"",
			"  // sidecar environment",
			"  env {",
			"    key   = \"${10:<key>}\"",
			"    value = \"${11:<value>}\"",
			"  }",
			"",
			"}",
			"$0"
		],
		"description": "shipyard common 'sidecar' resource"
	},
	"shipyard sidecar parameter 'depends_on'": {
		"prefix": ["shipyard-sidecar-parameter-depends-on"],
		"body": [
			"  // sidecar dependencies",
			"  depends_on = [\"${1:<depends-on>}\"]",
			"$0"
		],
		"description": "shipyard templated 'depends_on' parameter of resource 'sidecar'"
	},
	"shipyard sidecar parameter 'target'": {
		"prefix": ["shipyard-sidecar-parameter-target"],
		"body": [
			"  // sidecar target",
			"  target = \"${1:<target>}\"",
			"$0"
		],
		"description": "shipyard templated 'target' parameter of resource 'sidecar'"
	},
	"shipyard sidecar parameter 'image'": {
		"prefix": ["shipyard-sidecar-parameter-image"],
		"body": [
			"  // sidecar image",
			"  // this block is ignored when 'target' is specified.",
			"  image {",
			"    name     = \"${1:<image-name>}\"",
			"    user     = \"${2:<image-repo-user>}\"",
			"    password = \"${3:<image-repo-password>}\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'image' parameter of resource 'sidecar'"
	},
	"shipyard sidecar parameter 'entrypoint'": {
		"prefix": ["shipyard-sidecar-parameter-entrypoint"],
		"body": [
			"  // sidecar entrypoint",
			"  entrypoint = [",
			"    \"${1:<insert>}\",",
			"    \"${2:<entrypoint>}\",",
			"    \"${3:<here>}\"",
			"  ]",
			"$0"
		],
		"description": "shipyard templated 'entrypoint' parameter of resource 'sidecar'"
	},
	"shipyard sidecar parameter 'command'": {
		"prefix": ["shipyard-sidecar-parameter-command"],
		"body": [
			"  // sidecar command",
			"  command = [",
			"    \"${1:<insert>}\",",
			"    \"${2:<command>}\",",
			"    \"${3:<here>}\"",
			"  ]",
			"$0"
		],
		"description": "shipyard templated 'command' parameter of resource 'sidecar'"
	},
	"shipyard sidecar parameter 'env'": {
		"prefix": ["shipyard-sidecar-parameter-env"],
		"body": [
			"  // sidecar environment",
			"  env {",
			"    key   = \"${1:<key>}\"",
			"    value = \"${2:<value>}\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'env' parameter of resource 'sidecar'"
	},
	"shipyard sidecar parameter 'volume'": {
		"prefix": ["shipyard-sidecar-parameter-volume"],
		"body": [
			"  // sidecar volume(s)",
			"  volume {",
			"    source      = \"${1:<source>}\"",
			"    destination = \"${2:<destination>}\"",
			"    type        = \"${3:<type>}\" # (bind|volume|tmpfs)",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'volume' parameter of resource 'sidecar'"
	},
	"shipyard sidecar parameter 'privileged'": {
		"prefix": ["shipyard-sidecar-parameter-privileged"],
		"body": [
			"  // sidecar privileged mode",
			"  privileged = ${1|true,false|}",
			"$0"
		],
		"description": "shipyard templated 'privileged' parameter of resource 'sidecar'"
	},
	"shipyard sidecar parameter 'health_check'": {
		"prefix": ["shipyard-sidecar-parameter-health-check"],
		"body": [
			"  // sidecar health check",
			"  health_check {",
			"    duration          = \"${1:<duration>}s\"",
			"    http              = \"${2:<address-to-be-checked>}\"",
			"    http_status_codes = [${3:status-code1},${4:status-code2},${4:status-codeN}] # optional",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'health_check' parameter of resource 'sidecar'"
	},
	"shipyard sidecar parameter 'max_restart_count'": {
		"prefix": ["shipyard-sidecar-parameter-max-restart-count"],
		"body": [
			"  // sidecar failure behaviour",
			"  max_restart_count = ${1:<max-restart-count>}",
			"$0"
		],
		"description": "shipyard templated 'max_restart_count' parameter of resource 'sidecar'"
	},
	"shipyard resource 'template' - empty": {
		"prefix": ["shipyard-resource-template-empty"],
		"body": [
			"// template resource",
			"template \"${1:<template-name>}\" {",
			"  $0",
			"}",
			""
		],
		"description": "shipyard empty 'template' resource"
	},
	"shipyard resource 'template' -  full": {
		"prefix": ["shipyard-resource-template-full"],
		"body": [
			"// template resource",
			"template \"${1:<template-name>}\" {",
			"  // template dependencies",
			"  depends_on = [\"${2:<depends-on>}\"]",
			"",
			"  // template source",
			"  source      = \"${3:<source-path>}\"",
			"  // template destination",
			"  destination = \"${4:<destination-path>}\"",
			"",
			"  // template vars",
			"  vars = {",
			"    ${5:<var1>} = \"${6:<value1>}\"",
			"    ${7:<var2>} = \"${8:<value2>}\"",
			"    ${9:<varN>} = \"${10:<valueN>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "shipyard full 'template' resource"
	},
	"shipyard resource 'template' -  common": {
		"prefix": ["shipyard-resource-template-common"],
		"body": [
			"// template resource",
			"template \"${1:<template-name>}\" {",
			"  // template source",
			"  source      = \"${2:<source-path>}\"",
			"  // template destination",
			"  destination = \"${3:<destination-path>}\"",
			"",
			"  // template vars",
			"  vars = {",
			"    ${4:<var1>} = \"${5:<value1>}\"",
			"    ${6:<var2>} = \"${7:<value2>}\"",
			"    ${8:<varN>} = \"${9:<valueN>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "shipyard common 'template' resource"
	},
	"shipyard resource 'template' -  heredoc": {
		"prefix": ["shipyard-resource-template-heredoc"],
		"body": [
			"// template resource",
			"template \"${1:<template-name>}\" {",
			"  // template source",
			"  source      = <<-EOF",
			"    ${2:<insert-your-code-here>}",
			"    EOF",
			"  // template destination",
			"  destination = \"${3:<destination-path>}\"",
			"",
			"  // template vars",
			"  vars = {",
			"    ${4:<var1>} = \"${5:<value1>}\"",
			"    ${6:<var2>} = \"${7:<value2>}\"",
			"    ${8:<varN>} = \"${9:<valueN>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "shipyard heredoc 'template' resource"
	},
	"shipyard template parameter 'depends_on'": {
		"prefix": ["shipyard-template-parameter-depends-on"],
		"body": [
			"  // template dependencies",
			"  depends_on = [\"${1:<depends-on>}\"]",
			"$0"
		],
		"description": "shipyard templated 'depends_on' parameter of resource 'template'"
	},
	"shipyard template parameter 'source'": {
		"prefix": ["shipyard-template-parameter-source"],
		"body": [
			"  // template source",
			"  source = \"${1:<source-path>}\"",
			"$0"
		],
		"description": "shipyard templated 'source' parameter of resource 'template'"
	},
	"shipyard template parameter 'source' as heredoc": {
		"prefix": ["shipyard-template-parameter-source-heredoc"],
		"body": [
			"  // template source as heredoc",
			"  source = <<-EOF",
			"    ${2:<insert-your-code-here>}",
			"    EOF",
			"$0"
		],
		"description": "shipyard templated 'source' as heredoc parameter of resource 'template'"
	},
	"shipyard template parameter 'destination'": {
		"prefix": ["shipyard-template-parameter-destination"],
		"body": [
			"  // template destination",
			"  destination = \"${1:<destination-path>}\"",
			"$0"
		],
		"description": "shipyard templated 'destination' parameter of resource 'template'"
	},
	"shipyard template parameter 'vars'": {
		"prefix": ["shipyard-template-parameter-vars"],
		"body": [
			"  // template vars",
			"  vars = {",
			"    ${1:<var1>} = \"${2:<value1>}\"",
			"    ${3:<var2>} = \"${4:<value2>}\"",
			"    ${5:<varN>} = \"${6:<valueN>}\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'vars' parameter of resource 'template'"
	},
	"shipyard resource 'variable' -  simple": {
		"prefix": ["shipyard-resource-variable-simple"],
		"body": [
			"// variable resource",
			"variable \"${1:<variable-name>}\" {",
			"  default = \"${2:<variable-value>}\"",
			"}",
			"$0",
		],
		"description": "shipyard simple 'variable' resource"
	},
	"shipyard resource 'variable' -  map": {
		"prefix": ["shipyard-resource-variable-map"],
		"body": [
			"// variable map resource",
			"variable \"${1:<variable-name>}\" {",
			"  default = {",
			"    ${2:<map-entry1>} = \"${3:<map-value1>}\"",
			"    ${4:<map-entry2>} = \"${5:<map-value2>}\"",
			"    ${6:<map-entry3>} = \"${7:<map-valueN>}\"",
			"  }",
			"}",
			"$0",
		],
		"description": "shipyard 'variable' map resource"
	},
	"shipyard resource 'variable' -  array": {
		"prefix": ["shipyard-resource-variable-array"],
		"body": [
			"// variable array resource",
			"variable \"${1:<variable-name>}\" {",
			"  default = [",
			"    \"${2:<array-value1>}\",",
			"    \"${3:<array-value2>}\",",
			"    \"${4:<array-valueN>}\"",
			"  ]",
			"}",
			"$0",
		],
		"description": "shipyard 'variable' array resource"
	},
	"shipyard meta parameter 'depends_on'": {
		"prefix": ["shipyard-meta-parameter-depends-on"],
		"body": [
			"  // meta dependencies",
			"  depends_on = [\"${1:<depends-on>}\"]",
			"$0"
		],
		"description": "shipyard templated 'depends_on' parameter of resource 'x'"
	},
	"shipyard meta parameter 'disabled'": {
		"prefix": ["shipyard-meta-parameter-disabled"],
		"body": [
			"  // meta feature toggle",
			"  disabled = [\"${1:<disabled>}\"]",
			"$0"
		],
		"description": "shipyard templated 'disabled' parameter of resource 'x'"
	},
	"shipyard function 'env'": {
		"prefix": ["shipyard-function-env"],
		"body": [
			"  // function env",
			"  ${1:<key>} = env(\"${2:<environment-variable>}\")",
			"$0"
		],
		"description": "shipyard templated 'env' function"
	},
	"shipyard function 'k8s_config'": {
		"prefix": ["shipyard-function-k8s-config"],
		"body": [
			"  // function k8s_config",
			"  ${1:<key>} = \"${k8s_config(\"${2:<cluster-name>}\")}\"",
			"$0"
		],
		"description": "shipyard templated 'k8s_config' function"
	},
	"shipyard function 'k8s_config_docker'": {
		"prefix": ["shipyard-function-k8s-config-docker"],
		"body": [
			"  // function k8s_config_docker",
			"  ${1:<key>} = k8s_config_docker(\"${2:<cluster-name>}\")",
			"$0"
		],
		"description": "shipyard templated 'k8s_config_docker' function"
	},
	"shipyard function 'home'": {
		"prefix": ["shipyard-function-home"],
		"body": [
			"  // function home",
			"  ${1:<key>} = home()",
			"$0"
		],
		"description": "shipyard templated 'home' function"
	},
	"shipyard function 'shipyard'": {
		"prefix": ["shipyard-function-shipyard"],
		"body": [
			"  // function shipyard",
			"  // returns the full path to the .shipyard folder inside your home folder.",
			"  ${1:<key>} = shipyard()",
			"$0"
		],
		"description": "shipyard templated 'shipyard' function"
	},
	"shipyard function 'data'": {
		"prefix": ["shipyard-function-data"],
		"body": [
			"  // function data",
			"  // returns the full path to a temporary data folder which is automatically removed when running shipyard destroy.",
			"  ${1:<key>} = data()",
			"$0"
		],
		"description": "shipyard templated 'data' function"
	},
	"shipyard function 'file'": {
		"prefix": ["shipyard-function-file"],
		"body": [
			"  // function file",
			"  // returns the absolute path of the current configuration file.",
			"  ${1:<key>} = file()",
			"$0"
		],
		"description": "shipyard templated 'file' function"
	},
	"shipyard function 'file_dir'": {
		"prefix": ["shipyard-function-file-dir"],
		"body": [
			"  // function file_dir",
			"  // returns the absolute directory of the current configuration file.",
			"  ${1:<key>} = file_dir()",
			"$0"
		],
		"description": "shipyard templated 'file_dir' function"
	},
	"shipyard function 'docker_ip'": {
		"prefix": ["shipyard-function-docker-ip"],
		"body": [
			"  // function docker_ip",
			"  // returns the IP address of the Docker engine Shipyard is using.",
			"  ${1:<key>} = docker_ip()",
			"$0"
		],
		"description": "shipyard templated 'docker_ip' function"
	},
	"shipyard function 'docker_host'": {
		"prefix": ["shipyard-function-docker-host"],
		"body": [
			"  // function docker_host",
			"  // returns the value from the environment variable DOCKER_HOST.",
			"  ${1:<key>} = docker_host()",
			"$0"
		],
		"description": "shipyard templated 'docker_host' function"
	},
	"shipyard function 'shipyard_ip'": {
		"prefix": ["shipyard-function-shipyard-ip"],
		"body": [
			"  // function shipyard_ip",
			"  // returns a non loopback IPV4 address for the machine running the shipyard run command.",
			"  ${1:<key>} = shipyard_ip()",
			"$0"
		],
		"description": "shipyard templated 'shipyard_ip' function"
	},
	"shipyard function 'cluster_api'": {
		"prefix": ["shipyard-function-cluster-api"],
		"body": [
			"  // function cluster_api",
			"  // returns the full address for the given clusters API, accessible from the local machine.",
			"  ${1:<key>} = \"${cluster_api(\"${2:<cluster-name>}\")}\"",
			"$0"
		],
		"description": "shipyard templated 'cluster_api' function"
	},
	"shipyard resource 'nomad_cluster' - empty": {
		"prefix": ["shipyard-resource-nomad-cluster-empty"],
		"body": [
			"// nomad_cluster resource",
			"nomad_cluster \"${1:<nomad-cluster-name>}\" {",
			"  $0",
			"}",
			""
		],
		"description": "shipyard empty 'nomad_cluster' resource"
	},
	"shipyard resource 'nomad_cluster' -  full": {
		"prefix": ["shipyard-resource-nomad-cluster-full"],
		"body": [
			"// nomad_cluster resource",
			"nomad_cluster \"${1:<nomad-cluster-name>}\" {",
			"  // nomad_cluster networking",
			"  network {",
			"    name    = \"${2:<network-name>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "shipyard full 'nomad_cluster' resource"
	},
	"shipyard resource 'nomad_cluster' -  common": {
		"prefix": ["shipyard-resource-nomad-cluster-common"],
		"body": [
			"// nomad_cluster resource",
			"nomad_cluster \"${1:<nomad-cluster-name>}\" {",
			"  // nomad_cluster networking",
			"  network {",
			"    name    = \"${2:<network-name>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "shipyard common 'nomad_cluster' resource"
	},
	"shipyard resource 'nomad_ingress' - empty": {
		"prefix": ["shipyard-resource-nomad-ingress-empty"],
		"body": [
			"// nomad_ingress resource",
			"nomad_ingress \"${1:<nomad-ingress-name>}\" {",
			"  $0",
			"}",
			""
		],
		"description": "shipyard empty 'nomad_ingress' resource"
	},
	"shipyard resource 'nomad_ingress' -  full": {
		"prefix": ["shipyard-resource-nomad-ingress-full"],
		"body": [
			"// nomad_ingress resource",
			"nomad_ingress \"${1:<nomad-ingress-name>}\" {",
			"  // nomad_ingress dependencies",
			"  depends_on = [\"${2:<depends-on>}\"]",
			"",
			"  // nomad_ingress networking",
			"  network {",
			"    name    = \"${3:<network-name>}\"",
			"    address =  \"${4:<ip-address>}\"",
			"  }",
			"",
			"  // nomad_ingress cluster",
			"  cluster = \"${5:<cluster-name>}\"",
			"",
			"  // nomad_ingress job",
			"  job   = \"${6:<job-name>}\"",
			"  // nomad_ingress group",
			"  group = \"${7:<group-name>}\"",
			"  // nomad_ingress task",
			"  task  = \"${8:<task-name>}\"",
			"",
			"  // nomad_ingress port(s)",
			"  port {",
			"    local  = \"${9:<local>}\"",
			"    remote = \"${10:<remote>}\"",
			"    host   = \"${11:<host>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "shipyard full 'nomad_ingress' resource"
	},
	"shipyard resource 'nomad_ingress' -  common": {
		"prefix": ["shipyard-resource-nomad-ingress-common"],
		"body": [
			"// nomad_ingress resource",
			"nomad_ingress \"${1:<nomad-ingress-name>}\" {",
			"  // nomad_ingress networking",
			"  network {",
			"    name    = \"${2:<network-name>}\"",
			"    address =  \"${3:<ip-address>}\"",
			"  }",
			"",
			"  // nomad_ingress cluster",
			"  cluster = \"${4:<cluster-name>}\"",
			"",
			"  // nomad_ingress job",
			"  job   = \"${5:<job-name>}\"",
			"  // nomad_ingress group",
			"  group = \"${6:<group-name>}\"",
			"  // nomad_ingress task",
			"  task  = \"${7:<task-name>}\"",
			"",
			"  // nomad_ingress port(s)",
			"  port {",
			"    local  = \"${8:<local>}\"",
			"    remote = \"${9:<remote>}\"",
			"    host   = \"${10:<host>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "shipyard common 'nomad_ingress' resource"
	},
	"shipyard nomad_ingress parameter 'depends_on'": {
		"prefix": ["shipyard-nomad-ingress-parameter-depends-on"],
		"body": [
			"  // nomad_ingress dependencies",
			"  depends_on = [\"${1:<depends-on>}\"]",
			"$0"
		],
		"description": "shipyard templated 'depends_on' parameter of resource 'nomad_ingress'"
	},
	"shipyard nomad_ingress parameter 'network'": {
		"prefix": ["shipyard-nomad-ingress-parameter-network"],
		"body": [
			"  // nomad_ingress networking",
			"  network {",
			"    name    = \"${1:<network-name>}\"",
			"    address =  \"${2:<ip-address>}\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'network' parameter of resource 'nomad_ingress'"
	},
	"shipyard nomad_ingress parameter 'cluster'": {
		"prefix": ["shipyard-nomad-ingress-parameter-cluster"],
		"body": [
			"  // nomad_ingress cluster",
			"  cluster = \"${1:<cluster-name>}\"",
			"$0"
		],
		"description": "shipyard templated 'cluster' parameter of resource 'nomad_ingress'"
	},
	"shipyard nomad_ingress parameter 'job'": {
		"prefix": ["shipyard-nomad-ingress-parameter-job"],
		"body": [
			"  // nomad_ingress job",
			"  job = \"${1:<job-name>}\"",
			"$0"
		],
		"description": "shipyard templated 'job' parameter of resource 'nomad_ingress'"
	},
	"shipyard nomad_ingress parameter 'group'": {
		"prefix": ["shipyard-nomad-ingress-parameter-group"],
		"body": [
			"  // nomad_ingress group",
			"  group = \"${1:<group-name>}\"",
			"$0"
		],
		"description": "shipyard templated 'group' parameter of resource 'nomad_ingress'"
	},
	"shipyard nomad_ingress parameter 'task'": {
		"prefix": ["shipyard-nomad-ingress-parameter-task"],
		"body": [
			"  // nomad_ingress task",
			"  task = \"${1:<task-name>}\"",
			"$0"
		],
		"description": "shipyard templated 'task' parameter of resource 'nomad_ingress'"
	},
	"shipyard nomad_ingress parameter 'port'": {
		"prefix": ["shipyard-nomad-ingress-parameter-port"],
		"body": [
			"  // nomad_ingress port(s)",
			"  port {",
			"    local  = \"${1:<local>}\"",
			"    remote = \"${2:<remote>}\"",
			"    host   = \"${3:<host>}\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'port' parameter of resource 'nomad_ingress'"
	},
	"shipyard resource 'k8s_cluster' - empty": {
		"prefix": ["shipyard-resource-k8s-cluster-empty","shipyard-resource-kubernetes-cluster-empty"],
		"body": [
			"// k8s_cluster resource",
			"k8s_cluster \"${1:<kubernetes-cluster-name>}\" {",
			"  $0",
			"}",
			""
		],
		"description": "shipyard empty 'k8s_cluster' resource"
	},
	"shipyard resource 'k8s_cluster' -  full": {
		"prefix": ["shipyard-resource-k8s-cluster-full","shipyard-resource-kubernetes-cluster-full"],
		"body": [
			"// k8s_cluster resource",
			"k8s_cluster \"${1:<kubernetes-cluster-name>}\" {",
			"  // k8s_cluster dependencies",
			"  depends_on = [\"${2:<depends-on>}\"]",
			"",
			"  // k8s_cluster networking",
			"  network {",
			"    name    = \"${3:<network-name>}\"",
			"  }",
			"",
			"  // k8s_cluster driver",
			"  // currently only Ranchers K3s is supported however support for Kind is also planned.",
			"  driver  = \"${4:<k8s-cluster-driver>}\"",
			"  // k8s_cluster version",
			"  version = \"${5:<k8s-cluster-driver-version>}\"",
			"",
			"  // k8s_cluster nodes",
			"  // number of client nodes to create for a cluster, a value of 1 creates a combined server and client.",
			"  // currently only single node clusters are supported.",
			"  nodes = ${6:<k8s-cluster-nodes-count>}",
			"",
			"  // k8s_cluster image",
			"  // specifiy images which will be copied from the local cache to the remote cluster.",
			"  // can also be used to push local builds which are not stored in a remote container registry.",
			"  image {",
			"    name     = \"${7:<image-name>}\"",
			"    user     = \"${8:<image-repo-user>}\"",
			"    password = \"${9:<image-repo-password>}\"",
			"  }",
			"",
			"  // k8s_cluster volume(s)",
			"  // can be used to mount custom configuration for custom clusters such as registry configuration for K3s https://rancher.com/docs/k3s/latest/en/installation/private-registry/.",
			"  volume {",
			"    source      = \"${10:<source>}\"",
			"    destination = \"${11:<destination>}\"",
			"    type        = \"${12:<type>}\" # (bind|volume|tmpfs)",
			"  }",
			"",
			"  // k8s_cluster port(s)",
			"  port {",
			"    local  = \"${13:<local>}\"",
			"    remote = \"${14:<remote>}\"",
			"    host   = \"${15:<host>}\"",
			"  }",
			"",
			"  // k8s_cluster port range(s)",
			"  port_range {",
			"    range       = \"${16:<range-start>}-${17:<range-end>}\"",
			"    enable_host = \"${18|true,false|}",
			"  }",
			"}",
			"$0"
		],
		"description": "shipyard full 'k8s_cluster' resource"
	},
	"shipyard resource 'k8s_cluster' -  common": {
		"prefix": ["shipyard-resource-k8s-cluster-common","shipyard-resource-kubernetes-cluster-common"],
		"body": [
			"// k8s_cluster resource",
			"k8s_cluster \"${1:<kubernetes-cluster-name>}\" {",
			"  // k8s_cluster networking",
			"  network {",
			"    name    = \"${2:<network-name>}\"",
			"  }",
			"",
			"  // k8s_cluster driver",
			"  // currently only Ranchers K3s is supported however support for Kind is also planned.",
			"  driver = \"${3:<k8s-cluster-driver>}\"",
			"}",
			"$0"
		],
		"description": "shipyard common 'k8s_cluster' resource"
	},
	"shipyard k8s_cluster parameter 'depends_on'": {
		"prefix": ["shipyard-k8s-cluster-parameter-depends-on","shipyard-kubernetes-cluster-parameter-depends-on"],
		"body": [
			"  // k8s_cluster dependencies",
			"  depends_on = [\"${1:<depends-on>}\"]",
			"$0"
		],
		"description": "shipyard templated 'depends_on' parameter of resource 'k8s_cluster'"
	},
	"shipyard k8s_cluster parameter 'network'": {
		"prefix": ["shipyard-k8s-cluster-parameter-network","shipyard-kubernetes-cluster-parameter-network"],
		"body": [
			"  // k8s_cluster networking",
			"  network {",
			"    name    = \"${1:<network-name>}\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'network' parameter of resource 'k8s_cluster'"
	},
	"shipyard k8s_cluster parameter 'driver'": {
		"prefix": ["shipyard-k8s-cluster-parameter-driver","shipyard-kubernetes-cluster-parameter-driver"],
		"body": [
			"  // k8s_cluster driver",
			"  // currently only Ranchers K3s is supported however support for Kind is also planned.",
			"  driver = \"${1:<k8s-cluster-driver>}\"",
			"$0"
		],
		"description": "shipyard templated 'driver' parameter of resource 'k8s_cluster'"
	},
	"shipyard k8s_cluster parameter 'version'": {
		"prefix": ["shipyard-k8s-cluster-parameter-driver-version","shipyard-kubernetes-cluster-parameter-driver-version"],
		"body": [
			"  // k8s_cluster version",
			"  version = \"${1:<k8s-cluster-driver-version>}\"",
			"$0"
		],
		"description": "shipyard templated 'version' parameter of resource 'k8s_cluster'"
	},
	"shipyard k8s_cluster parameter 'nodes'": {
		"prefix": ["shipyard-k8s-cluster-parameter-nodes","shipyard-kubernetes-cluster-parameter-nodes"],
		"body": [
			"  // k8s_cluster nodes",
			"  // number of client nodes to create for a cluster, a value of 1 creates a combined server and client.",
			"  // currently only single node clusters are supported.",
			"  nodes = ${1:<k8s-cluster-nodes-count>}",
			"$0"
		],
		"description": "shipyard templated 'nodes' parameter of resource 'k8s_cluster'"
	},
	"shipyard k8s_cluster parameter 'image'": {
		"prefix": ["shipyard-k8s-cluster-parameter-image","shipyard-kubernetes-cluster-parameter-image"],
		"body": [
			"  // k8s_cluster image",
			"  // specifiy images which will be copied from the local cache to the remote cluster.",
			"  // can also be used to push local builds which are not stored in a remote container registry.",
			"  image {",
			"    name     = \"${1:<image-name>}\"",
			"    user     = \"${2:<image-repo-user>}\"",
			"    password = \"${3:<image-repo-password>}\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'image' parameter of resource 'k8s_cluster'"
	},
	"shipyard k8s_cluster parameter 'volume'": {
		"prefix": ["shipyard-k8s-cluster-parameter-volume","shipyard-kubernetes-cluster-parameter-volume"],
		"body": [
			"  // k8s_cluster volume(s)",
			"  // can be used to mount custom configuration for custom clusters such as registry configuration for K3s https://rancher.com/docs/k3s/latest/en/installation/private-registry/.",
			"  volume {",
			"    source      = \"${1:<source>}\"",
			"    destination = \"${2:<destination>}\"",
			"    type        = \"${3:<type>}\" # (bind|volume|tmpfs)",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'volume' parameter of resource 'k8s_cluster'"
	},
	"shipyard k8s_cluster parameter 'port'": {
		"prefix": ["shipyard-k8s-cluster-parameter-port","shipyard-kubernetes-cluster-parameter-port"],
		"body": [
			"  // k8s_cluster port(s)",
			"  port {",
			"    local  = \"${1:<local>}\"",
			"    remote = \"${2:<remote>}\"",
			"    host   = \"${3:<host>}\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'port' parameter of resource 'k8s_cluster'"
	},
	"shipyard k8s_cluster parameter 'port_range'": {
		"prefix": ["shipyard-k8s-cluster-parameter-port-range","shipyard-kubernetes-cluster-parameter-port-range"],
		"body": [
			"  // k8s_cluster port range(s)",
			"  port_range {",
			"    range       = \"${1:<range-start>}-${2:<range-end>}\"",
			"    enable_host = \"${3|true,false|}",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'port_range' parameter of resource 'k8s_cluster'"
	},
	"shipyard resource 'k8s_config' - empty": {
		"prefix": ["shipyard-resource-k8s-config-empty","shipyard-resource-kubernetes-config-empty"],
		"body": [
			"// k8s_config resource",
			"k8s_config \"${1:<kubernetes-config-name>}\" {",
			"  $0",
			"}",
			""
		],
		"description": "shipyard empty 'k8s_config' resource"
	},
	"shipyard resource 'k8s_config' -  full": {
		"prefix": ["shipyard-resource-k8s-config-full","shipyard-resource-kubernetes-config-full"],
		"body": [
			"// k8s_config resource",
			"k8s_config \"${1:<kubernetes-config-name>}\" {",
			"  // k8s_config dependencies",
			"  depends_on = [\"${2:<depends-on>}\"]",
			"",
			"  // k8s_config cluster",
			"  cluster = \"${3:<k8s-cluster-name>}\"",
			"",
			"  // k8s_config paths",
			"  paths = [",
			"    \"${4:<files-or-folders>}\",",
			"    \"${5:<containing-valid>}\",",
			"    \"${6:<kubernetes-config>}\"",
			"  ]",
			"",
			"  // k8s_config wait until deployment is ready",
			"  wait_until_ready = ${7|true,false|}",
			"",
			"  // k8s_config health check",
			"  health_check {",
			"    timeout = \"${8:<timeout>}\"",
			"    pods    = [\"${9:<pod-selector1>}\",\"${10:<pod-selector2>}\",\"${11:<pod-selectorN>}\"]",
			"  }",
			"}",
			"$0"
		],
		"description": "shipyard full 'k8s_config' resource"
	},
	"shipyard resource 'k8s_config' -  common": {
		"prefix": ["shipyard-resource-k8s-config-common","shipyard-resource-kubernetes-config-common"],
		"body": [
			"// k8s_config resource",
			"k8s_config \"${1:<kubernetes-config-name>}\" {",
			"  // k8s_config cluster",
			"  cluster = \"${2:<k8s-cluster-name>}\"",
			"",
			"  // k8s_config paths",
			"  paths = [",
			"    \"${3:<files-or-folders>}\",",
			"    \"${4:<containing-valid>}\",",
			"    \"${5:<kubernetes-config>}\"",
			"  ]",
			"",
			"  // k8s_config wait until deployment is ready",
			"  wait_until_ready = ${6|true,false|}",
			"",
			"  // k8s_config health check",
			"  health_check {",
			"    timeout = \"${7:<timeout>}\"",
			"    pods    = [\"${8:<pod-selector1>}\",\"${9:<pod-selector2>}\",\"${10:<pod-selectorN>}\"]",
			"  }",
			"}",
			"$0"
		],
		"description": "shipyard common 'k8s_config' resource"
	},
	"shipyard k8s_config parameter 'depends_on'": {
		"prefix": ["shipyard-k8s-config-parameter-depends-on","shipyard-kubernetes-config-parameter-depends-on"],
		"body": [
			"  // k8s_config dependencies",
			"  depends_on = [\"${1:<depends-on>}\"]",
			"$0"
		],
		"description": "shipyard templated 'depends_on' parameter of resource 'k8s_config'"
	},
	"shipyard k8s_config parameter 'cluster'": {
		"prefix": ["shipyard-k8s-config-parameter-cluster","shipyard-kubernetes-config-parameter-cluster"],
		"body": [
			"  // k8s_config cluster",
			"  cluster = \"${1:<k8s-cluster-name>}\"",
			"$0"
		],
		"description": "shipyard templated 'cluster' parameter of resource 'k8s_config'"
	},
	"shipyard k8s_config parameter 'paths'": {
		"prefix": ["shipyard-k8s-config-parameter-paths","shipyard-kubernetes-config-parameter-paths"],
		"body": [
			"  // k8s_config paths",
			"  paths = [",
			"    \"${1:<files-or-folders>}\",",
			"    \"${2:<containing-valid>}\",",
			"    \"${3:<kubernetes-config>}\"",
			"  ]",
			"$0"
		],
		"description": "shipyard templated 'paths' parameter of resource 'k8s_config'"
	},
	"shipyard k8s_config parameter 'wait_until_ready'": {
		"prefix": ["shipyard-k8s-config-parameter-wait-until-ready","shipyard-kubernetes-config-parameter-wait-until-ready"],
		"body": [
			"  // k8s_config wait until deployment is ready",
			"  wait_until_ready = ${1|true,false|}",
			"$0"
		],
		"description": "shipyard templated 'wait_until_ready' parameter of resource 'k8s_config'"
	},
	"shipyard k8s_config parameter 'health_check'": {
		"prefix": ["shipyard-k8s-config-parameter-health-check","shipyard-kubernetes-config-parameter-health-check"],
		"body": [
			"  // k8s_config health check",
			"  health_check {",
			"    timeout = \"${1:<timeout>}\"",
			"    pods    = [\"${2:<pod-selector1>}\",\"${3:<pod-selector2>}\",\"${4:<pod-selectorN>}\"]",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'health_check' parameter of resource 'k8s_config'"
	},
	"shipyard resource 'helm' - empty": {
		"prefix": ["shipyard-resource-helm-empty"],
		"body": [
			"// helm resource",
			"helm \"${1:<helm-deployment-name>}\" {",
			"  $0",
			"}",
			""
		],
		"description": "shipyard empty 'helm' resource"
	},
	"shipyard resource 'helm' -  full": {
		"prefix": ["shipyard-resource-helm-full"],
		"body": [
			"// helm chart resource",
			"helm \"${1:<helm-deployment-name>}\" {",
			"  // helm chart dependencies",
			"  depends_on = [\"${2:<depends-on>}\"]",
			"",
			"  // helm chart target cluster",
			"  cluster = \"${3:<k8s-cluster-name>}\"",
			"",
			"  // helm chart",
			"  // remote (github) repository example:",
			"  //   \"github.com/hashicorp/vault-helm\"",
			"  // local folder example:",
			"  //   \"./files/helm/vault\"",
			"  chart  = \"${4:<url-or-path-to-chart>}\"",
			"  // helm chart values file",
			"  values = \"${5:<path-to-values-file>}\"",
			"  // helm chart values string",
			"  values_string = {",
			"    ${6:<var1>} = \"${7:<value1>}\"",
			"    ${8:<var2>} = \"${9:<value2>}\"",
			"    ${10:<varN>} = \"${11:<valueN>}\"",
			"  }",
			"",
			"  // helm chart namespace",
			"  // default: 'default'",
			"  namespace = \"${12:<namespace>}\"",
			"",
			"  // helm chart health check",
			"  health_check {",
			"    timeout = \"${13:<timeout>}\"",
			"    pods    = [\"${14:<pod-selector1>}\",\"${15:<pod-selector2>}\",\"${16:<pod-selectorN>}\"]",
			"  }",
			"}",
			"$0"
		],
		"description": "shipyard full 'helm' resource"
	},
	"shipyard resource 'helm' -  common": {
		"prefix": ["shipyard-resource-helm-common"],
		"body": [
			"// helm chart resource",
			"helm \"${1:<helm-deployment-name>}\" {",
			"  // helm chart target cluster",
			"  cluster = \"${2:<k8s-cluster-name>}\"",
			"",
			"  // helm chart",
			"  // remote (github) repository example:",
			"  //   \"github.com/hashicorp/vault-helm\"",
			"  // local folder example:",
			"  //   \"./files/helm/vault\"",
			"  chart = \"${3:<url-or-path-to-chart>}\"",
			"",
			"  // helm chart health check",
			"  health_check {",
			"    timeout = \"${4:<timeout>}\"",
			"    pods    = [\"${5:<pod-selector1>}\",\"${6:<pod-selector2>}\",\"${7:<pod-selectorN>}\"]",
			"  }",
			"}",
			"$0"
		],
		"description": "shipyard common 'helm' resource"
	},
	"shipyard helm parameter 'depends_on'": {
		"prefix": ["shipyard-helm-parameter-depends-on"],
		"body": [
			"  // helm chart dependencies",
			"  depends_on = [\"${1:<depends-on>}\"]",
			"$0"
		],
		"description": "shipyard templated 'depends_on' parameter of resource 'helm'"
	},
	"shipyard helm parameter 'cluster'": {
		"prefix": ["shipyard-helm-parameter-cluster"],
		"body": [
			"  // helm chart target cluster",
			"  cluster = \"${1:<k8s-cluster-name>}\"",
			"$0"
		],
		"description": "shipyard templated 'cluster' parameter of resource 'helm'"
	},
	"shipyard helm parameter 'chart'": {
		"prefix": ["shipyard-helm-parameter-chart"],
		"body": [
			"  // helm chart",
			"  // remote (github) repository example:",
			"  //   \"github.com/hashicorp/vault-helm\"",
			"  // local folder example:",
			"  //   \"./files/helm/vault\"",
			"  chart = \"${1:<url-or-path-to-chart>}\"",
			"$0"
		],
		"description": "shipyard templated 'chart' parameter of resource 'helm'"
	},
	"shipyard helm parameter 'values'": {
		"prefix": ["shipyard-helm-parameter-values"],
		"body": [
			"  // helm chart values file",
			"  values = \"${1:<path-to-values-file>}\"",
			"$0"
		],
		"description": "shipyard templated 'values' parameter of resource 'helm'"
	},
	"shipyard helm parameter 'values_string'": {
		"prefix": ["shipyard-helm-parameter-values-string"],
		"body": [
			"  // helm chart values string",
			"  values_string = {",
			"    ${1:<var1>} = \"${2:<value1>}\"",
			"    ${3:<var2>} = \"${4:<value2>}\"",
			"    ${5:<varN>} = \"${6:<valueN>}\"",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'values_string' parameter of resource 'helm'"
	},
	"shipyard helm parameter 'namespace'": {
		"prefix": ["shipyard-helm-parameter-namespace"],
		"body": [
			"  // helm chart namespace",
			"  // default: 'default'",
			"  namespace = \"${1:<namespace>}\"",
			"$0"
		],
		"description": "shipyard templated 'namespace' parameter of resource 'helm'"
	},
	"shipyard helm parameter 'health_check'": {
		"prefix": ["shipyard-helm-parameter-health-check"],
		"body": [
			"  // helm chart health check",
			"  health_check {",
			"    timeout = \"${1:<timeout>}\"",
			"    pods    = [\"${2:<pod-selector1>}\",\"${3:<pod-selector2>}\",\"${4:<pod-selectorN>}\"]",
			"  }",
			"$0"
		],
		"description": "shipyard templated 'health_check' parameter of resource 'helm'"
	},
	//
	// boundary (https://www.boundaryproject.io/)
	//

	//
	// consul (https://www.consul.io/)
	//
	"consul configuration - full": {
		"prefix": ["consul-configuration-full"],
		"body": [
			"acl {",
			"  // acl system enabled",
			"  enabled = ${1|true,false|}",
			"",
			"  // policy_ttl",
			"  // used to control Time-To-Live caching of ACL policies.",
			"  // by default, this is 30 seconds.",
			"  // this setting has a major performance impact: reducing it will cause more frequent refreshes",
			"  // while increasing it reduces the number of refreshes.",
			"  // however, because the caches are not actively invalidated, ACL policy may be stale up to the TTL value.",
			"  policy_ttl = \"${2:<ttl-value>}\"",
			"",
			"  // role_ttl",
			"  // used to control Time-To-Live caching of ACL roles.",
			"  // by default, this is 30 seconds.",
			"  // this setting has a major performance impact: reducing it will cause more frequent refreshes",
			"  // while increasing it reduces the number of refreshes. However, because the caches are not actively invalidated, ACL role may be stale up to the TTL value.",
			"  role_ttl = \"${3:<ttl-value>}\"",
			"",
			"  // token_ttl",
			"  // used to control Time-To-Live caching of ACL tokens.",
			"  // by default, this is 30 seconds.",
			"  // this setting has a major performance impact: reducing it will cause more frequent refreshes",
			"  // while increasing it reduces the number of refreshes.",
			"  // however, because the caches are not actively invalidated, ACL token may be stale up to the TTL value.",
			"  token_ttl = \"${4:<ttl-value>}\"",
			"",
			"  // down_policy",
			"  // in the case that a policy or token cannot be read from the primary_datacenter or leader node,",
			"  // the down policy is applied.",
			"  // in 'allow' mode, all actions are permitted, 'deny' restricts all operations, and 'extend-cache' allows any cached objects to be used,",
			"  // ignoring their TTL values.",
			"  // if a non-cached ACL is used, 'extend-cache' acts like 'deny'.",
			"  // the value 'async-cache' acts the same way as 'extend-cache' but performs updates asynchronously when ACL is present but its TTL is expired,",
			"  // thus, if latency is bad between the primary and secondary datacenters, latency of operations is not impacted.",
			"  // 'extend-cache' is the default.",
			"  down_policy = \"${5:<down-policy>}\" # (\"allow\"|\"deny\"|\"extend-cache\"|\"async-cache\")",
			"",
			"  // default_policy",
			"  // the default policy controls the behavior of a token when there is no matching rule.",
			"  // in 'allow' mode, ACLs are a denylist: any operation not specifically prohibited is allowed.",
			"  // in 'deny' mode, ACLs are an allowlist: any operation not specifically allowed is blocked.",
			"  // note: this will not take effect until you've enabled ACLs.",
			"  // defaults to 'allow' but this will be changed in a future major release.",
			"  default_policy = \"${6:<default-policy>}\" # (\"allow\"|\"deny\")",
			"",
			"  // enable_key_list_policy",
			"  // when true, the list permission will be required on the prefix being recursively read from the KV store.",
			"  // regardless of being enabled, the full set of KV entries under the prefix will be filtered to remove any entries",
			"  // that the request's ACL token does not grant at least read permissions.",
			"  // this option is only available in Consul 1.0 and newer.",
			"  // defaults to false.",
			"  enable_key_list_policy = ${7|true,false|}",
			"",
			"  // enable_token_replication",
			"  // by default secondary Consul datacenters will perform replication of only ACL policies and roles.",
			"  // setting this configuration will will enable ACL token replication and allow for the creation of both",
			"  // local tokens and auth methods in connected secondary datacenters.",
			"  // ! WARNING !",
			"  //   when enabling ACL token replication on the secondary datacenter, global tokens already present in the secondary datacenter will be lost.",
			"  //   for production environments, consider configuring ACL replication in your initial datacenter bootstrapping process.",
			"  enable_token_replication = ${8|true,false|}",
			"",
			"  // enable_token_persistence",
			"  // when true tokens set using the API will be persisted to disk and reloaded when an agent restarts.",
			"  enable_token_persistence = ${9|true,false|}",
			"",
			"  tokens {",
			"    // master token",
			"    // only used for servers in the primary_datacenter.",
			"    // this token will be created with management-level permissions if it does not exist.",
			"    // it allows operators to bootstrap the ACL system with a token secret id that is well-known.",
			"    // the master token is only installed when a server acquires cluster leadership.",
			"    // if you would like to install or change the 'acl_master_token', set the new value for master in the configuration for all servers.",
			"    // once this is done, restart the current leader to force a leader election.",
			"    // if the master token is not supplied, then the servers do not create a master token.",
			"    // when you provide a value, it should be a uuid.",
			"    // to maintain backwards compatibility and an upgrade path this restriction is not currently enforced but will be in a future major Consul release.",
			"    master = \"${10:<master-token>}\"",
			"",
			"    // default token",
			"    // when provided, the agent will use this token when making requests to the Consul servers.",
			"    // clients can override this token on a per-request basis by providing the '?token' query parameter.",
			"    // when not provided, the empty token, which maps to the 'anonymous' acl token, is used.",
			"    default = \"${11:<default-token>}\"",
			"",
			"    // agent token",
			"    // used for clients and servers to perform internal operations.",
			"    // if this isn't specified, then the default will be used.",
			"    agent = \"${12:<agent-token>}\"",
			"",
			"    // agent_master token",
			"    // used to access agent endpoints that require agent read or write privileges, or node read privileges,",
			"    // even if Consul servers aren't present to validate any tokens.",
			"    // this should only be used by operators during outages, regular acl tokens should normally be used by applications.",
			"    agent_master = \"${13:<agent-master-token>}\"",
			"",
			"    // replication token",
			"    // the acl token used to authorize secondary datacenters with the primary datacenter for replication operations.",
			"    // this token is required for servers outside the primary_datacenter when ACLs are enabled.",
			"    // this token may be provided later using the agent token API on each server.",
			"    // this token must have at least 'read' permissions on ACL data but if ACL token replication is enabled",
			"    // then it must have 'write' permissions.",
			"    // this also enables Connect replication, for which the token will require both operator 'write'",
			"    // and intention 'read' permissions for replicating ca and intention data.",
			"    // ! WARNING !",
			"    //   when enabling acl token replication on the secondary datacenter, policies and roles already present in the secondary datacenter will be lost.",
			"    //   for production environments, consider configuring acl replication in your initial datacenter bootstrapping process.",
			"    replication = \"${14:<replication-token>}\"",
			"",
			"    // managed_service_provider",
			"    // ! enterprise feature !",
			"    // an array of acl tokens used by Consul managed service providers for cluster operations.",
			"    managed_service_provider [",
			"      {",
			"        accessor_id = \"${15:<accessor-id>}\"",
			"        secret_id = \"${16:<secret-id>}\"",
			"      }",
			"    ]",
			"  }",
			"}",
			"// addresses",
			"addresses = \"${17:<addresses>}\"",
			"",
			"// advertise_addr",
			"advertise_addr              = \"${18:<advertise-address>}\"",
			"// advertise_addr_ipv4",
			"// this was added together with advertise_addr_ipv6 to support dual stack IPv4/IPv6 environments.",
			"// using this, both ipv4 and ipv6 addresses can be specified and requested during eg service discovery.",
			"advertise_addr_ipv4         = \"${19:<advertise-address-ipv4>}\"",
			"// advertise_addr_ipv6",
			"// this was added together with advertise_addr_ipv6 to support dual stack IPv4/IPv6 environments.",
			"// using this, both ipv4 and ipv6 addresses can be specified and requested during eg service discovery.",
			"advertise_addr_ipv6         = \"${20:<advertise-address-ipv6>}\"",
			"// advertise_addr_wan",
			"advertise_addr_wan          = \"${21:<advertise-address-wan>}\"",
			"// advertise_addr_wan_ipv4",
			"// this was added together with advertise_addr_wan_ipv6 to support dual stack IPv4/IPv6 environments.",
			"// using this, both IPv4 and IPv6 addresses can be specified and requested during eg service discovery.",
			"advertise_addr_wan_ipv4     = \"${22:<advertise-address-wan-ipv4>}\"",
			"// advertise_addr_wan_ipv6",
			"// this was added together with advertise_addr_wan_ipv6 to support dual stack IPv4/IPv6 environments.",
			"// using this, both IPv4 and IPv6 addresses can be specified and requested during eg service discovery.",
			"advertise_addr_wan_ipv6     = \"${23:<advertise-address-wan-ipv6>}\"",
			"// advertise_reconnect_timeout",
			"// this is a per-agent setting of the reconnect_timeout parameter.",
			"// this agent will advertise to all other nodes in the cluster that after this timeout,",
			"// the node may be completely removed from the cluster.",
			"// this may only be set on client agents and if unset then other nodes will use the main reconnect_timeout setting when determining when this node may be removed from the cluster.",
			"advertise_reconnect_timeout = \"${24:<advertise-reconnect-timeout>}\"",
			"",
			"// serf_lan",
			"// this is an ip address, not to be confused with ports.serf_lan.",
			"serf_lan               = \"${25:<serf-lan>}\"",
			"// serf_lan_allowed_cidrs",
			"serf_lan_allowed_cidrs = \"${26:<serf-lan-allowed-cidrs>}\"",
			"// serf_wan",
			"serf_wan               = \"${27:<serf-wan>}\"",
			"// serf_wan_allowed_cidrs",
			"serf_wan_allowed_cidrs = \"${28:<serf-wan-allowed-cidrs>}\"",
			"",
			"audit {",
			"  // audit enabled",
			"  // ! enterprise feature !",
			"  // controls whether Consul logs out each time a user performs an operation.",
			"  // acls must be enabled to use this feature.",
			"  // defaults to false.",
			"  enabled = ${29|true,false|}",
			"",
			"  sink \"${30:<sink-name>}\" {",
			"    // sink type file",
			"    type = \"${31:<sink-type>}\"",
			"",
			"    // specifies what format the events will be emitted with.",
			"    format = \"${32:<sink-type-format>}\"",
			"",
			"    // sink type file path",
			"    // the directory and filename to write audit events to.",
			"    path = \"${33:<sink-file-path>}\"",
			"",
			"    // sink delivery_guarantee",
			"    // specifies the rules governing how audit events are written.",
			"    delivery_guarantee = \"best-effort\"",
			"    // sink rotate_duration",
			"    // specifies the interval by which the system rotates to a new log file.",
			"    // at least one of 'rotate_duration' or 'rotate_bytes' must be configured to enable audit logging.",
			"    rotate_duration  = \"${34:<sink-rotate-duration>}\"",
			"    // sink rotate_max_files",
			"    // defines the limit that Consul should follow before it deletes old log files.",
			"    rotate_max_files = \"${35:<sink-rotate-max-files>}\"",
			"    // sink rotate_bytes",
			"    // specifies how large an individual log file can grow before Consul rotates to a new file.",
			"    // at least one of rotate_bytes or rotate_duration must be configured to enable audit logging.",
			"    rotate_bytes     = \"${36:<sink-rotate-bytes>}\"",
			"  }",
			"}",
			"",
			"// when these keys are provided as configuration, they will only be respected on bootstrapping.",
			"// if they are not provided, the defaults will be used.",
			"// in order to change the value of these options after bootstrapping, you will need to use the Consul Operator Autopilot command.",
			"autopilot {",
			"  // cleanup_dead_servers",
			"  // this controls the automatic removal of dead server nodes periodically and whenever a new server is added to the cluster.",
			"  // defaults to true.",
			"  cleanup_dead_servers = ${37|true,false|}",
			"",
			"  // last_contact_threshold",
			"  // controls the maximum amount of time a server can go without contact from the leader before being considered unhealthy.",
			"  // must be a duration value such as 10s.",
			"  // defaults to 200ms.",
			"  last_contact_threshold = \"${38:<last-contact-threshold>}\"",
			"",
			"  // max_trailing_logs",
			"  // controls the maximum number of log entries that a server can trail the leader by before being considered unhealthy.",
			"  // defaults to 250.",
			"  max_trailing_logs = ${39:<max-trailing-logs>}",
			"",
			"  // min_quorum",
			"  // sets the minimum number of servers necessary in a cluster before autopilot can prune dead servers.",
			"  // there is no default.",
			"  min_quorum = ${40:<min-quorum>}",
			"",
			"  // server_stabilization_time",
			"  // controls the minimum amount of time a server must be stable in the 'healthy' state before being added to the cluster.",
			"  // only takes effect if all servers are running Raft protocol version 3 or higher.",
			"  // must be a duration value such as 30s.",
			"  // defaults to 10s.",
			"  server_stabilization_time = \"${41:<server-stabilization-time>}\"",
			"",
			"  // redundancy_zone_tag",
			"  // ! enterprise feature !",
			"  // this controls the '-node-meta' key to use when autopilot is separating servers into zones for redundancy.",
			"  // only one server in each zone can be a voting member at one time.",
			"  // if left blank (the default), this feature will be disabled.",
			"  redundancy_zone_tag = \"${42:<redundancy-zone-tag>}\"",
			"",
			"  // disable_upgrade_migration",
			"  // ! enterprise feature !",
			"  // if set to true, this setting will disable autopilot's upgrade migration strategy in Consul Enterprise",
			"  // of waiting until enough newer-versioned servers have been added to the cluster before promoting any of them to voters.",
			"  // defaults to false.",
			"  disable_upgrade_migration = ${43|true,false|}",
			"",
			"  // upgrade_version_tag",
			"  // ! enterprise feature !",
			"  // the 'node_meta' tag to use for version info when performing upgrade migrations.",
			"  // ff this is not set, the Consul version will be used.",
			"  upgrade_version_tag = \"${44:<upgrade-version-tag>}\"",
			"}",
			"",
			"auto_config {",
			"  // enabled",
			"  // this option enables auto_config on a client agent.",
			"  // when starting up but before joining the cluster, the client agent will make an RPC to the configured server addresses",
			"  // to request configuration settings, such as its agent ACL token, TLS certificates, Gossip encryption key as well as other configuration settings.",
			"  // these configurations get merged in as defaults with any user-supplied configuration on the client agent able to override them.",
			"  // the initial RPC uses a JWT specified with either intro_token, intro_token_file or the CONSUL_INTRO_TOKEN environment variable to authorize the request.",
			"  // how the JWT token is verified is controlled by the auto_config.authorizer object available for use on Consul servers.",
			"  // enabling this option also turns on Connect because it is vital for 'auto_config', more specifically the CA and certificates infrastructure.",
			"  // ! WARNING !",
			"  //   enabling 'auto_config' conflicts with the 'auto_encrypt.tls' feature.",
			"  //   only one option may be specified.",
			"  enabled = ${45|true,false|}",
			"",
			"  // intro_token",
			"  // this specifies the JWT to use for the initial auto_config RPC to the Consul servers.",
			"  // this can be overridden with the CONSUL_INTRO_TOKEN environment variable.",
			"  // defaults to \"\".",
			"  intro_token      = \"${46:<auto-config-intro-token>}\"",
			"  // intro_token_file",
			"  // this specifies a file containing the JWT to use for the initial auto_config RPC to the Consul servers.",
			"  // this token from this file is only loaded if the 'intro_token' configuration is unset as well as the CONSUL_INTRO_TOKEN environment variable.",
			"  // defaults to \"\".",
			"  intro_token_file = \"${47:<path-to-intro-token-file>}\"",
			"",
			"  // server_addresses",
			"  // this specifies the addresses of servers in the local datacenter to use for the initial rpc.",
			"  // these addresses support Cloud Auto-Joining and can optionally include a port to use when making the outbound connection.",
			"  // if not port is provided the server_port will be used.",
			"  // defaults to [].",
			"  server_addresses = [\"${48:<server1>}\",\"${49:<server2>}\",\"${50:<serverN>}\"]",
			"",
			"  // dns_sans",
			"  // this is a list of extra DNS SANs to request in the client agent's TLS certificate.",
			"  // the localhost DNS SAN is always requested.",
			"  // defaults to [].",
			"  dns_sans = [\"${51:<dns-san1>}\",\"${52:<dns-san2>}\",\"${53:<dns-sanN>}\"]",
			"",
			"  // ip_sans",
			"  // this is a list of extra IP SANs to request in the client agent's TLS certificate.",
			"  // the ::1 and 127.0.0.1 IP SANs are always requested.",
			"  // defaults to [].",
			"  ip_sans = [\"${54:<ip-san1>}\",\"${55:<ip-san2>}\",\"${56:<ip-sanN>}\"]",
			"",
			"  authorization {",
			"    // enabled",
			"    enabled = ${57|true,false|}",
			"",
			"    static {",
			"      // jwt_validation_pub_keys",
			"      // a list of PEM-encoded public keys to use to authenticate signatures locally.",
			"      // defaults to []",
			"      // note:",
			"      //   exactly one of jwks_url jwt_validation_pub_keys, or oidc_discovery_url is required.",
			"      jwt_validation_pub_keys = [\"${58:<path-to-public-key1>}\",\"${59:<path-to-public-key2>}\",\"${60:<path-to-public-keyN>}\"]",
			"",
			"      // oidc_discovery_url",
			"      // the OIDC Discovery URL, without any .well-known component (base path).",
			"      // defaults to \"\"",
			"      // note:",
			"      //   exactly one of jwks_url jwt_validation_pub_keys, or oidc_discovery_url is required.",
			"      oidc_discovery_url     = \"${61:<oidc-discovery-url>}\"",
			"      // oidc_discovery_ca_cert",
			"      // PEM encoded CA cert for use by the TLS client used to talk with the OIDC Discovery URL.",
			"      // defaults to \"\"",
			"      // note:",
			"      //   every line must end with a newline (\\n). If not set, system certificates are used.",
			"      oidc_discovery_ca_cert = \"${62:<path-to-oidc-discovery-ca-cert>}\"",
			"",
			"      // jwks_url",
			"      // the JWKS URL to use to authenticate signatures.",
			"      // defaults to \"\"",
			"      // note:",
			"      //   exactly one of jwks_url jwt_validation_pub_keys, or oidc_discovery_url is required.",
			"      jwks_url     = \"${63:<jwks-url>}\"",
			"      // jwks_ca_cert",
			"      // PEM encoded CA cert for use by the TLS client used to talk with the JWKS URL.",
			"      // defaults to \"\"",
			"      // note:",
			"      //   every line must end with a newline (\\n). If not set, system certificates are used.",
			"      jwks_ca_cert = \"${64:<path-to-jwks-ca-cert>}\"",
			"",
			"      // claim_mappings",
			"      // mappings of claims (key) that will be copied to a metadata field (value).",
			"      // use this if the claim you are capturing is singular (such as an attribute).",
			"      // when mapped, the values can be any of a number, string, or boolean and will all be stringified when returned.",
			"      // defaults to (map[string]string",
			"      claim_mappings {",
			"        \"${65:<your-claim-key1}\" = \"${66:<your-claim-value1}\"",
			"        \"${67:<your-claim-key2}\" = \"${68:<your-claim-value2}\"",
			"        \"${69:<your-claim-keyN}\" = \"${70:<your-claim-valueN}\"",
			"      }",
			"      // list_claim_mappings",
			"      // mappings of claims (key) will be copied to a metadata field (value).",
			"      // use this if the claim you are capturing is list-like (such as groups).",
			"      // when mapped, the values in each list can be any of a number, string, or boolean and will all be stringified when returned.",
			"      // defaults to (map[string]string",
			"      list_claim_mappings {",
			"        \"${71:<your-claim1}\" = \"${72:<your-metadata1}\"",
			"        \"${73:<your-claim2}\" = \"${74:<your-metadata2}\"",
			"        \"${75:<your-claimN}\" = \"${76:<your-metadataN}\"",
			"      }",
			"",
			"      // jwt_supported_algs",
			"      // JWTSupportedAlgs is a list of supported signing algorithms.",
			"      // defaults to [\"RS256\"]",
			"      jwt_supported_algs = [\"${77:<signing-algorythm1>}\",\"${78:<signing-algorythm2>}\",\"${79:<signing-algorythmN>}\"]",
			"",
			"      // bound_audiences",
			"      // list of aud claims that are valid for login; any match is sufficient.",
			"      // defaults to []",
			"      bound_audiences = [\"${80:<aud-claim1>}\",\"${81:<aud-claim2>}\",\"${82:<aud-claimN>}\"]",
			"      // bound_issuer",
			"      // the value against which to match the iss claim in a JWT.",
			"      // defaults to \"\"",
			"      bound_issuer = \"${83:<iss-claim>}\"",
			"",
			"      // expiration_leeway",
			"      // duration of leeway when validating expiration of a token to account for clock skew.",
			"      // defaults to 150s (2.5 minutes) if set to 0s and can be disabled if set to -1ns.",
			"      // defaults to \"0s\"",
			"      expiration_leeway = \"${84:<expiration-leeway>}\"",
			"      // expiration_leeway",
			"      // duration of leeway when validating not before values of a token to account for clock skew.",
			"      // defaults to 150s (2.5 minutes) if set to 0s and can be disabled if set to -1.",
			"      // defaults to \"0s\"",
			"      not_before_leeway = \"${85:<not-before-leeway>}\"",
			"      // clock_skew_leeway",
			"      // duration of leeway when validating all claims to account for clock skew.",
			"      // defaults to 60s (1 minute) if set to 0s and can be disabled if set to -1ns.",
			"      // defaults to \"0s\"",
			"      clock_skew_leeway = \"${86:<clock-skew-leeway>}\"",
			"",
			"      // claim_assertions",
			"      // list of assertions about the mapped claims required to authorize the incoming RPC request.",
			"      // the syntax uses github.com/hashicorp/go-bexpr which is shared with the API filtering feature.",
			"      // for example, the following configurations when combined will ensure that the JWT sub matches the node name requested by the client.",
			"      // defaults to []",
			"      claim_assertions = [",
			"        \"value.node_name == \\\"\\${node}\\\"\"",
			"      ]",
			"    }",
			"  }",
			"}",
			"",
			"auto_encrypt {",
			"  // allow_tls",
			"  // this option enables auto_encrypt on the servers",
			"  // and allows them to automatically distribute certificates from the Connect CA to the clients.",
			"  // if enabled, the server can accept incoming connections from both the built-in CA and the Connect CA,",
			"  // as well as their certificates.",
			"  // note, the server will only present the built-in CA and certificate,",
			"  // which the client can verify using the CA it received from auto_encrypt endpoint.",
			"  // if disabled, a client configured with 'auto_encrypt.tls' will be unable to start.",
			"  allow_tls = ${87|true,false|}",
			"",
			"  // tls",
			"  // allows the client to request the Connect CA and certificates from the servers,",
			"  // for encrypting RPC communication.",
			"  // the client will make the request to any servers listed in the -join or -retry-join option.",
			"  // this requires that every server to have 'auto_encrypt.allow_tls' enabled.",
			"  // when both 'auto_encrypt' options are used, it allows clients to receive certificates that are generated on the servers.",
			"  // if the '-server-port' is not the default one, it has to be provided to the client as well.",
			"  // usually this is discovered through LAN gossip, but 'auto_encrypt' provision happens before the information can be distributed through gossip.",
			"  // the most secure auto_encrypt setup is when the client is provided with the built-in CA, verify_server_hostname is turned on,",
			"  // and when an ACL token with node.write permissions is setup.",
			"  // tt is also possible to use auto_encrypt with a CA and ACL, but without verify_server_hostname,",
			"  // or only with a ACL enabled, or only with CA and 'verify_server_hostname', or only with a CA, or finally without a CA and without ACL enabled.",
			"  // in any case, the communication to the 'auto_encrypt' endpoint is always TLS encrypted.",
			"  // ! WARNING !",
			"  //   'enabling auto_encrypt.tls' conflicts with the 'auto_config' feature.",
			"  //   only one option may be specified.",
			"  tls = ${88|true,false|}",
			"",
			"  // dns_san",
			"  // when this option is being used, the certificates requested by 'auto_encrypt' from the server have these 'dns_san' set as DNS SAN.",
			"  // defaults to [].",
			"  dns_sans = [\"${89:<dns-san1>}\",\"${90:<dns-san2>}\",\"${91:<dns-sanN>}\"]",
			"",
			"  // ip_san",
			"  // when this option is being used, the certificates requested by 'auto_encrypt' from the server have these 'ip_san' set as IP SAN.",
			"  // defaults to [].",
			"  dns_ip_sansans = [\"${92:<ip-san1>}\",\"${93:<ip-san2>}\",\"${94:<ip-sanN>}\"]",
			"}",
			"",
			"// bootstrap",
			"// this flag is used to control if a server is in 'bootstrap' mode.",
			"// it is important that no more than one server per datacenter be running in this mode.",
			"// technically, a server in bootstrap mode is allowed to self-elect as the Raft leader.",
			"// it is important that only a single node is in this mode; otherwise, consistency cannot be guaranteed as multiple nodes are able to self-elect.",
			"// it is not recommended to use this flag after a cluster has been bootstrapped.",
			"bootstrap        = ${95|true,false|}",
			"// bootstrap_expect",
			"// this flag provides the number of expected servers in the datacenter.",
			"// either this value should not be provided or the value must agree with other servers in the cluster.",
			"// when provided, Consul waits until the specified number of servers are available and then bootstraps the cluster.",
			"// this allows an initial leader to be elected automatically.",
			"// this cannot be used in conjunction with the legacy -bootstrap flag.",
			"// this flag requires '-server' mode.",
			"bootstrap_expect = ${96:<number-of-expected-servers>}",
			"",
			"// bind_addr",
			"// the address that should be bound to for internal cluster communications.",
			"// this is an IP address that should be reachable by all other nodes in the cluster.",
			"// by default, this is \"0.0.0.0\", meaning Consul will bind to all addresses on the local machine",
			"// and will advertise the private IPv4 address to the rest of the cluster.",
			"// if there are multiple private IPv4 addresses available, Consul will exit with an error at startup.",
			"// if you specify \"[::]\", Consul will advertise the public IPv6 address.",
			"// if there are multiple public IPv6 addresses available, Consul will exit with an error at startup.",
			"// Consul uses both TCP and UDP and the same port for both.",
			"// if you have any firewalls, be sure to allow both protocols.",
			"// in Consul 1.1.0 and later this can be dynamically defined with a go-sockaddr template that must resolve at runtime to a single address.",
			"// some example templates:",
			"//   \"{{ GetPrivateInterfaces | include \"network\" \"10.0.0.0/8\" | attr \"address\" }}\"",
			"//   \"{{ GetInterfaceIP \"eth0\" }}\"",
			"//   \"{{ GetAllInterfaces | include \"name\" \"^eth\" | include \"flags\" \"forwardable|up\" | attr \"address\" }}\"",
			"bind_addr = \"${97:<address-for-internal-cluster-communications>}\"",
			"",
			"cache {",
			"  // entry_fetch_max_burst",
			"  // the size of the token bucket used to recharge the rate-limit per cache entry.",
			"  // the default value is 2 and means that when cache has not been updated for a long time,",
			"  // 2 successive queries can be made as long as the rate-limit is not reached.",
			"  entry_fetch_max_burst = ${98:<size-of-token-bucket>}",
			"  // entry_fetch_rate",
			"  // configures the rate-limit at which the cache may refresh a single entry.",
			"  // on a cluster with many changes/s, watching changes in the cache might put high pressure on the servers.",
			"  // this ensures the number of requests for a single cache entry will never go beyond this limit,",
			"  // even when a given service changes every 1/100s.",
			"  // since this is a per cache entry limit, having a highly unstable service will only rate limit the watched on this service,",
			"  // but not the other services/entries.",
			"  // the value is strictly positive, expressed in queries per second as a float, 1 means 1 query per second, 0.1 mean 1 request every 10s maximum.",
			"  // the default value is \"No limit\" and should be tuned on large clusters to avoid performing too many RPCs on entries changing a lot.",
			"  entry_fetch_rate      = ${99:<fetch-rate-as-float>}",
			"}",
			"",
			"// check_update_interval",
			"// this interval controls how often check output from checks in a steady state is synchronized with the server.",
			"// by default, this is set to 5 minutes (\"5m\").",
			"// many checks which are in a steady state produce slightly different output per run (timestamps, etc) which cause constant writes.",
			"// this configuration allows deferring the sync of check output for a given interval to reduce write pressure.",
			"// if a check ever changes state, the new state and associated output is synchronized immediately.",
			"// to disable this behavior, set the value to \"0s\".",
			"check_update_interval = \"${100:<check-update-interval>}\"",
			"",
			"// client_addr",
			"// the address to which Consul will bind client interfaces, including the HTTP and DNS servers.",
			"// by default, this is \"127.0.0.1\", allowing only loopback connections.",
			"// in Consul 1.0 and later this can be set to a space-separated list of addresses to bind to, or a go-sockaddr template that can potentially resolve to multiple addresses.",
			"client_addr = [\"${101:<client-addr1>}\",\"${102:<client-addr2>}\",\"${103:<client-addrN>}\"]",
			"",
			"config_entries {",
			"  // bootstrap",
			"  // this is a list of inlined config entries to insert into the state store when the Consul server gains leadership.",
			"  // this option is only applicable to server nodes.",
			"  // each bootstrap entry will be created only if it does not exist.",
			"  // when reloading, any new entries that have been added to the configuration will be processed.",
			"  // see the configuration entry docs for more details about the contents of each entry.",
			"  bootstrap {",
			"    {",
			"      Kind = \"${104:<configuration-entry-kind1>}\"",
			"      Name = \"${105:<configuration-entry-name1>}\"",
			"      Config {",
			"        ${106:<configuration-entry-config-key1>} = ${107:<configuration-entry-config-value1>}",
			"        ${108:<configuration-entry-config-key2>} = ${109:<configuration-entry-config-value2>}",
			"        ${110:<configuration-entry-config-keyN>} = ${111:<configuration-entry-config-valueN>}",
			"      }",
			"    },",
			"    {",
			"      Kind = \"${112:<configuration-entry-kind2>}\"",
			"      Name = \"${113:<configuration-entry-name2>}\"",
			"      Config {",
			"        ${114:<configuration-entry-config-key1>} = ${115:<configuration-entry-config-value1>}",
			"        ${116:<configuration-entry-config-key2>} = ${117:<configuration-entry-config-value2>}",
			"        ${118:<configuration-entry-config-keyN>} = ${119:<configuration-entry-config-valueN>}",
			"      }",
			"    },",
			"    {",
			"      Kind = \"${120:<configuration-entry-kindN>}\"",
			"      Name = \"${121:<configuration-entry-nameN>}\"",
			"      Config {",
			"        ${122:<configuration-entry-config-key1>} = ${123:<configuration-entry-config-value1>}",
			"        ${124:<configuration-entry-config-key2>} = ${125:<configuration-entry-config-value2>}",
			"        ${126:<configuration-entry-config-keyN>} = ${127:<configuration-entry-config-valueN>}",
			"      }",
			"    }",
			"  }",
			"}",
			"",
			"connect {",
			"  // enabled",
			"  // controls whether Connect features are enabled on this agent.",
			"  // should be enabled on all servers in the cluster in order for Connect to function properly.",
			"  // defaults to false.",
			"  enabled = ${128|true,false|}",
			"",
			"  // enable_mesh_gateway_wan_federation",
			"  // controls whether cross-datacenter federation traffic between servers is funneled through mesh gateways.",
			"  // defaults to false.",
			"  enable_mesh_gateway_wan_federation = ${129|true,false|}",
			"",
			"  // ca_provider",
			"  // controls which CA provider to use for Connect's CA.",
			"  // currently only the aws-pca, consul, and vault providers are supported.",
			"  // this is only used when initially bootstrapping the cluster.",
			"  // for an existing cluster, use the Update ca configuration endpoint. [https://www.consul.io/api/connect/ca#update-ca-configuration]",
			"  ca_provider = \"${130:<connect-ca-provider>}\" # (\"aws-pca\"|\"consul\"|\"vault\")",
			"  // ca_config common",
			"  // an object which allows setting different config options based on the CA provider chosen.",
			"  // this is only used when initially bootstrapping the cluster.",
			"  // for an existing cluster, use the Update ca configuration endpoint. [https://www.consul.io/api/connect/ca#update-ca-configuration]",
			"  ca_config {",
			"    // sets a limit on the number of Certificate Signing Requests that can be processed concurrently.",
			"    // this is useful when you want to limit the number of CPU cores available to the server for certificate signing operations.",
			"    // for example, on an 8 core server, setting this to 1 will ensure that no more than one CPU core",
			"    // will be consumed when generating or rotating certificates.",
			"    // setting this is recommended instead of 'csr_max_per_second' when you want to limit the number of cores",
			"    // consumed since it is simpler to reason about limiting CSR resources this way without artificially slowing down rotations.",
			"    // defaults to 0 (disabled).",
			"    csr_max_concurrent = ${131:<limit-number-of-concurrent-csr>}",
			"    // sets a rate limit on the maximum number of Certificate Signing Requests (CSRs) the servers will accept.",
			"    // this is used to prevent CA rotation from causing unbounded CPU usage on servers.",
			"    // for larger deployments we recommend increasing this based on the expected number of server instances and server resources,",
			"    // or use 'csr_max_concurrent' instead if servers have more than one CPU core.",
			"    // setting this to zero disables rate limiting.",
			"    // it defaults to 50 which is conservative",
			"    csr_max_per_second = ${132:<limit-number-of-maximum-csr>}",
			"",
			"    // the upper bound on the lease duration of a leaf certificate issued for a service.",
			"    // in most cases a new leaf certificate will be requested by a proxy before this limit is reached.",
			"    // this is also the effective limit on how long a server outage can last (with no leader) before network connections will start being rejected.",
			"    // this value cannot be lower than 1 hour or higher than 1 year.",
			"    // this value is also used when rotating out old root certificates from the cluster.",
			"    // then a root certificate has been inactive (rotated out) for more than twice the current leaf_cert_ttl, it will be removed from the trusted list.",
			"    // defaults to 72h.",
			"    leaf_cert_ttl = \"${133:<lease-duration-of-leaf-certificate>}\"",
			"",
			"    // the type of key to generate for this CA.",
			"    // this is only used when the provider is generating a new key.",
			"    // if private_key is set for the Consul provider, or existing root or intermediate PKI paths given for Vault then this will be ignored.",
			"    // currently supported options are ec or rsa.",
			"    // it is required that all servers in a datacenter have the same config for the CA.",
			"    // it is recommended that servers in different datacenters use the same key type and size,",
			"    // although the built-in CA and Vault provider will both allow mixed CA key types.",
			"    // some CA providers (currently Vault) will not allow cross-signing a new CA certificate with a different key type.",
			"    // this means that if you migrate from an RSA-keyed Vault CA to an EC-keyed CA from any provider,",
			"    // you may have to proceed without cross-signing which risks temporary connection issues for workloads during the new certificate rollout.",
			"    // we highly recommend testing this outside of production to understand the impact and suggest sticking to same key type where possible.",
			"    // note that this only affects CA keys generated by the provider.",
			"    // leaf certificate keys are always EC 256 regardless of the CA configuration.",
			"    // default is 'ec'.",
			"    private_key_type = \"${134:<private-key-type>}\"",
			"",
			"    // the length of key to generate for this CA.",
			"    // this is only used when the provider is generating a new key.",
			"    // if 'private_key' is set for the Consul provider, or existing root or intermediate PKI paths given for Vault then this will be ignored.",
			"    // currently supported values are:",
			"    //   private_key_type = ec (default): 224, 256, 384, 521 corresponding to the NIST P-* curves of the same name.",
			"    //   private_key_type = rsa: 2048, 4096",
			"    private_key_bits = ${135:<private-key-bits>}",
			"  }",
			"  // ca_config provider 'aws-pca'",
			"  // an object which allows setting different config options based on the CA provider chosen.",
			"  // this is only used when initially bootstrapping the cluster.",
			"  // for an existing cluster, use the Update ca configuration endpoint. [https://www.consul.io/api/connect/ca#update-ca-configuration]",
			"  ca_config {",
			"    // the Amazon Resource Name (ARN) of an existing private CA in your ACM account.",
			"    // if specified, Consul will attempt to use the existing CA to issue certificates.",
			"    existing_arn = \"${136:<amazon-resource-name>}\"",
			"  }",
			"  // ca_config provider 'consul'",
			"  // an object which allows setting different config options based on the CA provider chosen.",
			"  // this is only used when initially bootstrapping the cluster.",
			"  // for an existing cluster, use the Update ca configuration endpoint. [https://www.consul.io/api/connect/ca#update-ca-configuration]",
			"  ca_config {",
			"    // the PEM contents of the private key to use for the CA.",
			"    private_key = \"${137:<private-key-pem-contents>}\"",
			"    // the PEM contents of the root certificate to use for the CA.",
			"    root_cert   = \"${138:<root-key-pem-contents>}\"",
			"  }",
			"  // ca_config provider 'vault'",
			"  // an object which allows setting different config options based on the CA provider chosen.",
			"  // this is only used when initially bootstrapping the cluster.",
			"  // for an existing cluster, use the Update ca configuration endpoint. [https://www.consul.io/api/connect/ca#update-ca-configuration]",
			"  ca_config {",
			"    // the address of the Vault server to connect to.",
			"    address               = \"${139:<vault-address>}\"",
			"    // the Vault token to use.",
			"    // in Consul 1.8.5 and later, if the token has the renewable flag set,",
			"    // Consul will attempt to renew its lease periodically after half the duration has expired.",
			"    token                 = \"${140:<vault-token>}\"",
			"    // the path to use for the root CA pki backend in Vault.",
			"    // this can be an existing backend with a CA already configured,",
			"    // or a blank/unmounted backend in which case Connect will automatically mount/generate the CA.",
			"    // the Vault token given above must have sudo access to this backend,",
			"    // as well as permission to mount the backend at this path if it is not already mounted.",
			"    root_pki_path         = \"${141:<vault-root-ca-pki-backend-path>}\"",
			"    // the path to use for the temporary intermediate CA pki backend in Vault.",
			"    // Connect will overwrite any data at this path in order to generate a temporary intermediate CA.",
			"    // the Vault token given above must have write access to this backend,",
			"    // as well as permission to mount the backend at this path if it is not already mounted.",
			"    intermediate_pki_path = \"${142:<vault-temporary-intermediate-ca-pki-backend-path>}\"",
			"  }",
			"}",
			"",
			"// datacenter",
			"datacenter = \"${143:<datcenter-name>}\"",
			"",
			"// data_dir",
			"data_dir = \"${144:<path-to-data-dir>}\"",
			"",
			"// disable_anonymous_signature",
			"// disables providing an anonymous signature for de-duplication with the update check.",
			"disable_anonymous_signature = ${145|true,false|}",
			"",
			"// disable_host_node_id",
			"// setting this to true will prevent Consul from using information from the host to generate a deterministic node ID,",
			"// and will instead generate a random node ID which will be persisted in the data directory.",
			"// this is useful when running multiple Consul agents on the same host for testing.",
			"// this defaults to false in Consul prior to version 0.8.5 and in 0.8.5 and later defaults to true, so you must opt-in for host-based IDs.",
			"// host-based IDs are generated using gopsutil, which is shared with HashiCorp's Nomad, so if you opt-in to host-based IDs then Consul",
			"// and Nomad will use information on the host to automatically assign the same ID in both systems.",
			"disable_host_node_id = ${146|true,false|}",
			"",
			"// disable_http_unprintable_char_filter",
			"// Consul 1.0.3 fixed a potential security vulnerability where malicious users could craft KV keys with unprintable chars",
			"// that would confuse operators using the CLI or UI into taking wrong actions.",
			"// users who had data written in older versions of Consul that did not have this restriction will be unable to delete those values by default in 1.0.3 or later.",
			"// this setting enables those users to temporarily disable the filter such that delete operations can work on those keys again to get back to a healthy state.",
			"// it is strongly recommended that this filter is not disabled permanently as it exposes the original security vulnerability.",
			"// defaults to false.",
			"disable_http_unprintable_char_filter = ${147|true,false|}",
			"",
			"// disable_remote_exec",
			"// disables support for remote execution.",
			"// when set to true, the agent will ignore any incoming remote exec requests.",
			"// in versions of Consul prior to 0.8, this defaulted to false.",
			"// in Consul 0.8 the default was changed to true, to make remote exec opt-in instead of opt-out.",
			"disable_remote_exec = ${148|true,false|}",
			"",
			"// disable_update_check",
			"// disables automatic checking for security bulletins and new version releases.",
			"// this is disabled in Consul Enterprise.",
			"disable_update_check = ${149|true,false|}",
			"",
			"// discard_check_output",
			"// discards the output of health checks before storing them.",
			"// this reduces the number of writes to the Consul raft log in environments where health checks have volatile output like timestamps, process ids, ...",
			"discard_check_output = ${150|true,false|}",
			"",
			"// discovery_max_stale",
			"// enables stale requests for all service discovery HTTP endpoints.",
			"// this is equivalent to the max_stale configuration for DNS requests.",
			"// if this value is zero (default), all service discovery HTTP endpoints are forwarded to the leader.",
			"// if this value is greater than zero, any Consul server can handle the service discovery request.",
			"// if a Consul server is behind the leader by more than discovery_max_stale, the query will be re-evaluated on the leader to get more up-to-date results.",
			"// Consul agents also add a new X-Consul-Effective-Consistency response header which indicates if the agent did a stale read.",
			"// 'discover-max-stale' was introduced in Consul 1.0.7 as a way for Consul operators to force stale requests from clients at the agent level,",
			"// and defaults to zero which matches default consistency behavior in earlier Consul versions.",
			"discovery_max_stale = ${151|true,false|}",
			"",
			"dns_config {",
			"  // allow_stale",
			"  // enables a stale query for DNS information.",
			"  // this allows any Consul server, rather than only the leader, to service the request.",
			"  // the advantage of this is you get linear read scalability with Consul servers.",
			"  // in versions of Consul prior to 0.7, this defaulted to false, meaning all requests are serviced by the leader,",
			"  // providing stronger consistency but less throughput and higher latency.",
			"  // in Consul 0.7 and later, this defaults to true for better utilization of available servers.",
			"  allow_stale = ${152|true,false|}",
			"",
			"  // max_stale",
			"  // when allow_stale is specified, this is used to limit how stale results are allowed to be.",
			"  // if a Consul server is behind the leader by more than max_stale, the query will be re-evaluated on the leader to get more up-to-date results.",
			"  // prior to Consul 0.7.1 this defaulted to 5 seconds; in Consul 0.7.1 and later this defaults to 10 years (\"87600h\")",
			"  // which effectively allows DNS queries to be answered by any server, no matter how stale.",
			"  // in practice, servers are usually only milliseconds behind the leader, so this lets Consul continue serving requests in long outage scenarios where no leader can be elected.",
			"  max_stale = \"${153:<max-stale>}\"",
			"",
			"  // node_ttl",
			"  // by default, this is \"0s\", so all node lookups are served with a 0 TTL value.",
			"  // dns caching for node lookups can be enabled by setting this value.",
			"  // this should be specified with the \"s\" suffix for second or \"m\" for minute.",
			"  node_ttl = \"${154:<node-ttl>}\"",
			"",
			"  // service_ttl",
			"  // this is a sub-object which allows for setting a TTL on service lookups with a per-service policy.",
			"  // the \"*\" wildcard service can be used when there is no specific policy available for a service.",
			"  // by default, all services are served with a 0 TTL value.",
			"  // dns caching for service lookups can be enabled by setting this value.",
			"  service_ttl = \"${155:<service-ttl>}\"",
			"",
			"  // enable_truncate",
			"  // if set to true, a UDP DNS query that would return more than 3 records, or more than would fit into a valid UDP response, will set the truncated flag,",
			"  // indicating to clients that they should re-query using TCP to get the full set of records.",
			"  enable_truncate = ${156|true,false|}",
			"",
			"  // only_passing",
			"  // if set to true, any nodes whose health checks are warning or critical will be excluded from DNS results.",
			"  // if false, the default, only nodes whose health checks are failing as critical will be excluded.",
			"  // for service lookups, the health checks of the node itself, as well as the service-specific checks are considered.",
			"  // for example, if a node has a health check that is critical then all services on that node will be excluded because they are also considered critical.",
			"  only_passing = ${157|true,false|}",
			"",
			"  // recursor_strategy",
			"  // if set to sequential, Consul will query recursors in the order listed in the recursors option.",
			"  // ff set to random, Consul will query an upstream DNS resolvers in a random order.",
			"  // defaults to sequential.",
			"  recursor_strategy = \"${158|sequential,random|}\"",
			"  // recursor_timeout",
			"  // timeout used by Consul when recursively querying an upstream DNS server.",
			"  // see recursors for more details.",
			"  // default is 2s.",
			"  // this is available in Consul 0.7 and later.",
			"  recursor_timeout  = \"${159:<recursor-timeout>}\"",
			"",
			"  // disable_compression",
			"  // if set to true, DNS responses will not be compressed.",
			"  // compression was added and enabled by default in Consul 0.7.",
			"  disable_compression = \"${160:<disable-compression>}\"",
			"",
			"  // udp_answer_limit",
			"  // limit the number of resource records contained in the answer section of a UDP-based DNS response.",
			"  // this parameter applies only to UDP DNS queries that are less than 512 bytes.",
			"  // this setting is deprecated and replaced in Consul 1.0.7 by a_record_limit.",
			"  udp_answer_limit = ${161:<udp-answer-limit>}",
			"",
			"  // a_record_limit",
			"  // limit the number of resource records contained in the answer section of a A, AAAA or ANY DNS response (both TCP and UDP).",
			"  // when answering a question, Consul will use the complete list of matching hosts, shuffle the list randomly, and then limit the number of answers to a_record_limit (default: no limit).",
			"  // this limit does not apply to SRV records.",
			"  // in environments where RFC 3484 Section 6 Rule 9 is implemented and enforced (i.e. DNS answers are always sorted and therefore never random),",
			"  // clients may need to set this value to 1 to preserve the expected randomized distribution behavior",
			"  // (note: RFC 3484 has been obsoleted by RFC 6724 and as a result it should be increasingly uncommon to need to change this value with modern resolvers).",
			"  a_record_limit = ${162:<a-record-limit>}",
			"",
			"  // enable_additional_node_meta_txt",
			"  // when set to true, Consul will add TXT records for Node metadata into the Additional section of the DNS responses for several query types such as SRV queries.",
			"  // when set to false those records are not emitted.",
			"  // this does not impact the behavior of those same TXT records when they would be added to the Answer section of the response like when querying with type TXT or ANY.",
			"  // this defaults to true.",
			"  enable_additional_node_meta_txt = ${163|true,false|}",
			"",
			"  soa {",
			"    // expire",
			"    // configure SOA Expire duration in seconds.",
			"    // default value is 86400, ie: 24 hours.",
			"    expire = ${164:<expire-in-seconds>}",
			"",
			"    // min_ttl",
			"    // configure SOA DNS minimum TTL.",
			"    // as explained in RFC-2308 this also controls negative cache TTL in most implementations.",
			"    // default value is 0, ie: no minimum delay or negative TTL.",
			"    min_ttl = ${165:<min-ttl-in-seconds>}",
			"",
			"    // refresh",
			"    // configure SOA Refresh duration in seconds.",
			"    // default value is 3600, ie: 1 hour.",
			"    refresh = ${166:<refresh-duration-in-seconds>}",
			"",
			"    // retry",
			"    // configures the Retry duration expressed in seconds.",
			"    // default value is 600, ie: 10 minutes.",
			"    retry = ${167:<retry-duration-in-seconds>}",
			"  }",
			"",
			"  // use_cache",
			"  // when set to true, DNS resolution will use the agent cache described in agent caching.",
			"  // this setting affects all service and prepared queries DNS requests.",
			"  // Implies 'allow_stale'.",
			"  use_cache     = ${168|true,false|}",
			"  // cache_max_age",
			"  // when use_cache is enabled, the agent will attempt to re-fetch the result from the servers if the cached value is older than this duration.",
			"  // see: agent caching.",
			"  cache_max_age = \"${169:<cache-max-age>}\"",
			"",
			"  // prefer_namespace",
			"  // ! enterprise feature !",
			"  // ! deprecated in Consul 1.11. use the canonical DNS format [https://www.consul.io/docs/discovery/dns#namespaced-partitioned-services] instead. !",
			"  // when set to true, in a DNS query for a service, the label between the domain and the service label will be treated as a namespace name instead of a datacenter.",
			"  // when set to false, the default, the behavior will be the same as non-Enterprise versions and will assume the label is the datacenter.",
			"  // see: https://www.consul.io/docs/discovery/dns#namespaced-services more details.",
			"  prefer_namespace = ${170|true,false|}",
			"}",
			"",
			"// domain",
			"// by default, Consul responds to DNS queries in the \"consul.\" domain.",
			"// this flag can be used to change that domain.",
			"// all queries in this domain are assumed to be handled by Consul and will not be recursively resolved.",
			"domain = \"${171:<domain-name>}\"",
			"",
			"// enable_acl_replication",
			"// ! deprecated in Consul 1.11. use the acl.enable_token_replication [https://www.consul.io/docs/agent/options#acl_enable_token_replication] field instead. !",
			"// when set on a Consul server, enables ACL replication without having to set the replication token via 'acl_replication_token'.",
			"// instead, enable ACL replication and then introduce the token using the agent token API on each server.",
			"// see 'acl_replication_token' [https://www.consul.io/docs/agent/options#acl_replication_token] for more details.",
			"// ! warning !",
			"// when enabling ACL token replication on the secondary datacenter, policies and roles already present in the secondary datacenter will be lost.",
			"// for production environments, consider configuring ACL replication in your initial datacenter bootstrapping process.",
			"enable_acl_replication = ${172|true,false|}",
			"",
			"// enable_agent_tls_for_checks",
			"// when set, uses a subset of the agent's TLS configuration (key_file, cert_file, ca_file, ca_path, and server_name) to set up the client for HTTP or gRPC health checks.",
			"// this allows services requiring 2-way TLS to be checked using the agent's credentials.",
			"// this was added in Consul 1.0.1 and defaults to false.",
			"enable_agent_tls_for_checks = ${173|true,false|}",
			"",
			"// enable_central_service_config",
			"// when set, the Consul agent will look for any centralized service configuration that match a registering service instance.",
			"// if it finds any, the agent will merge the centralized defaults with the service instance configuration.",
			"// this allows for things like service protocol or proxy configuration to be defined centrally and inherited by any affected service registrations.",
			"// this defaults to false in versions of Consul prior to 1.9.0, and defaults to true in Consul 1.9.0 and later.",
			"enable_central_service_config = ${174|true,false|}",
			"",
			"$0"
		],
		"description": "full consul configuration"
	},
	"consul configuration - common": {
		"prefix": ["consul-configuration-common"],
		"body": [
			"acl {",
			"  // acl system enabled",
			"  enabled = ${1|true,false|}",
			"",
			"  // down_policy",
			"  // in the case that a policy or token cannot be read from the primary_datacenter or leader node,",
			"  // the down policy is applied.",
			"  // in 'allow' mode, all actions are permitted, 'deny' restricts all operations, and 'extend-cache' allows any cached objects to be used,",
			"  // ignoring their TTL values.",
			"  // if a non-cached ACL is used, 'extend-cache' acts like 'deny'.",
			"  // the value 'async-cache' acts the same way as 'extend-cache' but performs updates asynchronously when ACL is present but its TTL is expired,",
			"  // thus, if latency is bad between the primary and secondary datacenters, latency of operations is not impacted.",
			"  // 'extend-cache' is the default.",
			"  down_policy = \"${2:<down-policy>}\" # (\"allow\"|\"deny\"|\"extend-cache\"|\"async-cache\")",
			"",
			"  // default_policy",
			"  // the default policy controls the behavior of a token when there is no matching rule.",
			"  // in 'allow' mode, ACLs are a denylist: any operation not specifically prohibited is allowed.",
			"  // in 'deny' mode, ACLs are an allowlist: any operation not specifically allowed is blocked.",
			"  // note: this will not take effect until you've enabled ACLs.",
			"  // defaults to 'allow' but this will be changed in a future major release.",
			"  default_policy = \"${3:<default-policy>}\" # (\"allow\"|\"deny\")",
			"",
			"  // enable_key_list_policy",
			"  // when true, the list permission will be required on the prefix being recursively read from the KV store.",
			"  // regardless of being enabled, the full set of KV entries under the prefix will be filtered to remove any entries",
			"  // that the request's ACL token does not grant at least read permissions.",
			"  // this option is only available in Consul 1.0 and newer.",
			"  // defaults to false.",
			"  enable_key_list_policy = ${4|true,false|}",
			"",
			"  tokens {",
			"    // agent token",
			"    // used for clients and servers to perform internal operations.",
			"    // if this isn't specified, then the default will be used.",
			"    // this token must at least have write access to the node name it will register as in order to set any of the node-level information in the catalog such as metadata,",
			"    // or the node's tagged addresses.",
			"    agent = \"${5:<agent-token>}\"",
			"  }",
			"}",
			"// advertise_addr",
			"advertise_addr = \"${6:<advertise-address>}\"",
			"",
			"// bootstrap_expect",
			"// this flag provides the number of expected servers in the datacenter.",
			"// either this value should not be provided or the value must agree with other servers in the cluster.",
			"// when provided, Consul waits until the specified number of servers are available and then bootstraps the cluster.",
			"// this allows an initial leader to be elected automatically.",
			"// this cannot be used in conjunction with the legacy -bootstrap flag.",
			"// this flag requires '-server' mode.",
			"bootstrap_expect = ${7:<number-of-expected-servers>}",
			"",
			"// bind_addr",
			"// the address that should be bound to for internal cluster communications.",
			"// this is an IP address that should be reachable by all other nodes in the cluster.",
			"// by default, this is \"0.0.0.0\", meaning Consul will bind to all addresses on the local machine",
			"// and will advertise the private IPv4 address to the rest of the cluster.",
			"// if there are multiple private IPv4 addresses available, Consul will exit with an error at startup.",
			"// if you specify \"[::]\", Consul will advertise the public IPv6 address.",
			"// if there are multiple public IPv6 addresses available, Consul will exit with an error at startup.",
			"// Consul uses both TCP and UDP and the same port for both.",
			"// if you have any firewalls, be sure to allow both protocols.",
			"// in Consul 1.1.0 and later this can be dynamically defined with a go-sockaddr template that must resolve at runtime to a single address.",
			"// some example templates:",
			"//   \"{{ GetPrivateInterfaces | include \"network\" \"10.0.0.0/8\" | attr \"address\" }}\"",
			"//   \"{{ GetInterfaceIP \"eth0\" }}\"",
			"//   \"{{ GetAllInterfaces | include \"name\" \"^eth\" | include \"flags\" \"forwardable|up\" | attr \"address\" }}\"",
			"bind_addr = \"${8:<address-for-internal-cluster-communications>}\"",
			"",
			"// check_update_interval",
			"// this interval controls how often check output from checks in a steady state is synchronized with the server.",
			"// by default, this is set to 5 minutes (\"5m\").",
			"// many checks which are in a steady state produce slightly different output per run (timestamps, etc) which cause constant writes.",
			"// this configuration allows deferring the sync of check output for a given interval to reduce write pressure.",
			"// if a check ever changes state, the new state and associated output is synchronized immediately.",
			"// to disable this behavior, set the value to \"0s\".",
			"check_update_interval = \"${9:0s}\"",
			"",
			"// client_addr",
			"// the address to which Consul will bind client interfaces, including the HTTP and DNS servers.",
			"// by default, this is \"127.0.0.1\", allowing only loopback connections.",
			"// in Consul 1.0 and later this can be set to a space-separated list of addresses to bind to, or a go-sockaddr template that can potentially resolve to multiple addresses.",
			"client_addr = [\"${10:<client-addr1>}\",\"${11:<client-addr2>}\",\"${12:<client-addrN>}\"]",
			"",
			"connect {",
			"  // enabled",
			"  // controls whether Connect features are enabled on this agent.",
			"  // should be enabled on all servers in the cluster in order for Connect to function properly.",
			"  // defaults to false.",
			"  enabled = ${13|true,false|}",
			"}",
			"",
			"// datacenter",
			"datacenter = \"${14:<datcenter-name>}\"",
			"",
			"// data_dir",
			"data_dir = \"${15:<path-to-data-dir>}\"",
			"$0"
		],
		"description": "common consul configuration"
	},
	"consul configuration 'acl' - empty": {
		"prefix": ["consul-configuration-acl-empty"],
		"body": [
			"acl {",
			"  $0",
			"}",
			""
		],
		"description": "consul empty 'acl' configuration"
	},
	"consul configuration 'acl' - full": {
		"prefix": ["consul-configuration-acl-full"],
		"body": [
			"acl {",
			"  // acl system enabled",
			"  enabled = ${1|true,false|}",
			"",
			"  // policy_ttl",
			"  // used to control Time-To-Live caching of ACL policies.",
			"  // by default, this is 30 seconds.",
			"  // this setting has a major performance impact: reducing it will cause more frequent refreshes",
			"  // while increasing it reduces the number of refreshes.",
			"  // however, because the caches are not actively invalidated, ACL policy may be stale up to the TTL value.",
			"  policy_ttl = \"${2:<ttl-value>}\"",
			"",
			"  // role_ttl",
			"  // used to control Time-To-Live caching of ACL roles.",
			"  // by default, this is 30 seconds.",
			"  // this setting has a major performance impact: reducing it will cause more frequent refreshes",
			"  // while increasing it reduces the number of refreshes. However, because the caches are not actively invalidated, ACL role may be stale up to the TTL value.",
			"  role_ttl = \"${3:<ttl-value>}\"",
			"",
			"  // token_ttl",
			"  // used to control Time-To-Live caching of ACL tokens.",
			"  // by default, this is 30 seconds.",
			"  // this setting has a major performance impact: reducing it will cause more frequent refreshes",
			"  // while increasing it reduces the number of refreshes.",
			"  // however, because the caches are not actively invalidated, ACL token may be stale up to the TTL value.",
			"  token_ttl = \"${4:<ttl-value>}\"",
			"",
			"  // down_policy",
			"  // in the case that a policy or token cannot be read from the primary_datacenter or leader node,",
			"  // the down policy is applied.",
			"  // in 'allow' mode, all actions are permitted, 'deny' restricts all operations, and 'extend-cache' allows any cached objects to be used,",
			"  // ignoring their TTL values.",
			"  // if a non-cached ACL is used, 'extend-cache' acts like 'deny'.",
			"  // the value 'async-cache' acts the same way as 'extend-cache' but performs updates asynchronously when ACL is present but its TTL is expired,",
			"  // thus, if latency is bad between the primary and secondary datacenters, latency of operations is not impacted.",
			"  // 'extend-cache' is the default.",
			"  down_policy = \"${5:<down-policy>}\" # (\"allow\"|\"deny\"|\"extend-cache\"|\"async-cache\")",
			"",
			"  // default_policy",
			"  // the default policy controls the behavior of a token when there is no matching rule.",
			"  // in 'allow' mode, ACLs are a denylist: any operation not specifically prohibited is allowed.",
			"  // in 'deny' mode, ACLs are an allowlist: any operation not specifically allowed is blocked.",
			"  // note: this will not take effect until you've enabled ACLs.",
			"  // defaults to 'allow' but this will be changed in a future major release.",
			"  default_policy = \"${6:<default-policy>}\" # (\"allow\"|\"deny\")",
			"",
			"  // enable_key_list_policy",
			"  // when true, the list permission will be required on the prefix being recursively read from the KV store.",
			"  // regardless of being enabled, the full set of KV entries under the prefix will be filtered to remove any entries",
			"  // that the request's ACL token does not grant at least read permissions.",
			"  // this option is only available in Consul 1.0 and newer.",
			"  // defaults to false.",
			"  enable_key_list_policy = ${7|true,false|}",
			"",
			"  // enable_token_replication",
			"  // by default secondary Consul datacenters will perform replication of only ACL policies and roles.",
			"  // setting this configuration will will enable ACL token replication and allow for the creation of both",
			"  // local tokens and auth methods in connected secondary datacenters.",
			"  // ! WARNING !",
			"  //   when enabling ACL token replication on the secondary datacenter, global tokens already present in the secondary datacenter will be lost.",
			"  //   for production environments, consider configuring ACL replication in your initial datacenter bootstrapping process.",
			"  enable_token_replication = ${8|true,false|}",
			"",
			"  // enable_token_persistence",
			"  // when true tokens set using the API will be persisted to disk and reloaded when an agent restarts.",
			"  enable_token_persistence = ${9|true,false|}",
			"",
			"  tokens {",
			"    // master token",
			"    // only used for servers in the primary_datacenter.",
			"    // this token will be created with management-level permissions if it does not exist.",
			"    // it allows operators to bootstrap the ACL system with a token secret id that is well-known.",
			"    // the master token is only installed when a server acquires cluster leadership.",
			"    // if you would like to install or change the 'acl_master_token', set the new value for master in the configuration for all servers.",
			"    // once this is done, restart the current leader to force a leader election.",
			"    // if the master token is not supplied, then the servers do not create a master token.",
			"    // when you provide a value, it should be a uuid.",
			"    // to maintain backwards compatibility and an upgrade path this restriction is not currently enforced but will be in a future major Consul release.",
			"    master = \"${10:<master-token>}\"",
			"",
			"    // default token",
			"    // when provided, the agent will use this token when making requests to the Consul servers.",
			"    // clients can override this token on a per-request basis by providing the '?token' query parameter.",
			"    // when not provided, the empty token, which maps to the 'anonymous' acl token, is used.",
			"    default = \"${11:<default-token>}\"",
			"",
			"    // agent token",
			"    // used for clients and servers to perform internal operations.",
			"    // if this isn't specified, then the default will be used.",
			"    agent = \"${12:<agent-token>}\"",
			"",
			"    // agent_master token",
			"    // used to access agent endpoints that require agent read or write privileges, or node read privileges,",
			"    // even if Consul servers aren't present to validate any tokens.",
			"    // this should only be used by operators during outages, regular acl tokens should normally be used by applications.",
			"    agent_master = \"${13:<agent-master-token>}\"",
			"",
			"    // replication token",
			"    // the acl token used to authorize secondary datacenters with the primary datacenter for replication operations.",
			"    // this token is required for servers outside the primary_datacenter when ACLs are enabled.",
			"    // this token may be provided later using the agent token API on each server.",
			"    // this token must have at least 'read' permissions on ACL data but if ACL token replication is enabled",
			"    // then it must have 'write' permissions.",
			"    // this also enables Connect replication, for which the token will require both operator 'write'",
			"    // and intention 'read' permissions for replicating ca and intention data.",
			"    // ! WARNING !",
			"    //   when enabling acl token replication on the secondary datacenter, policies and roles already present in the secondary datacenter will be lost.",
			"    //   for production environments, consider configuring acl replication in your initial datacenter bootstrapping process.",
			"    replication = \"${14:<replication-token>}\"",
			"",
			"    // managed_service_provider",
			"    // ! enterprise feature !",
			"    // an array of acl tokens used by Consul managed service providers for cluster operations.",
			"    managed_service_provider [",
			"      {",
			"        accessor_id = \"${15:<accessor-id>}\"",
			"        secret_id = \"${16:<secret-id>}\"",
			"      }",
			"    ]",
			"  }",
			"}",
			"$0"
		],
		"description": "consul full 'acl' configuration"
	},
	"consul configuration 'acl' - common": {
		"prefix": ["consul-configuration-acl-common"],
		"body": [
			"acl {",
			"  // acl system enabled",
			"  enabled = ${1|true,false|}",
			"",
			"  // down_policy",
			"  // in the case that a policy or token cannot be read from the primary_datacenter or leader node,",
			"  // the down policy is applied.",
			"  // in 'allow' mode, all actions are permitted, 'deny' restricts all operations, and 'extend-cache' allows any cached objects to be used,",
			"  // ignoring their TTL values.",
			"  // if a non-cached ACL is used, 'extend-cache' acts like 'deny'.",
			"  // the value 'async-cache' acts the same way as 'extend-cache' but performs updates asynchronously when ACL is present but its TTL is expired,",
			"  // thus, if latency is bad between the primary and secondary datacenters, latency of operations is not impacted.",
			"  // 'extend-cache' is the default.",
			"  down_policy = \"${2:<down-policy>}\" # (\"allow\"|\"deny\"|\"extend-cache\"|\"async-cache\")",
			"",
			"  // default_policy",
			"  // the default policy controls the behavior of a token when there is no matching rule.",
			"  // in 'allow' mode, ACLs are a denylist: any operation not specifically prohibited is allowed.",
			"  // in 'deny' mode, ACLs are an allowlist: any operation not specifically allowed is blocked.",
			"  // note: this will not take effect until you've enabled ACLs.",
			"  // defaults to 'allow' but this will be changed in a future major release.",
			"  default_policy = \"${3:<default-policy>}\" # (\"allow\"|\"deny\")",
			"",
			"  // enable_key_list_policy",
			"  // when true, the list permission will be required on the prefix being recursively read from the KV store.",
			"  // regardless of being enabled, the full set of KV entries under the prefix will be filtered to remove any entries",
			"  // that the request's ACL token does not grant at least read permissions.",
			"  // this option is only available in Consul 1.0 and newer.",
			"  // defaults to false.",
			"  enable_key_list_policy = ${4|true,false|}",
			"",
			"  tokens {",
			"    // agent token",
			"    // used for clients and servers to perform internal operations.",
			"    // if this isn't specified, then the default will be used.",
			"    // this token must at least have write access to the node name it will register as in order to set any of the node-level information in the catalog such as metadata,",
			"    // or the node's tagged addresses.",
			"    agent = \"${5:<agent-token>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "consul common 'acl' configuration"
	},
	"consul configuration 'acl' parameter 'enabled'": {
		"prefix": ["consul-configuration-acl-parameter-enabled"],
		"body": [
			"  // acl system enabled",
			"  enabled = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'enabled' parameter of configuration 'acl'"
	},
	"consul configuration 'acl' parameter 'policy_ttl'": {
		"prefix": ["consul-configuration-acl-parameter-policy-ttl"],
		"body": [
			"  // policy_ttl",
			"  // used to control Time-To-Live caching of ACL policies.",
			"  // by default, this is 30 seconds.",
			"  // this setting has a major performance impact: reducing it will cause more frequent refreshes",
			"  // while increasing it reduces the number of refreshes.",
			"  // however, because the caches are not actively invalidated, ACL policy may be stale up to the TTL value.",
			"  policy_ttl = \"${1:<ttl-value>}\"",
			"$0"
		],
		"description": "consul templated 'policy_ttl' parameter of configuration 'acl'"
	},
	"consul configuration 'acl' parameter 'role_ttl'": {
		"prefix": ["consul-configuration-acl-parameter-role-ttl"],
		"body": [
			"  // role_ttl",
			"  // used to control Time-To-Live caching of ACL roles.",
			"  // by default, this is 30 seconds.",
			"  // this setting has a major performance impact: reducing it will cause more frequent refreshes",
			"  // while increasing it reduces the number of refreshes. However, because the caches are not actively invalidated, ACL role may be stale up to the TTL value.",
			"  role_ttl = \"${1:<ttl-value>}\"",
			"$0"
		],
		"description": "consul templated 'role_ttl' parameter of configuration 'acl'"
	},
	"consul configuration 'acl' parameter 'token_ttl'": {
		"prefix": ["consul-configuration-acl-parameter-token-ttl"],
		"body": [
			"  // token_ttl",
			"  // used to control Time-To-Live caching of ACL tokens.",
			"  // by default, this is 30 seconds.",
			"  // this setting has a major performance impact: reducing it will cause more frequent refreshes",
			"  // while increasing it reduces the number of refreshes.",
			"  // however, because the caches are not actively invalidated, ACL token may be stale up to the TTL value.",
			"  token_ttl = \"${1:<ttl-value>}\"",
			"$0"
		],
		"description": "consul templated 'token_ttl' parameter of configuration 'acl'"
	},
	"consul configuration 'acl' parameter 'down_policy'": {
		"prefix": ["consul-configuration-acl-parameter-down-policy"],
		"body": [
			"  // down_policy",
			"  // in the case that a policy or token cannot be read from the primary_datacenter or leader node,",
			"  // the down policy is applied.",
			"  // in 'allow' mode, all actions are permitted, 'deny' restricts all operations, and 'extend-cache' allows any cached objects to be used,",
			"  // ignoring their TTL values.",
			"  // if a non-cached ACL is used, 'extend-cache' acts like 'deny'.",
			"  // the value 'async-cache' acts the same way as 'extend-cache' but performs updates asynchronously when ACL is present but its TTL is expired,",
			"  // thus, if latency is bad between the primary and secondary datacenters, latency of operations is not impacted.",
			"  // 'extend-cache' is the default.",
			"  down_policy = \"${1:<down-policy>}\" # (\"allow\"|\"deny\"|\"extend-cache\"|\"async-cache\")",
			"$0"
		],
		"description": "consul templated 'down_policy' parameter of configuration 'acl'"
	},
	"consul configuration 'acl' parameter 'default_policy'": {
		"prefix": ["consul-configuration-acl-parameter-default-policy"],
		"body": [
			"  // default_policy",
			"  // the default policy controls the behavior of a token when there is no matching rule.",
			"  // in 'allow' mode, ACLs are a denylist: any operation not specifically prohibited is allowed.",
			"  // in 'deny' mode, ACLs are an allowlist: any operation not specifically allowed is blocked.",
			"  // note: this will not take effect until you've enabled ACLs.",
			"  // defaults to 'allow' but this will be changed in a future major release.",
			"  default_policy = \"${1:<default-policy>}\" # (\"allow\"|\"deny\")",
			"$0"
		],
		"description": "consul templated 'default_policy' parameter of configuration 'acl'"
	},
	"consul configuration 'acl' parameter 'enable_key_list_policy'": {
		"prefix": ["consul-configuration-acl-parameter-enable-key-list-policy"],
		"body": [
			"  // enable_key_list_policy",
			"  // when true, the list permission will be required on the prefix being recursively read from the KV store.",
			"  // regardless of being enabled, the full set of KV entries under the prefix will be filtered to remove any entries",
			"  // that the request's ACL token does not grant at least read permissions.",
			"  // this option is only available in Consul 1.0 and newer.",
			"  // defaults to false.",
			"  enable_key_list_policy = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'enable_key_list_policy' parameter of configuration 'acl'"
	},
	"consul configuration 'acl' parameter 'enable_token_replication'": {
		"prefix": ["consul-configuration-acl-parameter-enable-token-replication"],
		"body": [
			"  // enable_token_replication",
			"  // by default secondary Consul datacenters will perform replication of only ACL policies and roles.",
			"  // setting this configuration will will enable ACL token replication and allow for the creation of both",
			"  // local tokens and auth methods in connected secondary datacenters.",
			"  // ! WARNING !",
			"  //   when enabling ACL token replication on the secondary datacenter, global tokens already present in the secondary datacenter will be lost.",
			"  //   for production environments, consider configuring ACL replication in your initial datacenter bootstrapping process.",
			"  enable_token_replication = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'enable_token_replication' parameter of configuration 'acl'"
	},
	"consul configuration 'acl' parameter 'enable_token_persistence'": {
		"prefix": ["consul-configuration-acl-parameter-enable-token-persistence"],
		"body": [
			"  // enable_token_persistence",
			"  // when true tokens set using the API will be persisted to disk and reloaded when an agent restarts.",
			"  enable_token_persistence = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'enable_token_persistence' parameter of configuration 'acl'"
	},
	"consul configuration 'acl' parameter 'tokens' - empty": {
		"prefix": ["consul-configuration-acl-parameter-tokens-empty"],
		"body": [
			"  tokens {",
			"    $0",
			"  }",
			""
		],
		"description": "consul empty 'tokens' parameter of configuration 'acl'"
	},
	"consul configuration 'acl' parameter 'tokens' - full": {
		"prefix": ["consul-configuration-acl-parameter-tokens-full"],
		"body": [
			"  tokens {",
			"    // master token",
			"    // only used for servers in the primary_datacenter.",
			"    // this token will be created with management-level permissions if it does not exist.",
			"    // it allows operators to bootstrap the ACL system with a token secret id that is well-known.",
			"    // the master token is only installed when a server acquires cluster leadership.",
			"    // if you would like to install or change the 'acl_master_token', set the new value for master in the configuration for all servers.",
			"    // once this is done, restart the current leader to force a leader election.",
			"    // if the master token is not supplied, then the servers do not create a master token.",
			"    // when you provide a value, it should be a uuid.",
			"    // to maintain backwards compatibility and an upgrade path this restriction is not currently enforced but will be in a future major Consul release.",
			"    master = \"${1:<master-token>}\"",
			"",
			"    // default token",
			"    // when provided, the agent will use this token when making requests to the Consul servers.",
			"    // clients can override this token on a per-request basis by providing the '?token' query parameter.",
			"    // when not provided, the empty token, which maps to the 'anonymous' acl token, is used.",
			"    default = \"${2:<default-token>}\"",
			"",
			"    // agent token",
			"    // used for clients and servers to perform internal operations.",
			"    // if this isn't specified, then the default will be used.",
			"    agent = \"${3:<agent-token>}\"",
			"",
			"    // agent_master token",
			"    // used to access agent endpoints that require agent read or write privileges, or node read privileges,",
			"    // even if Consul servers aren't present to validate any tokens.",
			"    // this should only be used by operators during outages, regular acl tokens should normally be used by applications.",
			"    agent_master = \"${4:<agent-master-token>}\"",
			"",
			"    // replication token",
			"    // the acl token used to authorize secondary datacenters with the primary datacenter for replication operations.",
			"    // this token is required for servers outside the primary_datacenter when ACLs are enabled.",
			"    // this token may be provided later using the agent token API on each server.",
			"    // this token must have at least 'read' permissions on ACL data but if ACL token replication is enabled",
			"    // then it must have 'write' permissions.",
			"    // this also enables Connect replication, for which the token will require both operator 'write'",
			"    // and intention 'read' permissions for replicating ca and intention data.",
			"    // ! WARNING !",
			"    //   when enabling acl token replication on the secondary datacenter, policies and roles already present in the secondary datacenter will be lost.",
			"    //   for production environments, consider configuring acl replication in your initial datacenter bootstrapping process.",
			"    replication = \"${5:<replication-token>}\"",
			"",
			"    // managed_service_provider",
			"    // ! enterprise feature !",
			"    // an array of acl tokens used by Consul managed service providers for cluster operations.",
			"    managed_service_provider [",
			"      {",
			"        accessor_id = \"${6:<accessor-id>}\"",
			"        secret_id = \"${7:<secret-id>}\"",
			"      }",
			"    ]",
			"  }",
			"$0",
		],
		"description": "consul full 'tokens' parameter of configuration 'acl'"
	},
	"consul configuration 'acl' parameter 'tokens' - common": {
		"prefix": ["consul-configuration-acl-parameter-tokens-common"],
		"body": [
			"  tokens {",
			"    // agent token",
			"    // used for clients and servers to perform internal operations.",
			"    // if this isn't specified, then the default will be used.",
			"    // this token must at least have write access to the node name it will register as in order to set any of the node-level information in the catalog such as metadata,",
			"    // or the node's tagged addresses.",
			"    agent = \"${1:<agent-token>}\"",
			"  }",
			"$0",
		],
		"description": "consul common 'tokens' parameter of configuration 'acl'"
	},
	"consul configuration 'acl' parameter 'tokens' parameter 'master'": {
		"prefix": ["consul-configuration-acl-parameter-tokens-parameter-master"],
		"body": [
			"    // master token",
			"    // only used for servers in the primary_datacenter.",
			"    // this token will be created with management-level permissions if it does not exist.",
			"    // it allows operators to bootstrap the ACL system with a token secret id that is well-known.",
			"    // the master token is only installed when a server acquires cluster leadership.",
			"    // if you would like to install or change the 'acl_master_token', set the new value for master in the configuration for all servers.",
			"    // once this is done, restart the current leader to force a leader election.",
			"    // if the master token is not supplied, then the servers do not create a master token.",
			"    // when you provide a value, it should be a uuid.",
			"    // to maintain backwards compatibility and an upgrade path this restriction is not currently enforced but will be in a future major Consul release.",
			"    master = \"${1:<master-token>}\"",
			"$0"
		],
		"description": "consul templated 'master' parameter of parameter 'tokens' of configuration 'acl'"
	},
	"consul configuration 'acl' parameter 'tokens' parameter 'default'": {
		"prefix": ["consul-configuration-acl-parameter-tokens-parameter-default"],
		"body": [
			"    // default token",
			"    // when provided, the agent will use this token when making requests to the Consul servers.",
			"    // clients can override this token on a per-request basis by providing the '?token' query parameter.",
			"    // when not provided, the empty token, which maps to the 'anonymous' acl token, is used.",
			"    default = \"${1:<default-token>}\"",
			"$0"
		],
		"description": "consul templated 'default' parameter of parameter 'tokens' of configuration 'acl'"
	},
	"consul configuration 'acl' parameter 'tokens' parameter 'agent'": {
		"prefix": ["consul-configuration-acl-parameter-tokens-parameter-agent"],
		"body": [
			"    // agent token",
			"    // used for clients and servers to perform internal operations.",
			"    // if this isn't specified, then the default will be used.",
			"    // this token must at least have write access to the node name it will register as in order to set any of the node-level information in the catalog such as metadata,",
			"    // or the node's tagged addresses.",
			"    agent = \"${1:<agent-token>}\"",
			"$0"
		],
		"description": "consul templated 'agent' parameter of parameter 'tokens' of configuration 'acl'"
	},
	"consul configuration 'acl' parameter 'tokens' parameter 'agent_master'": {
		"prefix": ["consul-configuration-acl-parameter-tokens-parameter-agent-master"],
		"body": [
			"    // agent_master token",
			"    // used to access agent endpoints that require agent read or write privileges, or node read privileges,",
			"    // even if Consul servers aren't present to validate any tokens.",
			"    // this should only be used by operators during outages, regular acl tokens should normally be used by applications.",
			"    agent_master = \"${1:<agent-master-token>}\"",
			"$0"
		],
		"description": "consul templated 'agent_master' parameter of parameter 'tokens' of configuration 'acl'"
	},
	"consul configuration 'acl' parameter 'tokens' parameter 'replication'": {
		"prefix": ["consul-configuration-acl-parameter-tokens-parameter-replication"],
		"body": [
			"    // replication token",
			"    // the acl token used to authorize secondary datacenters with the primary datacenter for replication operations.",
			"    // this token is required for servers outside the primary_datacenter when ACLs are enabled.",
			"    // this token may be provided later using the agent token API on each server.",
			"    // this token must have at least 'read' permissions on ACL data but if ACL token replication is enabled",
			"    // then it must have 'write' permissions.",
			"    // this also enables Connect replication, for which the token will require both operator 'write'",
			"    // and intention 'read' permissions for replicating ca and intention data.",
			"    // ! WARNING !",
			"    //   when enabling acl token replication on the secondary datacenter, policies and roles already present in the secondary datacenter will be lost.",
			"    //   for production environments, consider configuring acl replication in your initial datacenter bootstrapping process.",
			"    replication = \"${1:<replication-token>}\"",
			"$0"
		],
		"description": "consul templated 'replication' parameter of parameter 'tokens' of configuration 'acl'"
	},
	"consul configuration 'acl' parameter 'tokens' parameter 'managed_service_provider'": {
		"prefix": ["consul-configuration-acl-parameter-tokens-parameter-managed-service-provider"],
		"body": [
			"    // managed_service_provider",
			"    // ! enterprise feature !",
			"    // an array of acl tokens used by Consul managed service providers for cluster operations.",
			"    managed_service_provider [",
			"      {",
			"        accessor_id = \"${1:<accessor-id>}\"",
			"        secret_id = \"${2:<secret-id>}\"",
			"      }",
			"    ]",
			"$0"
		],
		"description": "consul templated 'managed_service_provider' parameter of parameter 'tokens' of configuration 'acl'"
	},
	"consul configuration 'addresses'": {
		"prefix": ["consul-configuration-addresses"],
		"body": [
			"// addresses",
			"addresses = \"${1:<addresses>}\"",
			"$0"
		],
		"description": "consul templated 'addresses' configuration "
	},
	"consul configuration 'advertise_addr'": {
		"prefix": ["consul-configuration-advertise-addr"],
		"body": [
			"// advertise_addr",
			"advertise_addr = \"${1:<advertise-address>}\"",
			"$0"
		],
		"description": "consul templated 'advertise_addr' configuration "
	},
	"consul configuration 'advertise_addr_ipv4'": {
		"prefix": ["consul-configuration-advertise-addr-ipv4"],
		"body": [
			"// advertise_addr_ipv4",
			"// this was added together with advertise_addr_ipv6 to support dual stack IPv4/IPv6 environments.",
			"// using this, both ipv4 and ipv6 addresses can be specified and requested during eg service discovery.",
			"advertise_addr_ipv4 = \"${1:<advertise-address-ipv4>}\"",
			"$0"
		],
		"description": "consul templated 'advertise_addr_ipv4' configuration "
	},
	"consul configuration 'advertise_addr_ipv6'": {
		"prefix": ["consul-configuration-advertise-addr-ipv6"],
		"body": [
			"// advertise_addr_ipv6",
			"// this was added together with advertise_addr_ipv6 to support dual stack IPv4/IPv6 environments.",
			"// using this, both ipv4 and ipv6 addresses can be specified and requested during eg service discovery.",
			"advertise_addr_ipv6 = \"${1:<advertise-address-ipv6>}\"",
			"$0"
		],
		"description": "consul templated 'advertise_addr_ipv6' configuration "
	},
	"consul configuration 'advertise_addr_wan'": {
		"prefix": ["consul-configuration-advertise-addr-wan"],
		"body": [
			"// advertise_addr_wan",
			"advertise_addr_wan = \"${1:<advertise-address-wan>}\"",
			"$0"
		],
		"description": "consul templated 'advertise_addr_wan' configuration "
	},
	"consul configuration 'advertise_addr_wan_ipv4'": {
		"prefix": ["consul-configuration-advertise-addr-wan-ipv4"],
		"body": [
			"// advertise_addr_wan_ipv4",
			"// this was added together with advertise_addr_wan_ipv6 to support dual stack IPv4/IPv6 environments.",
			"// using this, both IPv4 and IPv6 addresses can be specified and requested during eg service discovery.",
			"advertise_addr_wan_ipv4 = \"${1:<advertise-address-wan-ipv4>}\"",
			"$0"
		],
		"description": "consul templated 'advertise_addr_wan_ipv4' configuration "
	},
	"consul configuration 'advertise_addr_wan_ipv6'": {
		"prefix": ["consul-configuration-advertise-addr-wan-ipv6"],
		"body": [
			"// advertise_addr_wan_ipv6",
			"// this was added together with advertise_addr_wan_ipv6 to support dual stack IPv4/IPv6 environments.",
			"// using this, both IPv4 and IPv6 addresses can be specified and requested during eg service discovery.",
			"advertise_addr_wan_ipv6 = \"${1:<advertise-address-wan-ipv6>}\"",
			"$0"
		],
		"description": "consul templated 'advertise_addr_wan_ipv6' configuration "
	},
	"consul configuration 'advertise_reconnect_timeout'": {
		"prefix": ["consul-configuration-advertise-reconnect-timeout"],
		"body": [
			"// advertise_reconnect_timeout",
			"// this is a per-agent setting of the reconnect_timeout parameter.",
			"// this agent will advertise to all other nodes in the cluster that after this timeout,",
			"// the node may be completely removed from the cluster.",
			"// this may only be set on client agents and if unset then other nodes will use the main reconnect_timeout setting when determining when this node may be removed from the cluster.",
			"advertise_reconnect_timeout = \"${1:<advertise-reconnect-timeout>}\"",
			"$0"
		],
		"description": "consul templated 'advertise_reconnect_timeout' configuration "
	},
	"consul configuration 'serf_lan'": {
		"prefix": ["consul-configuration-serf-lan"],
		"body": [
			"// serf_lan",
			"// this is an ip address, not to be confused with ports.serf_lan.",
			"serf_lan = \"${1:<serf-lan>}\"",
			"$0"
		],
		"description": "consul templated 'serf_lan' configuration "
	},
	"consul configuration 'serf_lan_allowed_cidrs'": {
		"prefix": ["consul-configuration-serf-lan-allowed-cidrs"],
		"body": [
			"// serf_lan_allowed_cidrs",
			"serf_lan_allowed_cidrs = \"${1:<serf-lan-allowed-cidrs>}\"",
			"$0"
		],
		"description": "consul templated 'serf_lan_allowed_cidrs' configuration "
	},
	"consul configuration 'serf_wan'": {
		"prefix": ["consul-configuration-serf-wan"],
		"body": [
			"// serf_wan",
			"serf_wan = \"${1:<serf-wan>}\"",
			"$0"
		],
		"description": "consul templated 'serf_wan' configuration "
	},
	"consul configuration 'serf_wan_allowed_cidrs'": {
		"prefix": ["consul-configuration-serf-wan-allowed-cidrs"],
		"body": [
			"// serf_wan_allowed_cidrs",
			"serf_wan_allowed_cidrs = \"${1:<serf-wan-allowed-cidrs>}\"",
			"$0"
		],
		"description": "consul templated 'serf_wan_allowed_cidrs' configuration "
	},
	"consul configuration 'audit' - empty": {
		"prefix": ["consul-configuration-audit-empty"],
		"body": [
			"audit {",
			"  $0",
			"}",
			""
		],
		"description": "consul empty 'audit' configuration"
	},
	"consul configuration 'audit' - full": {
		"prefix": ["consul-configuration-audit-full"],
		"body": [
			"audit {",
			"  // audit enabled",
			"  // ! enterprise feature !",
			"  // controls whether Consul logs out each time a user performs an operation.",
			"  // acls must be enabled to use this feature.",
			"  // defaults to false.",
			"  enabled = ${1|true,false|}",
			"",
			"  sink \"${2:<sink-name>}\" {",
			"    // sink type file",
			"    type = \"${3:<sink-type>}\"",
			"",
			"    // specifies what format the events will be emitted with.",
			"    format = \"${4:<sink-type-format>}\"",
			"",
			"    // sink type file path",
			"    // the directory and filename to write audit events to.",
			"    path = \"${5:<sink-file-path>}\"",
			"",
			"    // sink delivery_guarantee",
			"    // specifies the rules governing how audit events are written.",
			"    delivery_guarantee = \"best-effort\"",
			"    // sink rotate_duration",
			"    // specifies the interval by which the system rotates to a new log file.",
			"    // at least one of 'rotate_duration' or 'rotate_bytes' must be configured to enable audit logging.",
			"    rotate_duration  = \"${6:<sink-rotate-duration>}\"",
			"    // sink rotate_max_files",
			"    // defines the limit that Consul should follow before it deletes old log files.",
			"    rotate_max_files = \"${7:<sink-rotate-max-files>}\"",
			"    // sink rotate_bytes",
			"    // specifies how large an individual log file can grow before Consul rotates to a new file.",
			"    // at least one of rotate_bytes or rotate_duration must be configured to enable audit logging.",
			"    rotate_bytes     = \"${8:<sink-rotate-bytes>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "consul full 'audit' configuration"
	},
	"consul configuration 'audit' - common": {
		"prefix": ["consul-configuration-audit-common"],
		"body": [
			"audit {",
			"  // audit enabled",
			"  // ! enterprise feature !",
			"  // controls whether Consul logs out each time a user performs an operation.",
			"  // acls must be enabled to use this feature.",
			"  // defaults to false.",
			"  enabled = false",
			"",
			"  sink \"${1:<sink-name>}\" {",
			"    // sink type file",
			"    type = \"${2:<sink-type>}\"",
			"",
			"    // specifies what format the events will be emitted with.",
			"    format = \"${3:<sink-type-format>}\"",
			"",
			"    // sink type file path",
			"    // the directory and filename to write audit events to.",
			"    path = \"${4:<sink-file-path>}\"",
			"",
			"    // sink delivery_guarantee",
			"    // specifies the rules governing how audit events are written.",
			"    delivery_guarantee = \"best-effort\"",
			"    // sink rotate_duration",
			"    // specifies the interval by which the system rotates to a new log file.",
			"    // at least one of 'rotate_duration' or 'rotate_bytes' must be configured to enable audit logging.",
			"    rotate_duration  = \"${5:<sink-rotate-duration>}\"",
			"    // sink rotate_max_files",
			"    // defines the limit that Consul should follow before it deletes old log files.",
			"    rotate_max_files = \"${6:<sink-rotate-max-files>}\"",
			"    // sink rotate_bytes",
			"    // specifies how large an individual log file can grow before Consul rotates to a new file.",
			"    // at least one of rotate_bytes or rotate_duration must be configured to enable audit logging.",
			"    rotate_bytes     = \"${7:<sink-rotate-bytes>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "consul common 'audit' configuration"
	},
	"consul configuration 'audit' parameter 'enabled'": {
		"prefix": ["consul-configuration-audit-parameter-enabled"],
		"body": [
			"  // audit enabled",
			"  // ! enterprise feature !",
			"  // controls whether Consul logs out each time a user performs an operation.",
			"  // acls must be enabled to use this feature.",
			"  // defaults to false.",
			"  enabled = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'enabled' parameter of configuration 'audit'"
	},
	"consul configuration 'audit' parameter 'sink' - empty": {
		"prefix": ["consul-configuration-audit-parameter-sink-empty"],
		"body": [
			"  sink \"${1:<sink-name>}\" {",
			"    $0",
			"  }",
			""
		],
		"description": "consul empty 'sink' parameter of configuration 'audit'"
	},
	"consul configuration 'audit' parameter 'sink' - full": {
		"prefix": ["consul-configuration-audit-parameter-sink-full"],
		"body": [
			"  sink \"${1:<sink-name>}\" {",
			"    // sink type file",
			"    type = \"${2:<sink-type>}\"",
			"",
			"    // specifies what format the events will be emitted with.",
			"    format = \"${3:<sink-type-format>}\"",
			"",
			"    // sink type file path",
			"    // the directory and filename to write audit events to.",
			"    path = \"${4:<sink-file-path>}\"",
			"",
			"    // sink delivery_guarantee",
			"    // specifies the rules governing how audit events are written.",
			"    delivery_guarantee = \"best-effort\"",
			"    // sink rotate_duration",
			"    // specifies the interval by which the system rotates to a new log file.",
			"    // at least one of 'rotate_duration' or 'rotate_bytes' must be configured to enable audit logging.",
			"    rotate_duration  = \"${5:<sink-rotate-duration>}\"",
			"    // sink rotate_max_files",
			"    // defines the limit that Consul should follow before it deletes old log files.",
			"    rotate_max_files = \"${6:<sink-rotate-max-files>}\"",
			"    // sink rotate_bytes",
			"    // specifies how large an individual log file can grow before Consul rotates to a new file.",
			"    // at least one of rotate_bytes or rotate_duration must be configured to enable audit logging.",
			"    rotate_bytes     = \"${7:<sink-rotate-bytes>}\"",
			"  }",
			"$0"
		],
		"description": "consul full 'sink' parameter of configuration 'audit'"
	},
	"consul configuration 'audit' parameter 'sink' - common": {
		"prefix": ["consul-configuration-audit-parameter-sink-common"],
		"body": [
			"  sink \"${1:<sink-name>}\" {",
			"    // sink type file",
			"    type = \"${2:<sink-type>}\"",
			"",
			"    // specifies what format the events will be emitted with.",
			"    format = \"${3:<sink-type-format>}\"",
			"",
			"    // sink type file path",
			"    // the directory and filename to write audit events to.",
			"    path = \"${4:<sink-file-path>}\"",
			"",
			"    // sink delivery_guarantee",
			"    // specifies the rules governing how audit events are written.",
			"    delivery_guarantee = \"best-effort\"",
			"    // sink rotate_duration",
			"    // specifies the interval by which the system rotates to a new log file.",
			"    // at least one of 'rotate_duration' or 'rotate_bytes' must be configured to enable audit logging.",
			"    rotate_duration  = \"${5:<sink-rotate-duration>}\"",
			"    // sink rotate_max_files",
			"    // defines the limit that Consul should follow before it deletes old log files.",
			"    rotate_max_files = \"${6:<sink-rotate-max-files>}\"",
			"    // sink rotate_bytes",
			"    // specifies how large an individual log file can grow before Consul rotates to a new file.",
			"    // at least one of rotate_bytes or rotate_duration must be configured to enable audit logging.",
			"    rotate_bytes     = \"${7:<sink-rotate-bytes>}\"",
			"  }",
			"$0"
		],
		"description": "consul common 'sink' parameter of configuration 'audit'"
	},
	"consul configuration 'audit' parameter 'sink' type 'file'": {
		"prefix": ["consul-configuration-audit-parameter-sink-type-file"],
		"body": [
			"    // sink type file",
			"    type = \"file\"",
			"$0"
		],
		"description": "consul 'file' type of parameter 'sink' of configuration 'audit'"
	},
	"consul configuration 'audit' parameter 'sink' type 'file' format 'json'": {
		"prefix": ["consul-configuration-audit-parameter-sink-type-file-format-json"],
		"body": [
			"    // sink type file format json",
			"    // specifies what format the events will be emitted with.",
			"    format = \"json\"",
			"$0"
		],
		"description": "consul 'json' format of type 'file' of parameter 'sink' of configuration 'audit'"
	},
	"consul configuration 'audit' parameter 'sink' type 'file' parameter 'path'": {
		"prefix": ["consul-configuration-audit-parameter-sink-type-file-parameter-path"],
		"body": [
			"    // sink type file path",
			"    // the directory and filename to write audit events to.",
			"    path = \"${1:<sink-file-path>}\"",
			"$0"
		],
		"description": "consul templated 'path' parameter of type 'file' of parameter 'sink' of configuration 'audit'"
	},
	"consul configuration 'audit' parameter 'sink' parameter 'delivery_guarantee'": {
		"prefix": ["consul-configuration-audit-parameter-sink-parameter-delivery_guarantee"],
		"body": [
			"    // sink delivery_guarantee",
			"    // specifies the rules governing how audit events are written.",
			"    delivery_guarantee = \"best-effort\"",
			"$0"
		],
		"description": "consul 'delivery_guarantee' parameter of parameter 'sink' of configuration 'audit'"
	},
	"consul configuration 'audit' parameter 'sink' parameter 'rotate_duration'": {
		"prefix": ["consul-configuration-audit-parameter-sink-parameter-rotate-duration"],
		"body": [
			"    // sink rotate_duration",
			"    // specifies the interval by which the system rotates to a new log file.",
			"    // at least one of 'rotate_duration' or 'rotate_bytes' must be configured to enable audit logging.",
			"    rotate_duration = \"${1:<sink-rotate-duration>}\"",
			"$0"
		],
		"description": "consul templated 'rotate_duration' parameter of parameter 'sink' of configuration 'audit'"
	},
	"consul configuration 'audit' parameter 'sink' parameter 'rotate_max_files'": {
		"prefix": ["consul-configuration-audit-parameter-sink-parameter-rotate-max-files"],
		"body": [
			"    // sink rotate_max_files",
			"    // defines the limit that Consul should follow before it deletes old log files.",
			"    rotate_max_files = \"${1:<sink-rotate-max-files>}\"",
			"$0"
		],
		"description": "consul templated 'rotate_max_files' parameter of parameter 'sink' of configuration 'audit'"
	},
	"consul configuration 'audit' parameter 'sink' parameter 'rotate_bytes'": {
		"prefix": ["consul-configuration-audit-parameter-sink-parameter-rotate-bytes"],
		"body": [
			"    // sink rotate_bytes",
			"    // specifies how large an individual log file can grow before Consul rotates to a new file.",
			"    // at least one of rotate_bytes or rotate_duration must be configured to enable audit logging.",
			"    rotate_bytes = \"${1:<sink-rotate-bytes>}\"",
			"$0"
		],
		"description": "consul templated 'rotate_bytes' parameter of parameter 'sink' of configuration 'audit'"
	},
	"consul configuration 'autopilot' - empty": {
		"prefix": ["consul-configuration-autopilot-empty"],
		"body": [
			"// when these keys are provided as configuration, they will only be respected on bootstrapping.",
			"// if they are not provided, the defaults will be used.",
			"// in order to change the value of these options after bootstrapping, you will need to use the Consul Operator Autopilot command.",
			"autopilot {",
			"  $0",
			"}",
			""
		],
		"description": "consul empty 'autopilot' configuration"
	},
	"consul configuration 'autopilot' - full": {
		"prefix": ["consul-configuration-autopilot-full"],
		"body": [
			"// when these keys are provided as configuration, they will only be respected on bootstrapping.",
			"// if they are not provided, the defaults will be used.",
			"// in order to change the value of these options after bootstrapping, you will need to use the Consul Operator Autopilot command.",
			"autopilot {",
			"  // cleanup_dead_servers",
			"  // this controls the automatic removal of dead server nodes periodically and whenever a new server is added to the cluster.",
			"  // defaults to true.",
			"  cleanup_dead_servers = ${1|true,false|}",
			"",
			"  // last_contact_threshold",
			"  // controls the maximum amount of time a server can go without contact from the leader before being considered unhealthy.",
			"  // must be a duration value such as 10s.",
			"  // defaults to 200ms.",
			"  last_contact_threshold = \"${2:<last-contact-threshold>}\"",
			"",
			"  // max_trailing_logs",
			"  // controls the maximum number of log entries that a server can trail the leader by before being considered unhealthy.",
			"  // defaults to 250.",
			"  max_trailing_logs = ${3:<max-trailing-logs>}",
			"",
			"  // min_quorum",
			"  // sets the minimum number of servers necessary in a cluster before autopilot can prune dead servers.",
			"  // there is no default.",
			"  min_quorum = ${4:<min-quorum>}",
			"",
			"  // server_stabilization_time",
			"  // controls the minimum amount of time a server must be stable in the 'healthy' state before being added to the cluster.",
			"  // only takes effect if all servers are running Raft protocol version 3 or higher.",
			"  // must be a duration value such as 30s.",
			"  // defaults to 10s.",
			"  server_stabilization_time = \"${5:<server-stabilization-time>}\"",
			"",
			"  // redundancy_zone_tag",
			"  // ! enterprise feature !",
			"  // this controls the '-node-meta' key to use when autopilot is separating servers into zones for redundancy.",
			"  // only one server in each zone can be a voting member at one time.",
			"  // if left blank (the default), this feature will be disabled.",
			"  redundancy_zone_tag = \"${6:<redundancy-zone-tag>}\"",
			"",
			"  // disable_upgrade_migration",
			"  // ! enterprise feature !",
			"  // if set to true, this setting will disable autopilot's upgrade migration strategy in Consul Enterprise",
			"  // of waiting until enough newer-versioned servers have been added to the cluster before promoting any of them to voters.",
			"  // defaults to false.",
			"  disable_upgrade_migration = ${7|true,false|}",
			"",
			"  // upgrade_version_tag",
			"  // ! enterprise feature !",
			"  // the 'node_meta' tag to use for version info when performing upgrade migrations.",
			"  // ff this is not set, the Consul version will be used.",
			"  upgrade_version_tag = \"${8:<upgrade-version-tag>}\"",
			"}",
			"$0"
		],
		"description": "consul full 'autopilot' configuration"
	},
	"consul configuration 'autopilot' - common": {
		"prefix": ["consul-configuration-autopilot-common"],
		"body": [
			"// when these keys are provided as configuration, they will only be respected on bootstrapping.",
			"// if they are not provided, the defaults will be used.",
			"// in order to change the value of these options after bootstrapping, you will need to use the Consul Operator Autopilot command.",
			"autopilot {",
			"  // cleanup_dead_servers",
			"  // this controls the automatic removal of dead server nodes periodically and whenever a new server is added to the cluster.",
			"  // defaults to true.",
			"  cleanup_dead_servers = ${1|true,false|}",
			"",
			"  // last_contact_threshold",
			"  // controls the maximum amount of time a server can go without contact from the leader before being considered unhealthy.",
			"  // must be a duration value such as 10s.",
			"  // defaults to 200ms.",
			"  last_contact_threshold = \"${2:<last-contact-threshold>}\"",
			"",
			"  // max_trailing_logs",
			"  // controls the maximum number of log entries that a server can trail the leader by before being considered unhealthy.",
			"  // defaults to 250.",
			"  max_trailing_logs = ${3:<max-trailing-logs>}",
			"",
			"  // server_stabilization_time",
			"  // controls the minimum amount of time a server must be stable in the 'healthy' state before being added to the cluster.",
			"  // only takes effect if all servers are running Raft protocol version 3 or higher.",
			"  // must be a duration value such as 30s.",
			"  // defaults to 10s.",
			"  server_stabilization_time = \"${5:<server-stabilization-time>}\"",
			"",
			"  // redundancy_zone_tag",
			"  // ! enterprise feature !",
			"  // this controls the '-node-meta' key to use when autopilot is separating servers into zones for redundancy.",
			"  // only one server in each zone can be a voting member at one time.",
			"  // if left blank (the default), this feature will be disabled.",
			"  redundancy_zone_tag = \"${6:<redundancy-zone-tag>}\"",
			"",
			"  // disable_upgrade_migration",
			"  // ! enterprise feature !",
			"  // if set to true, this setting will disable autopilot's upgrade migration strategy in Consul Enterprise",
			"  // of waiting until enough newer-versioned servers have been added to the cluster before promoting any of them to voters.",
			"  // defaults to false.",
			"  disable_upgrade_migration = ${7|true,false|}",
			"",
			"  // upgrade_version_tag",
			"  // ! enterprise feature !",
			"  // the 'node_meta' tag to use for version info when performing upgrade migrations.",
			"  // ff this is not set, the Consul version will be used.",
			"  upgrade_version_tag = \"${8:<upgrade-version-tag>}\"",
			"}",
			"$0"
		],
		"description": "consul common 'autopilot' configuration"
	},
	"consul configuration 'autopilot' parameter 'cleanup_dead_servers'": {
		"prefix": ["consul-configuration-autopilot-parameter-cleanup-dead-servers"],
		"body": [
			"  // cleanup_dead_servers",
			"  // this controls the automatic removal of dead server nodes periodically and whenever a new server is added to the cluster.",
			"  // defaults to true.",
			"  cleanup_dead_servers = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'cleanup_dead_servers' parameter of configuration 'autopilot'"
	},
	"consul configuration 'autopilot' parameter 'last_contact_threshold'": {
		"prefix": ["consul-configuration-autopilot-parameter-last-contact-threshold"],
		"body": [
			"  // last_contact_threshold",
			"  // controls the maximum amount of time a server can go without contact from the leader before being considered unhealthy.",
			"  // must be a duration value such as 10s.",
			"  // defaults to 200ms.",
			"  last_contact_threshold = \"${1:<last-contact-threshold>}\"",
			"$0"
		],
		"description": "consul templated 'last_contact_threshold' parameter of configuration 'autopilot'"
	},
	"consul configuration 'autopilot' parameter 'max_trailing_logs'": {
		"prefix": ["consul-configuration-autopilot-parameter-max-trailing-logs"],
		"body": [
			"  // max_trailing_logs",
			"  // controls the maximum number of log entries that a server can trail the leader by before being considered unhealthy.",
			"  // defaults to 250.",
			"  max_trailing_logs = ${1:<max-trailing-logs>}",
			"$0"
		],
		"description": "consul templated 'max_trailing_logs' parameter of configuration 'autopilot'"
	},
	"consul configuration 'autopilot' parameter 'min_quorum'": {
		"prefix": ["consul-configuration-autopilot-parameter-min-quorum"],
		"body": [
			"  // min_quorum",
			"  // sets the minimum number of servers necessary in a cluster before autopilot can prune dead servers.",
			"  // there is no default.",
			"  min_quorum = ${1:<min-quorum>}",
			"$0"
		],
		"description": "consul templated 'min_quorum' parameter of configuration 'autopilot'"
	},
	"consul configuration 'autopilot' parameter 'server_stabilization_time'": {
		"prefix": ["consul-configuration-autopilot-parameter-server-stabilization-time"],
		"body": [
			"  // server_stabilization_time",
			"  // controls the minimum amount of time a server must be stable in the 'healthy' state before being added to the cluster.",
			"  // only takes effect if all servers are running Raft protocol version 3 or higher.",
			"  // must be a duration value such as 30s.",
			"  // defaults to 10s.",
			"  server_stabilization_time = \"${1:<server-stabilization-time>}\"",
			"$0"
		],
		"description": "consul templated 'server_stabilization_time' parameter of configuration 'autopilot'"
	},
	"consul configuration 'autopilot' parameter 'redundancy_zone_tag'": {
		"prefix": ["consul-configuration-autopilot-parameter-redundancy-zone-tag"],
		"body": [
			"  // redundancy_zone_tag",
			"  // ! enterprise feature !",
			"  // this controls the '-node-meta' key to use when autopilot is separating servers into zones for redundancy.",
			"  // only one server in each zone can be a voting member at one time.",
			"  // if left blank (the default), this feature will be disabled.",
			"  redundancy_zone_tag = \"${1:<redundancy-zone-tag>}\"",
			"$0"
		],
		"description": "consul templated 'redundancy_zone_tag' parameter of configuration 'autopilot'"
	},
	"consul configuration 'autopilot' parameter 'disable_upgrade_migration'": {
		"prefix": ["consul-configuration-autopilot-parameter-disable-upgrade-migration"],
		"body": [
			"  // disable_upgrade_migration",
			"  // ! enterprise feature !",
			"  // if set to true, this setting will disable autopilot's upgrade migration strategy in Consul Enterprise",
			"  // of waiting until enough newer-versioned servers have been added to the cluster before promoting any of them to voters.",
			"  // defaults to false.",
			"  disable_upgrade_migration = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'disable_upgrade_migration' parameter of configuration 'autopilot'"
	},
	"consul configuration 'autopilot' parameter 'upgrade_version_tag'": {
		"prefix": ["consul-configuration-autopilot-parameter-upgrade-version-tag"],
		"body": [
			"  // upgrade_version_tag",
			"  // ! enterprise feature !",
			"  // the 'node_meta' tag to use for version info when performing upgrade migrations.",
			"  // ff this is not set, the Consul version will be used.",
			"  upgrade_version_tag = \"${1:<upgrade-version-tag>}\"",
			"$0"
		],
		"description": "consul templated 'upgrade_version_tag' parameter of configuration 'autopilot'"
	},
	"consul configuration 'auto_config' - empty": {
		"prefix": ["consul-configuration-auto-config-empty"],
		"body": [
			"auto_config {",
			"  $0",
			"}",
			""
		],
		"description": "consul empty 'auto_config' configuration"
	},
	"consul configuration 'auto_config' - full": {
		"prefix": ["consul-configuration-auto-config-full"],
		"body": [
			"auto_config {",
			"  // enabled",
			"  // this option enables auto_config on a client agent.",
			"  // when starting up but before joining the cluster, the client agent will make an RPC to the configured server addresses",
			"  // to request configuration settings, such as its agent ACL token, TLS certificates, Gossip encryption key as well as other configuration settings.",
			"  // these configurations get merged in as defaults with any user-supplied configuration on the client agent able to override them.",
			"  // the initial RPC uses a JWT specified with either intro_token, intro_token_file or the CONSUL_INTRO_TOKEN environment variable to authorize the request.",
			"  // how the JWT token is verified is controlled by the auto_config.authorizer object available for use on Consul servers.",
			"  // enabling this option also turns on Connect because it is vital for 'auto_config', more specifically the CA and certificates infrastructure.",
			"  // ! WARNING !",
			"  //   enabling 'auto_config' conflicts with the 'auto_encrypt.tls' feature.",
			"  //   only one option may be specified.",
			"  enabled = ${1|true,false|}",
			"",
			"  // intro_token",
			"  // this specifies the JWT to use for the initial auto_config RPC to the Consul servers.",
			"  // this can be overridden with the CONSUL_INTRO_TOKEN environment variable.",
			"  // defaults to \"\".",
			"  intro_token      = \"${2:<auto-config-intro-token>}\"",
			"  // intro_token_file",
			"  // this specifies a file containing the JWT to use for the initial auto_config RPC to the Consul servers.",
			"  // this token from this file is only loaded if the 'intro_token' configuration is unset as well as the CONSUL_INTRO_TOKEN environment variable.",
			"  // defaults to \"\".",
			"  intro_token_file = \"${3:<path-to-intro-token-file>}\"",
			"",
			"  // server_addresses",
			"  // this specifies the addresses of servers in the local datacenter to use for the initial rpc.",
			"  // these addresses support Cloud Auto-Joining and can optionally include a port to use when making the outbound connection.",
			"  // if not port is provided the server_port will be used.",
			"  // defaults to [].",
			"  server_addresses = [\"${4:<server1>}\",\"${5:<server2>}\",\"${6:<serverN>}\"]",
			"",
			"  // dns_sans",
			"  // this is a list of extra DNS SANs to request in the client agent's TLS certificate.",
			"  // the localhost DNS SAN is always requested.",
			"  // defaults to [].",
			"  dns_sans = [\"${7:<dns-san1>}\",\"${8:<dns-san2>}\",\"${9:<dns-sanN>}\"]",
			"",
			"  // ip_sans",
			"  // this is a list of extra IP SANs to request in the client agent's TLS certificate.",
			"  // the ::1 and 127.0.0.1 IP SANs are always requested.",
			"  // defaults to [].",
			"  ip_sans = [\"${10:<ip-san1>}\",\"${11:<ip-san2>}\",\"${12:<ip-sanN>}\"]",
			"",
			"  authorization {",
			"    // enabled",
			"    enabled = ${13|true,false|}",
			"",
			"    static {",
			"      // jwt_validation_pub_keys",
			"      // a list of PEM-encoded public keys to use to authenticate signatures locally.",
			"      // defaults to []",
			"      // note:",
			"      //   exactly one of jwks_url jwt_validation_pub_keys, or oidc_discovery_url is required.",
			"      jwt_validation_pub_keys = [\"${14:<path-to-public-key1>}\",\"${15:<path-to-public-key2>}\",\"${16:<path-to-public-keyN>}\"]",
			"",
			"      // oidc_discovery_url",
			"      // the OIDC Discovery URL, without any .well-known component (base path).",
			"      // defaults to \"\"",
			"      // note:",
			"      //   exactly one of jwks_url jwt_validation_pub_keys, or oidc_discovery_url is required.",
			"      oidc_discovery_url     = \"${17:<oidc-discovery-url>}\"",
			"      // oidc_discovery_ca_cert",
			"      // PEM encoded CA cert for use by the TLS client used to talk with the OIDC Discovery URL.",
			"      // defaults to \"\"",
			"      // note:",
			"      //   every line must end with a newline (\\n). If not set, system certificates are used.",
			"      oidc_discovery_ca_cert = \"${18:<path-to-oidc-discovery-ca-cert>}\"",
			"",
			"      // jwks_url",
			"      // the JWKS URL to use to authenticate signatures.",
			"      // defaults to \"\"",
			"      // note:",
			"      //   exactly one of jwks_url jwt_validation_pub_keys, or oidc_discovery_url is required.",
			"      jwks_url     = \"${19:<jwks-url>}\"",
			"      // jwks_ca_cert",
			"      // PEM encoded CA cert for use by the TLS client used to talk with the JWKS URL.",
			"      // defaults to \"\"",
			"      // note:",
			"      //   every line must end with a newline (\\n). If not set, system certificates are used.",
			"      jwks_ca_cert = \"${20:<path-to-jwks-ca-cert>}\"",
			"",
			"      // claim_mappings",
			"      // mappings of claims (key) that will be copied to a metadata field (value).",
			"      // use this if the claim you are capturing is singular (such as an attribute).",
			"      // when mapped, the values can be any of a number, string, or boolean and will all be stringified when returned.",
			"      // defaults to (map[string]string",
			"      claim_mappings {",
			"        \"${21:<your-claim-key1}\" = \"${22:<your-claim-value1}\"",
			"        \"${23:<your-claim-key2}\" = \"${24:<your-claim-value2}\"",
			"        \"${25:<your-claim-keyN}\" = \"${26:<your-claim-valueN}\"",
			"      }",
			"      // list_claim_mappings",
			"      // mappings of claims (key) will be copied to a metadata field (value).",
			"      // use this if the claim you are capturing is list-like (such as groups).",
			"      // when mapped, the values in each list can be any of a number, string, or boolean and will all be stringified when returned.",
			"      // defaults to (map[string]string",
			"      list_claim_mappings {",
			"        \"${27:<your-claim1}\" = \"${28:<your-metadata1}\"",
			"        \"${29:<your-claim2}\" = \"${30:<your-metadata2}\"",
			"        \"${31:<your-claimN}\" = \"${32:<your-metadataN}\"",
			"      }",
			"",
			"      // jwt_supported_algs",
			"      // JWTSupportedAlgs is a list of supported signing algorithms.",
			"      // defaults to [\"RS256\"]",
			"      jwt_supported_algs = [\"${33:<signing-algorythm1>}\",\"${34:<signing-algorythm2>}\",\"${35:<signing-algorythmN>}\"]",
			"",
			"      // bound_audiences",
			"      // list of aud claims that are valid for login; any match is sufficient.",
			"      // defaults to []",
			"      bound_audiences = [\"${36:<aud-claim1>}\",\"${37:<aud-claim2>}\",\"${38:<aud-claimN>}\"]",
			"      // bound_issuer",
			"      // the value against which to match the iss claim in a JWT.",
			"      // defaults to \"\"",
			"      bound_issuer = \"${39:<iss-claim>}\"",
			"",
			"      // expiration_leeway",
			"      // duration of leeway when validating expiration of a token to account for clock skew.",
			"      // defaults to 150s (2.5 minutes) if set to 0s and can be disabled if set to -1ns.",
			"      // defaults to \"0s\"",
			"      expiration_leeway = \"${40:<expiration-leeway>}\"",
			"      // expiration_leeway",
			"      // duration of leeway when validating not before values of a token to account for clock skew.",
			"      // defaults to 150s (2.5 minutes) if set to 0s and can be disabled if set to -1.",
			"      // defaults to \"0s\"",
			"      not_before_leeway = \"${41:<not-before-leeway>}\"",
			"      // clock_skew_leeway",
			"      // duration of leeway when validating all claims to account for clock skew.",
			"      // defaults to 60s (1 minute) if set to 0s and can be disabled if set to -1ns.",
			"      // defaults to \"0s\"",
			"      clock_skew_leeway = \"${42:<clock-skew-leeway>}\"",
			"",
			"      // claim_assertions",
			"      // list of assertions about the mapped claims required to authorize the incoming RPC request.",
			"      // the syntax uses github.com/hashicorp/go-bexpr which is shared with the API filtering feature.",
			"      // for example, the following configurations when combined will ensure that the JWT sub matches the node name requested by the client.",
			"      // defaults to []",
			"      claim_assertions = [",
			"        \"value.node_name == \\\"\\${node}\\\"\"",
			"      ]",
			"    }",
			"  }",
			"}",
			"$0"
		],
		"description": "consul full 'auto_config' configuration"
	},
	"consul configuration 'auto_config' - common": {
		"prefix": ["consul-configuration-auto-config-common"],
		"body": [
			"auto_config {",
			"  // enabled",
			"  // this option enables auto_config on a client agent.",
			"  // when starting up but before joining the cluster, the client agent will make an RPC to the configured server addresses",
			"  // to request configuration settings, such as its agent ACL token, TLS certificates, Gossip encryption key as well as other configuration settings.",
			"  // these configurations get merged in as defaults with any user-supplied configuration on the client agent able to override them.",
			"  // the initial RPC uses a JWT specified with either intro_token, intro_token_file or the CONSUL_INTRO_TOKEN environment variable to authorize the request.",
			"  // how the JWT token is verified is controlled by the auto_config.authorizer object available for use on Consul servers.",
			"  // enabling this option also turns on Connect because it is vital for 'auto_config', more specifically the CA and certificates infrastructure.",
			"  // ! WARNING !",
			"  //   enabling 'auto_config' conflicts with the 'auto_encrypt.tls' feature.",
			"  //   only one option may be specified.",
			"  enabled = ${1|true,false|}",
			"}",
			"$0"
		],
		"description": "consul common 'auto_config' configuration"
	},
	"consul configuration 'auto_config' parameter 'enabled'": {
		"prefix": ["consul-configuration-auto-config-parameter-enabled"],
		"body": [
			"  // enabled",
			"  // this option enables auto_config on a client agent.",
			"  // when starting up but before joining the cluster, the client agent will make an RPC to the configured server addresses",
			"  // to request configuration settings, such as its agent ACL token, TLS certificates, Gossip encryption key as well as other configuration settings.",
			"  // these configurations get merged in as defaults with any user-supplied configuration on the client agent able to override them.",
			"  // the initial RPC uses a JWT specified with either intro_token, intro_token_file or the CONSUL_INTRO_TOKEN environment variable to authorize the request.",
			"  // how the JWT token is verified is controlled by the auto_config.authorizer object available for use on Consul servers.",
			"  // enabling this option also turns on Connect because it is vital for 'auto_config', more specifically the CA and certificates infrastructure.",
			"  // ! WARNING !",
			"  //   enabling 'auto_config' conflicts with the 'auto_encrypt.tls' feature.",
			"  //   only one option may be specified.",
			"  enabled = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'auto_config' parameter of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'intro_token'": {
		"prefix": ["consul-configuration-auto-config-parameter-intro-token"],
		"body": [
			"  // intro_token",
			"  // this specifies the JWT to use for the initial auto_config RPC to the Consul servers.",
			"  // this can be overridden with the CONSUL_INTRO_TOKEN environment variable.",
			"  // defaults to \"\".",
			"  intro_token = \"${1:<intro-token>}\"",
			"$0"
		],
		"description": "consul templated 'intro_token' parameter of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'intro_token_file'": {
		"prefix": ["consul-configuration-auto-config-parameter-intro-token-file"],
		"body": [
			"  // intro_token_file",
			"  // this specifies a file containing the JWT to use for the initial auto_config RPC to the Consul servers.",
			"  // this token from this file is only loaded if the 'intro_token' configuration is unset as well as the CONSUL_INTRO_TOKEN environment variable.",
			"  // defaults to \"\".",
			"  intro_token_file = \"${1:<path-to-intro-token-file>}\"",
			"$0"
		],
		"description": "consul templated 'intro_token_file' parameter of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'server_addresses'": {
		"prefix": ["consul-configuration-auto-config-parameter-server-addresses"],
		"body": [
			"  // server_addresses",
			"  // this specifies the addresses of servers in the local datacenter to use for the initial rpc.",
			"  // these addresses support Cloud Auto-Joining and can optionally include a port to use when making the outbound connection.",
			"  // if not port is provided the server_port will be used.",
			"  // defaults to [].",
			"  server_addresses = [\"${1:<server1>}\",\"${2:<server2>}\",\"${3:<serverN>}\"]",
			"$0"
		],
		"description": "consul templated 'server_addresses' parameter of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'dns_sans'": {
		"prefix": ["consul-configuration-auto-config-parameter-dns-sans"],
		"body": [
			"  // dns_sans",
			"  // this is a list of extra DNS SANs to request in the client agent's TLS certificate.",
			"  // the localhost DNS SAN is always requested.",
			"  // defaults to [].",
			"  dns_sans = [\"${1:<dns-san1>}\",\"${2:<dns-san2>}\",\"${3:<dns-sanN>}\"]",
			"$0"
		],
		"description": "consul templated 'dns_sans' parameter of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'ip_sans'": {
		"prefix": ["consul-configuration-auto-config-parameter-ip-sans"],
		"body": [
			"  // ip_sans",
			"  // this is a list of extra IP SANs to request in the client agent's TLS certificate.",
			"  // the ::1 and 127.0.0.1 IP SANs are always requested.",
			"  // defaults to [].",
			"  ip_sans = [\"${1:<ip-san1>}\",\"${2:<ip-san2>}\",\"${3:<ip-sanN>}\"]",
			"$0"
		],
		"description": "consul templated 'ip_sans' parameter of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' - empty": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-empty"],
		"body": [
			"  authorization {",
			"    $0",
			"  }",
			""
		],
		"description": "consul empty 'authorization' parameter of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' - full": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-full"],
		"body": [
			"  authorization {",
			"    // enabled",
			"    enabled = ${1|true,false|}",
			"",
			"    static {",
			"      // jwt_validation_pub_keys",
			"      // a list of PEM-encoded public keys to use to authenticate signatures locally.",
			"      // defaults to []",
			"      // note:",
			"      //   exactly one of jwks_url jwt_validation_pub_keys, or oidc_discovery_url is required.",
			"      jwt_validation_pub_keys = [\"${2:<path-to-public-key1>}\",\"${3:<path-to-public-key2>}\",\"${4:<path-to-public-keyN>}\"]",
			"",
			"      // oidc_discovery_url",
			"      // the OIDC Discovery URL, without any .well-known component (base path).",
			"      // defaults to \"\"",
			"      // note:",
			"      //   exactly one of jwks_url jwt_validation_pub_keys, or oidc_discovery_url is required.",
			"      oidc_discovery_url     = \"${5:<oidc-discovery-url>}\"",
			"      // oidc_discovery_ca_cert",
			"      // PEM encoded CA cert for use by the TLS client used to talk with the OIDC Discovery URL.",
			"      // defaults to \"\"",
			"      // note:",
			"      //   every line must end with a newline (\\n). If not set, system certificates are used.",
			"      oidc_discovery_ca_cert = \"${6:<path-to-oidc-discovery-ca-cert>}\"",
			"",
			"      // jwks_url",
			"      // the JWKS URL to use to authenticate signatures.",
			"      // defaults to \"\"",
			"      // note:",
			"      //   exactly one of jwks_url jwt_validation_pub_keys, or oidc_discovery_url is required.",
			"      jwks_url     = \"${7:<jwks-url>}\"",
			"      // jwks_ca_cert",
			"      // PEM encoded CA cert for use by the TLS client used to talk with the JWKS URL.",
			"      // defaults to \"\"",
			"      // note:",
			"      //   every line must end with a newline (\\n). If not set, system certificates are used.",
			"      jwks_ca_cert = \"${8:<path-to-jwks-ca-cert>}\"",
			"",
			"      // claim_mappings",
			"      // mappings of claims (key) that will be copied to a metadata field (value).",
			"      // use this if the claim you are capturing is singular (such as an attribute).",
			"      // when mapped, the values can be any of a number, string, or boolean and will all be stringified when returned.",
			"      // defaults to (map[string]string",
			"      claim_mappings {",
			"        \"${9:<your-claim-key1}\" = \"${10:<your-claim-value1}\"",
			"        \"${11:<your-claim-key2}\" = \"${12:<your-claim-value2}\"",
			"        \"${13:<your-claim-keyN}\" = \"${14:<your-claim-valueN}\"",
			"      }",
			"      // list_claim_mappings",
			"      // mappings of claims (key) will be copied to a metadata field (value).",
			"      // use this if the claim you are capturing is list-like (such as groups).",
			"      // when mapped, the values in each list can be any of a number, string, or boolean and will all be stringified when returned.",
			"      // defaults to (map[string]string",
			"      list_claim_mappings {",
			"        \"${15:<your-claim1}\" = \"${16:<your-metadata1}\"",
			"        \"${17:<your-claim2}\" = \"${18:<your-metadata2}\"",
			"        \"${19:<your-claimN}\" = \"${20:<your-metadataN}\"",
			"      }",
			"",
			"      // jwt_supported_algs",
			"      // JWTSupportedAlgs is a list of supported signing algorithms.",
			"      // defaults to [\"RS256\"]",
			"      jwt_supported_algs = [\"${21:<signing-algorythm1>}\",\"${22:<signing-algorythm2>}\",\"${23:<signing-algorythmN>}\"]",
			"",
			"      // bound_audiences",
			"      // list of aud claims that are valid for login; any match is sufficient.",
			"      // defaults to []",
			"      bound_audiences = [\"${24:<aud-claim1>}\",\"${25:<aud-claim2>}\",\"${26:<aud-claimN>}\"]",
			"      // bound_issuer",
			"      // the value against which to match the iss claim in a JWT.",
			"      // defaults to \"\"",
			"      bound_issuer = \"${27:<iss-claim>}\"",
			"",
			"      // expiration_leeway",
			"      // duration of leeway when validating expiration of a token to account for clock skew.",
			"      // defaults to 150s (2.5 minutes) if set to 0s and can be disabled if set to -1ns.",
			"      // defaults to \"0s\"",
			"      expiration_leeway = \"${28:<expiration-leeway>}\"",
			"      // expiration_leeway",
			"      // duration of leeway when validating not before values of a token to account for clock skew.",
			"      // defaults to 150s (2.5 minutes) if set to 0s and can be disabled if set to -1.",
			"      // defaults to \"0s\"",
			"      not_before_leeway = \"${29:<not-before-leeway>}\"",
			"      // clock_skew_leeway",
			"      // duration of leeway when validating all claims to account for clock skew.",
			"      // defaults to 60s (1 minute) if set to 0s and can be disabled if set to -1ns.",
			"      // defaults to \"0s\"",
			"      clock_skew_leeway = \"${30:<clock-skew-leeway>}\"",
			"",
			"      // claim_assertions",
			"      // list of assertions about the mapped claims required to authorize the incoming RPC request.",
			"      // the syntax uses github.com/hashicorp/go-bexpr which is shared with the API filtering feature.",
			"      // for example, the following configurations when combined will ensure that the JWT sub matches the node name requested by the client.",
			"      // defaults to []",
			"      claim_assertions = [",
			"        \"value.node_name == \\\"\\${node}\\\"\"",
			"      ]",
			"    }",
			"  }",
			"$0"
		],
		"description": "consul full 'authorization' parameter of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' - common": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-common"],
		"body": [
			"  authorization {",
			"    // enabled",
			"    enabled = ${1|true,false|}",
			"  }",
			"$0"
		],
		"description": "consul common 'authorization' parameter of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'enabled'": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-enabled"],
		"body": [
			"    // enabled",
			"    enabled = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'enabled' parameter of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'static' - empty": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-static-empty"],
		"body": [
			"    static {",
			"      $0",
			"    }",
			""
		],
		"description": "consul empty 'static' parameter of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'static' - full": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-static-full"],
		"body": [
			"    static {",
			"      // jwt_validation_pub_keys",
			"      // a list of PEM-encoded public keys to use to authenticate signatures locally.",
			"      // defaults to []",
			"      // note:",
			"      //   exactly one of jwks_url jwt_validation_pub_keys, or oidc_discovery_url is required.",
			"      jwt_validation_pub_keys = [\"${1:<path-to-public-key1>}\",\"${2:<path-to-public-key2>}\",\"${3:<path-to-public-keyN>}\"]",
			"",
			"      // oidc_discovery_url",
			"      // the OIDC Discovery URL, without any .well-known component (base path).",
			"      // defaults to \"\"",
			"      // note:",
			"      //   exactly one of jwks_url jwt_validation_pub_keys, or oidc_discovery_url is required.",
			"      oidc_discovery_url     = \"${4:<oidc-discovery-url>}\"",
			"      // oidc_discovery_ca_cert",
			"      // PEM encoded CA cert for use by the TLS client used to talk with the OIDC Discovery URL.",
			"      // defaults to \"\"",
			"      // note:",
			"      //   every line must end with a newline (\\n). If not set, system certificates are used.",
			"      oidc_discovery_ca_cert = \"${5:<path-to-oidc-discovery-ca-cert>}\"",
			"",
			"      // jwks_url",
			"      // the JWKS URL to use to authenticate signatures.",
			"      // defaults to \"\"",
			"      // note:",
			"      //   exactly one of jwks_url jwt_validation_pub_keys, or oidc_discovery_url is required.",
			"      jwks_url     = \"${6:<jwks-url>}\"",
			"      // jwks_ca_cert",
			"      // PEM encoded CA cert for use by the TLS client used to talk with the JWKS URL.",
			"      // defaults to \"\"",
			"      // note:",
			"      //   every line must end with a newline (\\n). If not set, system certificates are used.",
			"      jwks_ca_cert = \"${7:<path-to-jwks-ca-cert>}\"",
			"",
			"      // claim_mappings",
			"      // mappings of claims (key) that will be copied to a metadata field (value).",
			"      // use this if the claim you are capturing is singular (such as an attribute).",
			"      // when mapped, the values can be any of a number, string, or boolean and will all be stringified when returned.",
			"      // defaults to (map[string]string",
			"      claim_mappings {",
			"        \"${8:<your-claim-key1}\" = \"${9:<your-claim-value1}\"",
			"        \"${10:<your-claim-key2}\" = \"${11:<your-claim-value2}\"",
			"        \"${12:<your-claim-keyN}\" = \"${13:<your-claim-valueN}\"",
			"      }",
			"      // list_claim_mappings",
			"      // mappings of claims (key) will be copied to a metadata field (value).",
			"      // use this if the claim you are capturing is list-like (such as groups).",
			"      // when mapped, the values in each list can be any of a number, string, or boolean and will all be stringified when returned.",
			"      // defaults to (map[string]string",
			"      list_claim_mappings {",
			"        \"${14:<your-claim1}\" = \"${15:<your-metadata1}\"",
			"        \"${16:<your-claim2}\" = \"${17:<your-metadata2}\"",
			"        \"${18:<your-claimN}\" = \"${19:<your-metadataN}\"",
			"      }",
			"",
			"      // jwt_supported_algs",
			"      // JWTSupportedAlgs is a list of supported signing algorithms.",
			"      // defaults to [\"RS256\"]",
			"      jwt_supported_algs = [\"${20:<signing-algorythm1>}\",\"${21:<signing-algorythm2>}\",\"${22:<signing-algorythmN>}\"]",
			"",
			"      // bound_audiences",
			"      // list of aud claims that are valid for login; any match is sufficient.",
			"      // defaults to []",
			"      bound_audiences = [\"${23:<aud-claim1>}\",\"${24:<aud-claim2>}\",\"${25:<aud-claimN>}\"]",
			"      // bound_issuer",
			"      // the value against which to match the iss claim in a JWT.",
			"      // defaults to \"\"",
			"      bound_issuer = \"${26:<iss-claim>}\"",
			"",
			"      // expiration_leeway",
			"      // duration of leeway when validating expiration of a token to account for clock skew.",
			"      // defaults to 150s (2.5 minutes) if set to 0s and can be disabled if set to -1ns.",
			"      // defaults to \"0s\"",
			"      expiration_leeway = \"${27:<expiration-leeway>}\"",
			"      // expiration_leeway",
			"      // duration of leeway when validating not before values of a token to account for clock skew.",
			"      // defaults to 150s (2.5 minutes) if set to 0s and can be disabled if set to -1.",
			"      // defaults to \"0s\"",
			"      not_before_leeway = \"${28:<not-before-leeway>}\"",
			"      // clock_skew_leeway",
			"      // duration of leeway when validating all claims to account for clock skew.",
			"      // defaults to 60s (1 minute) if set to 0s and can be disabled if set to -1ns.",
			"      // defaults to \"0s\"",
			"      clock_skew_leeway = \"${29:<clock-skew-leeway>}\"",
			"",
			"      // claim_assertions",
			"      // list of assertions about the mapped claims required to authorize the incoming RPC request.",
			"      // the syntax uses github.com/hashicorp/go-bexpr which is shared with the API filtering feature.",
			"      // for example, the following configurations when combined will ensure that the JWT sub matches the node name requested by the client.",
			"      // defaults to []",
			"      claim_assertions = [",
			"        \"value.node_name == \\\"\\${node}\\\"\"",
			"      ]",
			"    }",
			"$0"
		],
		"description": "consul full 'static' parameter of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'static' - common": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-static-common"],
		"body": [
			"    static {",
			"    }",
			"$0"
		],
		"description": "consul common 'static' parameter of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'static' parameter 'jwt_validation_pub_keys'": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-static-parameter-jwt-validation-pub-keys"],
		"body": [
			"      // jwt_validation_pub_keys",
			"      // a list of PEM-encoded public keys to use to authenticate signatures locally.",
			"      // defaults to []",
			"      // note:",
			"      //   exactly one of jwks_url jwt_validation_pub_keys, or oidc_discovery_url is required.",
			"      jwt_validation_pub_keys = [\"${1:<path-to-public-key1>}\",\"${2:<path-to-public-key2>}\",\"${3:<path-to-public-keyN>}\"]",
			"$0"
		],
		"description": "consul templated 'jwt_validation_pub_keys' parameter of parameter 'static' of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'static' parameter 'oidc_discovery_url'": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-static-parameter-oidc-discovery-url"],
		"body": [
			"      // oidc_discovery_url",
			"      // the OIDC Discovery URL, without any .well-known component (base path).",
			"      // defaults to \"\"",
			"      // note:",
			"      //   exactly one of jwks_url jwt_validation_pub_keys, or oidc_discovery_url is required.",
			"      oidc_discovery_url = \"${1:<oidc-discovery-url>}\"",
			"$0"
		],
		"description": "consul templated 'oidc_discovery_url' parameter of parameter 'static' of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'static' parameter 'oidc_discovery_ca_cert'": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-static-parameter-oidc-discovery-ca-cert"],
		"body": [
			"      // oidc_discovery_ca_cert",
			"      // PEM encoded CA cert for use by the TLS client used to talk with the OIDC Discovery URL.",
			"      // defaults to \"\"",
			"      // note:",
			"      //   every line must end with a newline (\\n). If not set, system certificates are used.",
			"      oidc_discovery_ca_cert = \"${1:<path-to-oidc-discovery-ca-cert>}\"",
			"$0"
		],
		"description": "consul templated 'oidc_discovery_ca_cert' parameter of parameter 'static' of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'static' parameter 'jwks_url'": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-static-parameter-jwks-url"],
		"body": [
			"      // jwks_url",
			"      // the JWKS URL to use to authenticate signatures.",
			"      // defaults to \"\"",
			"      // note:",
			"      //   exactly one of jwks_url jwt_validation_pub_keys, or oidc_discovery_url is required.",
			"      jwks_url = \"${1:<jwks-url>}\"",
			"$0"
		],
		"description": "consul templated 'jwks_url' parameter of parameter 'static' of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'static' parameter 'jwks_ca_cert'": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-static-parameter-jwks-ca-cert"],
		"body": [
			"      // jwks_ca_cert",
			"      // PEM encoded CA cert for use by the TLS client used to talk with the JWKS URL.",
			"      // defaults to \"\"",
			"      // note:",
			"      //   every line must end with a newline (\\n). If not set, system certificates are used.",
			"      jwks_ca_cert = \"${1:<path-to-jwks-ca-cert>}\"",
			"$0"
		],
		"description": "consul templated 'jwks_ca_cert' parameter of parameter 'static' of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'static' parameter 'claim_mappings'": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-static-parameter-claim-mappings"],
		"body": [
			"      // claim_mappings",
			"      // mappings of claims (key) that will be copied to a metadata field (value).",
			"      // use this if the claim you are capturing is singular (such as an attribute).",
			"      // when mapped, the values can be any of a number, string, or boolean and will all be stringified when returned.",
			"      // defaults to (map[string]string)",
			"      claim_mappings {",
			"        \"${1:<your-claim-key1}\" = \"${2:<your-claim-value1}\"",
			"        \"${3:<your-claim-key2}\" = \"${4:<your-claim-value2}\"",
			"        \"${5:<your-claim-keyN}\" = \"${6:<your-claim-valueN}\"",
			"      }",
			"$0"
		],
		"description": "consul templated 'claim_mappings' parameter of parameter 'static' of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'static' parameter 'list_claim_mappings'": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-static-parameter-list-claim-mappings"],
		"body": [
			"      // list_claim_mappings",
			"      // mappings of claims (key) will be copied to a metadata field (value).",
			"      // use this if the claim you are capturing is list-like (such as groups).",
			"      // when mapped, the values in each list can be any of a number, string, or boolean and will all be stringified when returned.",
			"      // defaults to (map[string]string)",
			"      list_claim_mappings {",
			"        \"${1:<your-claim1}\" = \"${2:<your-metadata1}\"",
			"        \"${3:<your-claim2}\" = \"${4:<your-metadata2}\"",
			"        \"${5:<your-claimN}\" = \"${6:<your-metadataN}\"",
			"      }",
			"$0"
		],
		"description": "consul templated 'list_claim_mappings' parameter of parameter 'static' of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'static' parameter 'jwt_supported_algs'": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-static-parameter-jwt-supported-algs"],
		"body": [
			"      // jwt_supported_algs",
			"      // JWTSupportedAlgs is a list of supported signing algorithms.",
			"      // defaults to [\"RS256\"]",
			"      jwt_supported_algs = [\"${1:<signing-algorythm1>}\",\"${2:<signing-algorythm2>}\",\"${3:<signing-algorythmN>}\"]",
			"$0"
		],
		"description": "consul templated 'jwt_supported_algs' parameter of parameter 'static' of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'static' parameter 'bound_audiences'": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-static-parameter-bound-audiences"],
		"body": [
			"      // bound_audiences",
			"      // list of aud claims that are valid for login; any match is sufficient.",
			"      // defaults to []",
			"      bound_audiences = [\"${1:<aud-claim1>}\",\"${2:<aud-claim2>}\",\"${3:<aud-claimN>}\"]",
			"$0"
		],
		"description": "consul templated 'bound_audiences' parameter of parameter 'static' of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'static' parameter 'bound_issuer'": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-static-parameter-bound-issuer"],
		"body": [
			"      // bound_issuer",
			"      // the value against which to match the iss claim in a JWT.",
			"      // defaults to \"\"",
			"      bound_issuer = \"${1:<iss-claim>}\"",
			"$0"
		],
		"description": "consul templated 'bound_issuer' parameter of parameter 'static' of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'static' parameter 'expiration_leeway'": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-static-parameter-expiration-leeway"],
		"body": [
			"      // expiration_leeway",
			"      // duration of leeway when validating expiration of a token to account for clock skew.",
			"      // defaults to 150s (2.5 minutes) if set to 0s and can be disabled if set to -1ns.",
			"      // defaults to \"0s\"",
			"      expiration_leeway = \"${1:<expiration-leeway>}\"",
			"$0"
		],
		"description": "consul templated 'expiration_leeway' parameter of parameter 'static' of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'static' parameter 'not_before_leeway'": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-static-parameter-not-before-leeway"],
		"body": [
			"      // expiration_leeway",
			"      // duration of leeway when validating not before values of a token to account for clock skew.",
			"      // defaults to 150s (2.5 minutes) if set to 0s and can be disabled if set to -1.",
			"      // defaults to \"0s\"",
			"      not_before_leeway = \"${1:<not-before-leeway>}\"",
			"$0"
		],
		"description": "consul templated 'not_before_leeway' parameter of parameter 'static' of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'static' parameter 'clock_skew_leeway'": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-static-parameter-clock-skew-leeway"],
		"body": [
			"      // clock_skew_leeway",
			"      // duration of leeway when validating all claims to account for clock skew.",
			"      // defaults to 60s (1 minute) if set to 0s and can be disabled if set to -1ns.",
			"      // defaults to \"0s\"",
			"      clock_skew_leeway = \"${1:<clock-skew-leeway>}\"",
			"$0"
		],
		"description": "consul templated 'clock_skew_leeway' parameter of parameter 'static' of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_config' parameter 'authorization' parameter 'static' parameter 'claim_assertions'": {
		"prefix": ["consul-configuration-auto-config-parameter-authorization-parameter-static-parameter-claim-assertions"],
		"body": [
			"      // claim_assertions",
			"      // list of assertions about the mapped claims required to authorize the incoming RPC request.",
			"      // the syntax uses github.com/hashicorp/go-bexpr which is shared with the API filtering feature.",
			"      // for example, the following configurations when combined will ensure that the JWT sub matches the node name requested by the client.",
			"      // defaults to []",
			"      claim_assertions = [",
			"        \"value.node_name == \\\"\\${node}\\\"\"",
			"      ]",
			"$0"
		],
		"description": "consul templated 'claim_assertions' parameter of parameter 'static' of parameter 'authorization' of configuration 'auto_config'"
	},
	"consul configuration 'auto_encrypt' - empty": {
		"prefix": ["consul-configuration-auto-encrypt-empty"],
		"body": [
			"auto_encrypt {",
			"  $0",
			"}",
			""
		],
		"description": "consul empty 'auto_encrypt' configuration"
	},
	"consul configuration 'auto_encrypt' - full": {
		"prefix": ["consul-configuration-auto-encrypt-full"],
		"body": [
			"auto_encrypt {",
			"  // allow_tls",
			"  // this option enables auto_encrypt on the servers",
			"  // and allows them to automatically distribute certificates from the Connect CA to the clients.",
			"  // if enabled, the server can accept incoming connections from both the built-in CA and the Connect CA,",
			"  // as well as their certificates.",
			"  // note, the server will only present the built-in CA and certificate,",
			"  // which the client can verify using the CA it received from auto_encrypt endpoint.",
			"  // if disabled, a client configured with 'auto_encrypt.tls' will be unable to start.",
			"  allow_tls = ${1|true,false|}",
			"",
			"  // tls",
			"  // allows the client to request the Connect CA and certificates from the servers,",
			"  // for encrypting RPC communication.",
			"  // the client will make the request to any servers listed in the -join or -retry-join option.",
			"  // this requires that every server to have 'auto_encrypt.allow_tls' enabled.",
			"  // when both 'auto_encrypt' options are used, it allows clients to receive certificates that are generated on the servers.",
			"  // if the '-server-port' is not the default one, it has to be provided to the client as well.",
			"  // usually this is discovered through LAN gossip, but 'auto_encrypt' provision happens before the information can be distributed through gossip.",
			"  // the most secure auto_encrypt setup is when the client is provided with the built-in CA, verify_server_hostname is turned on,",
			"  // and when an ACL token with node.write permissions is setup.",
			"  // tt is also possible to use auto_encrypt with a CA and ACL, but without verify_server_hostname,",
			"  // or only with a ACL enabled, or only with CA and 'verify_server_hostname', or only with a CA, or finally without a CA and without ACL enabled.",
			"  // in any case, the communication to the 'auto_encrypt' endpoint is always TLS encrypted.",
			"  // ! WARNING !",
			"  //   'enabling auto_encrypt.tls' conflicts with the 'auto_config' feature.",
			"  //   only one option may be specified.",
			"  tls = ${2|true,false|}",
			"",
			"  // dns_san",
			"  // when this option is being used, the certificates requested by 'auto_encrypt' from the server have these 'dns_san' set as DNS SAN.",
			"  // defaults to [].",
			"  dns_sans = [\"${3:<dns-san1>}\",\"${4:<dns-san2>}\",\"${5:<dns-sanN>}\"]",
			"",
			"  // ip_san",
			"  // when this option is being used, the certificates requested by 'auto_encrypt' from the server have these 'ip_san' set as IP SAN.",
			"  // defaults to [].",
			"  dns_ip_sansans = [\"${6:<ip-san1>}\",\"${7:<ip-san2>}\",\"${8:<ip-sanN>}\"]",
			"}",
			"$0"
		],
		"description": "consul full 'auto_encrypt' configuration"
	},
	"consul configuration 'auto_encrypt' - common": {
		"prefix": ["consul-configuration-auto-encrypt-common"],
		"body": [
			"auto_encrypt {",
			"  // allow_tls",
			"  // this option enables auto_encrypt on the servers",
			"  // and allows them to automatically distribute certificates from the Connect CA to the clients.",
			"  // if enabled, the server can accept incoming connections from both the built-in CA and the Connect CA,",
			"  // as well as their certificates.",
			"  // note, the server will only present the built-in CA and certificate,",
			"  // which the client can verify using the CA it received from auto_encrypt endpoint.",
			"  // if disabled, a client configured with 'auto_encrypt.tls' will be unable to start.",
			"  allow_tls = ${1:true}",
			"",
			"  // tls",
			"  // allows the client to request the Connect CA and certificates from the servers,",
			"  // for encrypting RPC communication.",
			"  // the client will make the request to any servers listed in the -join or -retry-join option.",
			"  // this requires that every server to have 'auto_encrypt.allow_tls' enabled.",
			"  // when both 'auto_encrypt' options are used, it allows clients to receive certificates that are generated on the servers.",
			"  // if the '-server-port' is not the default one, it has to be provided to the client as well.",
			"  // usually this is discovered through LAN gossip, but 'auto_encrypt' provision happens before the information can be distributed through gossip.",
			"  // the most secure auto_encrypt setup is when the client is provided with the built-in CA, verify_server_hostname is turned on,",
			"  // and when an ACL token with node.write permissions is setup.",
			"  // tt is also possible to use auto_encrypt with a CA and ACL, but without verify_server_hostname,",
			"  // or only with a ACL enabled, or only with CA and 'verify_server_hostname', or only with a CA, or finally without a CA and without ACL enabled.",
			"  // in any case, the communication to the 'auto_encrypt' endpoint is always TLS encrypted.",
			"  // ! WARNING !",
			"  //   'enabling auto_encrypt.tls' conflicts with the 'auto_config' feature.",
			"  //   only one option may be specified.",
			"  tls = ${2:true}",
			"}",
			"$0"
		],
		"description": "consul common 'auto_encrypt' configuration"
	},
	"consul configuration 'auto_encrypt' parameter 'allow_tls'": {
		"prefix": ["consul-configuration-auto-encrypt-parameter-allow-tls"],
		"body": [
			"  // allow_tls",
			"  // this option enables auto_encrypt on the servers",
			"  // and allows them to automatically distribute certificates from the Connect CA to the clients.",
			"  // if enabled, the server can accept incoming connections from both the built-in CA and the Connect CA,",
			"  // as well as their certificates.",
			"  // note, the server will only present the built-in CA and certificate,",
			"  // which the client can verify using the CA it received from auto_encrypt endpoint.",
			"  // if disabled, a client configured with 'auto_encrypt.tls' will be unable to start.",
			"  allow_tls = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'allow_tls' parameter of configuration 'auto_encrypt'"
	},
	"consul configuration 'auto_encrypt' parameter 'tls'": {
		"prefix": ["consul-configuration-auto-encrypt-parameter-tls"],
		"body": [
			"  // tls",
			"  // allows the client to request the Connect CA and certificates from the servers,",
			"  // for encrypting RPC communication.",
			"  // the client will make the request to any servers listed in the -join or -retry-join option.",
			"  // this requires that every server to have 'auto_encrypt.allow_tls' enabled.",
			"  // when both 'auto_encrypt' options are used, it allows clients to receive certificates that are generated on the servers.",
			"  // if the '-server-port' is not the default one, it has to be provided to the client as well.",
			"  // usually this is discovered through LAN gossip, but 'auto_encrypt' provision happens before the information can be distributed through gossip.",
			"  // the most secure auto_encrypt setup is when the client is provided with the built-in CA, verify_server_hostname is turned on,",
			"  // and when an ACL token with node.write permissions is setup.",
			"  // tt is also possible to use auto_encrypt with a CA and ACL, but without verify_server_hostname,",
			"  // or only with a ACL enabled, or only with CA and 'verify_server_hostname', or only with a CA, or finally without a CA and without ACL enabled.",
			"  // in any case, the communication to the 'auto_encrypt' endpoint is always TLS encrypted.",
			"  // ! WARNING !",
			"  //   'enabling auto_encrypt.tls' conflicts with the 'auto_config' feature.",
			"  //   only one option may be specified.",
			"  tls = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'tls' parameter of configuration 'auto_encrypt'"
	},
	"consul configuration 'auto_encrypt' parameter 'dns_san'": {
		"prefix": ["consul-configuration-auto-encrypt-parameter-dns-san"],
		"body": [
			"  // dns_san",
			"  // when this option is being used, the certificates requested by 'auto_encrypt' from the server have these 'dns_san' set as DNS SAN.",
			"  // defaults to [].",
			"  dns_sans = [\"${1:<dns-san1>}\",\"${2:<dns-san2>}\",\"${3:<dns-sanN>}\"]",
			"$0"
		],
		"description": "consul templated 'dns_sans' parameter of configuration 'auto_encrypt'"
	},
	"consul configuration 'auto_encrypt' parameter 'ip_san'": {
		"prefix": ["consul-configuration-auto-encrypt-parameter-ip-san"],
		"body": [
			"  // ip_san",
			"  // when this option is being used, the certificates requested by 'auto_encrypt' from the server have these 'ip_san' set as IP SAN.",
			"  // defaults to [].",
			"  dns_ip_sansans = [\"${1:<ip-san1>}\",\"${2:<ip-san2>}\",\"${3:<ip-sanN>}\"]",
			"$0"
		],
		"description": "consul templated 'ip_san' parameter of configuration 'auto_encrypt'"
	},
	"consul configuration 'bootstrap'": {
		"prefix": ["consul-configuration-bootstrap"],
		"body": [
			"// bootstrap",
			"// this flag is used to control if a server is in 'bootstrap' mode.",
			"// it is important that no more than one server per datacenter be running in this mode.",
			"// technically, a server in bootstrap mode is allowed to self-elect as the Raft leader.",
			"// it is important that only a single node is in this mode; otherwise, consistency cannot be guaranteed as multiple nodes are able to self-elect.",
			"// it is not recommended to use this flag after a cluster has been bootstrapped.",
			"bootstrap = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'bootstrap' configuration "
	},
	"consul configuration 'bootstrap_expect'": {
		"prefix": ["consul-configuration-bootstrap-expect"],
		"body": [
			"// bootstrap_expect",
			"// this flag provides the number of expected servers in the datacenter.",
			"// either this value should not be provided or the value must agree with other servers in the cluster.",
			"// when provided, Consul waits until the specified number of servers are available and then bootstraps the cluster.",
			"// this allows an initial leader to be elected automatically.",
			"// this cannot be used in conjunction with the legacy -bootstrap flag.",
			"// this flag requires '-server' mode.",
			"bootstrap_expect = ${1:<number-of-expected-servers>}",
			"$0"
		],
		"description": "consul templated 'bootstrap_expect' configuration "
	},
	"consul configuration 'bind'": {
		"prefix": ["consul-configuration-bind-addr"],
		"body": [
			"// bind_addr",
			"// the address that should be bound to for internal cluster communications.",
			"// this is an IP address that should be reachable by all other nodes in the cluster.",
			"// by default, this is \"0.0.0.0\", meaning Consul will bind to all addresses on the local machine",
			"// and will advertise the private IPv4 address to the rest of the cluster.",
			"// if there are multiple private IPv4 addresses available, Consul will exit with an error at startup.",
			"// if you specify \"[::]\", Consul will advertise the public IPv6 address.",
			"// if there are multiple public IPv6 addresses available, Consul will exit with an error at startup.",
			"// Consul uses both TCP and UDP and the same port for both.",
			"// if you have any firewalls, be sure to allow both protocols.",
			"// in Consul 1.1.0 and later this can be dynamically defined with a go-sockaddr template that must resolve at runtime to a single address.",
			"// some example templates:",
			"//   \"{{ GetPrivateInterfaces | include \"network\" \"10.0.0.0/8\" | attr \"address\" }}\"",
			"//   \"{{ GetInterfaceIP \"eth0\" }}\"",
			"//   \"{{ GetAllInterfaces | include \"name\" \"^eth\" | include \"flags\" \"forwardable|up\" | attr \"address\" }}\"",
			"bind_addr = \"${1:<address-for-internal-cluster-communications>}\"",
			"$0"
		],
		"description": "consul templated 'bind_addr' configuration"
	},
	"consul configuration 'cache' - empty": {
		"prefix": ["consul-configuration-cache-empty"],
		"body": [
			"cache {",
			"  $0",
			"}",
			""
		],
		"description": "consul empty 'cache' configuration"
	},
	"consul configuration 'cache' - full": {
		"prefix": ["consul-configuration-cache-full"],
		"body": [
			"cache {",
			"  // entry_fetch_max_burst",
			"  // the size of the token bucket used to recharge the rate-limit per cache entry.",
			"  // the default value is 2 and means that when cache has not been updated for a long time,",
			"  // 2 successive queries can be made as long as the rate-limit is not reached.",
			"  entry_fetch_max_burst = ${1:<size-of-token-bucket>}",
			"  // entry_fetch_rate",
			"  // configures the rate-limit at which the cache may refresh a single entry.",
			"  // on a cluster with many changes/s, watching changes in the cache might put high pressure on the servers.",
			"  // this ensures the number of requests for a single cache entry will never go beyond this limit,",
			"  // even when a given service changes every 1/100s.",
			"  // since this is a per cache entry limit, having a highly unstable service will only rate limit the watched on this service,",
			"  // but not the other services/entries.",
			"  // the value is strictly positive, expressed in queries per second as a float, 1 means 1 query per second, 0.1 mean 1 request every 10s maximum.",
			"  // the default value is \"No limit\" and should be tuned on large clusters to avoid performing too many RPCs on entries changing a lot.",
			"  entry_fetch_rate      = ${2:<fetch-rate-as-float>}",
			"}",
			"$0"
		],
		"description": "consul full 'cache' configuration"
	},
	"consul configuration 'cache' - common": {
		"prefix": ["consul-configuration-cache-common"],
		"body": [
			"cache {",
			"  // entry_fetch_max_burst",
			"  // the size of the token bucket used to recharge the rate-limit per cache entry.",
			"  // the default value is 2 and means that when cache has not been updated for a long time,",
			"  // 2 successive queries can be made as long as the rate-limit is not reached.",
			"  entry_fetch_max_burst = ${1:<size-of-token-bucket>}",
			"  // entry_fetch_rate",
			"  // configures the rate-limit at which the cache may refresh a single entry.",
			"  // on a cluster with many changes/s, watching changes in the cache might put high pressure on the servers.",
			"  // this ensures the number of requests for a single cache entry will never go beyond this limit,",
			"  // even when a given service changes every 1/100s.",
			"  // since this is a per cache entry limit, having a highly unstable service will only rate limit the watched on this service,",
			"  // but not the other services/entries.",
			"  // the value is strictly positive, expressed in queries per second as a float, 1 means 1 query per second, 0.1 mean 1 request every 10s maximum.",
			"  // the default value is \"No limit\" and should be tuned on large clusters to avoid performing too many RPCs on entries changing a lot.",
			"  entry_fetch_rate      = ${2:<fetch-rate-as-float>}",
			"}",
			"$0"
		],
		"description": "consul common 'cache' configuration"
	},
	"consul configuration 'cache' parameter 'entry_fetch_max_burst'": {
		"prefix": ["consul-configuration-cache-parameter-entry-fetch-max-burst"],
		"body": [
			"  // entry_fetch_max_burst",
			"  // the size of the token bucket used to recharge the rate-limit per cache entry.",
			"  // the default value is 2 and means that when cache has not been updated for a long time,",
			"  // 2 successive queries can be made as long as the rate-limit is not reached.",
			"  entry_fetch_max_burst = ${1:<size-of-token-bucket>}",
			"$0"
		],
		"description": "consul templated 'entry_fetch_max_burst' parameter of configuration 'cache'"
	},
	"consul configuration 'cache' parameter 'entry_fetch_rate'": {
		"prefix": ["consul-configuration-cache-parameter-entry-fetch-rate"],
		"body": [
			"  // entry_fetch_rate",
			"  // configures the rate-limit at which the cache may refresh a single entry.",
			"  // on a cluster with many changes/s, watching changes in the cache might put high pressure on the servers.",
			"  // this ensures the number of requests for a single cache entry will never go beyond this limit,",
			"  // even when a given service changes every 1/100s.",
			"  // since this is a per cache entry limit, having a highly unstable service will only rate limit the watched on this service,",
			"  // but not the other services/entries.",
			"  // the value is strictly positive, expressed in queries per second as a float, 1 means 1 query per second, 0.1 mean 1 request every 10s maximum.",
			"  // the default value is \"No limit\" and should be tuned on large clusters to avoid performing too many RPCs on entries changing a lot.",
			"  entry_fetch_rate = ${1:<fetch-rate-as-float>}",
			"$0"
		],
		"description": "consul templated 'entry_fetch_rate' parameter of configuration 'cache'"
	},
	"consul configuration 'check_update_interval'": {
		"prefix": ["consul-configuration-check-update-interval"],
		"body": [
			"// check_update_interval",
			"// this interval controls how often check output from checks in a steady state is synchronized with the server.",
			"// by default, this is set to 5 minutes (\"5m\").",
			"// many checks which are in a steady state produce slightly different output per run (timestamps, etc) which cause constant writes.",
			"// this configuration allows deferring the sync of check output for a given interval to reduce write pressure.",
			"// if a check ever changes state, the new state and associated output is synchronized immediately.",
			"// to disable this behavior, set the value to \"0s\".",
			"check_update_interval = \"${1:<check-update-interval>}\"",
			"$0"
		],
		"description": "consul templated 'check_update_interval' configuration "
	},
	"consul configuration 'client_addr'": {
		"prefix": ["consul-configuration-client-addr"],
		"body": [
			"// client_addr",
			"// the address to which Consul will bind client interfaces, including the HTTP and DNS servers.",
			"// by default, this is \"127.0.0.1\", allowing only loopback connections.",
			"// in Consul 1.0 and later this can be set to a space-separated list of addresses to bind to, or a go-sockaddr template that can potentially resolve to multiple addresses.",
			"client_addr = [\"${1:<client-addr1>}\",\"${2:<client-addr2>}\",\"${3:<client-addrN>}\"]",
			"$0"
		],
		"description": "consul templated 'client_addr' configuration "
	},
	"consul configuration 'config_entries' - empty": {
		"prefix": ["consul-configuration-config-entries-empty"],
		"body": [
			"config_entries {",
			"  $0",
			"}",
			""
		],
		"description": "consul empty 'config_entries' configuration"
	},
	"consul configuration 'config_entries' - full": {
		"prefix": ["consul-configuration-config-entries-full"],
		"body": [
			"config_entries {",
			"  // bootstrap",
			"  // this is a list of inlined config entries to insert into the state store when the Consul server gains leadership.",
			"  // this option is only applicable to server nodes.",
			"  // each bootstrap entry will be created only if it does not exist.",
			"  // when reloading, any new entries that have been added to the configuration will be processed.",
			"  // see the configuration entry docs for more details about the contents of each entry.",
			"  bootstrap {",
			"    {",
			"      Kind = \"${1:<configuration-entry-kind1>}\"",
			"      Name = \"${2:<configuration-entry-name1>}\"",
			"      Config {",
			"        ${3:<configuration-entry-config-key1>} = ${4:<configuration-entry-config-value1>}",
			"        ${5:<configuration-entry-config-key2>} = ${6:<configuration-entry-config-value2>}",
			"        ${7:<configuration-entry-config-keyN>} = ${8:<configuration-entry-config-valueN>}",
			"      }",
			"    },",
			"    {",
			"      Kind = \"${9:<configuration-entry-kind2>}\"",
			"      Name = \"${10:<configuration-entry-name2>}\"",
			"      Config {",
			"        ${11:<configuration-entry-config-key1>} = ${12:<configuration-entry-config-value1>}",
			"        ${13:<configuration-entry-config-key2>} = ${14:<configuration-entry-config-value2>}",
			"        ${15:<configuration-entry-config-keyN>} = ${16:<configuration-entry-config-valueN>}",
			"      }",
			"    },",
			"    {",
			"      Kind = \"${17:<configuration-entry-kindN>}\"",
			"      Name = \"${18:<configuration-entry-nameN>}\"",
			"      Config {",
			"        ${19:<configuration-entry-config-key1>} = ${20:<configuration-entry-config-value1>}",
			"        ${21:<configuration-entry-config-key2>} = ${22:<configuration-entry-config-value2>}",
			"        ${23:<configuration-entry-config-keyN>} = ${24:<configuration-entry-config-valueN>}",
			"      }",
			"    }",
			"  }",
			"}",
			"$0"
		],
		"description": "consul full 'config_entries' configuration"
	},
	"consul configuration 'config_entries' parameter 'bootstrap'": {
		"prefix": ["consul-configuration-config-entries-parameter-bootstrap"],
		"body": [
			"  // bootstrap",
			"  // this is a list of inlined config entries to insert into the state store when the Consul server gains leadership.",
			"  // this option is only applicable to server nodes.",
			"  // each bootstrap entry will be created only if it does not exist.",
			"  // when reloading, any new entries that have been added to the configuration will be processed.",
			"  // see the configuration entry docs for more details about the contents of each entry.",
			"  bootstrap {",
			"    {",
			"      Kind = \"${1:<configuration-entry-kind1>}\"",
			"      Name = \"${2:<configuration-entry-name1>}\"",
			"      Config {",
			"        ${3:<configuration-entry-config-key1>} = ${4:<configuration-entry-config-value1>}",
			"        ${5:<configuration-entry-config-key2>} = ${6:<configuration-entry-config-value2>}",
			"        ${7:<configuration-entry-config-keyN>} = ${8:<configuration-entry-config-valueN>}",
			"      }",
			"    },",
			"    {",
			"      Kind = \"${9:<configuration-entry-kind2>}\"",
			"      Name = \"${10:<configuration-entry-name2>}\"",
			"      Config {",
			"        ${11:<configuration-entry-config-key1>} = ${12:<configuration-entry-config-value1>}",
			"        ${13:<configuration-entry-config-key2>} = ${14:<configuration-entry-config-value2>}",
			"        ${15:<configuration-entry-config-keyN>} = ${16:<configuration-entry-config-valueN>}",
			"      }",
			"    },",
			"    {",
			"      Kind = \"${17:<configuration-entry-kindN>}\"",
			"      Name = \"${18:<configuration-entry-nameN>}\"",
			"      Config {",
			"        ${19:<configuration-entry-config-key1>} = ${20:<configuration-entry-config-value1>}",
			"        ${21:<configuration-entry-config-key2>} = ${22:<configuration-entry-config-value2>}",
			"        ${23:<configuration-entry-config-keyN>} = ${24:<configuration-entry-config-valueN>}",
			"      }",
			"    }",
			"  }",
			"$0"
		],
		"description": "consul templated 'bootstrap' parameter of configuration 'config_entries'"
	},
	"consul configuration 'connect' - empty": {
		"prefix": ["consul-configuration-connect-empty"],
		"body": [
			"connect {",
			"  $0",
			"}",
			""
		],
		"description": "consul empty 'connect' configuration"
	},
	"consul configuration 'connect' - full": {
		"prefix": ["consul-configuration-connect-full"],
		"body": [
			"connect {",
			"  // enabled",
			"  // controls whether Connect features are enabled on this agent.",
			"  // should be enabled on all servers in the cluster in order for Connect to function properly.",
			"  // defaults to false.",
			"  enabled = ${1|true,false|}",
			"",
			"  // enable_mesh_gateway_wan_federation",
			"  // controls whether cross-datacenter federation traffic between servers is funneled through mesh gateways.",
			"  // defaults to false.",
			"  enable_mesh_gateway_wan_federation = ${2|true,false|}",
			"",
			"  // ca_provider",
			"  // controls which CA provider to use for Connect's CA.",
			"  // currently only the aws-pca, consul, and vault providers are supported.",
			"  // this is only used when initially bootstrapping the cluster.",
			"  // for an existing cluster, use the Update ca configuration endpoint. [https://www.consul.io/api/connect/ca#update-ca-configuration]",
			"  ca_provider = \"${3:<connect-ca-provider>}\" # (\"aws-pca\"|\"consul\"|\"vault\")",
			"  // ca_config common",
			"  // an object which allows setting different config options based on the CA provider chosen.",
			"  // this is only used when initially bootstrapping the cluster.",
			"  // for an existing cluster, use the Update ca configuration endpoint. [https://www.consul.io/api/connect/ca#update-ca-configuration]",
			"  ca_config {",
			"    // sets a limit on the number of Certificate Signing Requests that can be processed concurrently.",
			"    // this is useful when you want to limit the number of CPU cores available to the server for certificate signing operations.",
			"    // for example, on an 8 core server, setting this to 1 will ensure that no more than one CPU core",
			"    // will be consumed when generating or rotating certificates.",
			"    // setting this is recommended instead of 'csr_max_per_second' when you want to limit the number of cores",
			"    // consumed since it is simpler to reason about limiting CSR resources this way without artificially slowing down rotations.",
			"    // defaults to 0 (disabled).",
			"    csr_max_concurrent = ${4:<limit-number-of-concurrent-csr>}",
			"    // sets a rate limit on the maximum number of Certificate Signing Requests (CSRs) the servers will accept.",
			"    // this is used to prevent CA rotation from causing unbounded CPU usage on servers.",
			"    // for larger deployments we recommend increasing this based on the expected number of server instances and server resources,",
			"    // or use 'csr_max_concurrent' instead if servers have more than one CPU core.",
			"    // setting this to zero disables rate limiting.",
			"    // it defaults to 50 which is conservative",
			"    csr_max_per_second = ${5:<limit-number-of-maximum-csr>}",
			"",
			"    // the upper bound on the lease duration of a leaf certificate issued for a service.",
			"    // in most cases a new leaf certificate will be requested by a proxy before this limit is reached.",
			"    // this is also the effective limit on how long a server outage can last (with no leader) before network connections will start being rejected.",
			"    // this value cannot be lower than 1 hour or higher than 1 year.",
			"    // this value is also used when rotating out old root certificates from the cluster.",
			"    // then a root certificate has been inactive (rotated out) for more than twice the current leaf_cert_ttl, it will be removed from the trusted list.",
			"    // defaults to 72h.",
			"    leaf_cert_ttl = \"${6:<lease-duration-of-leaf-certificate>}\"",
			"",
			"    // the type of key to generate for this CA.",
			"    // this is only used when the provider is generating a new key.",
			"    // if private_key is set for the Consul provider, or existing root or intermediate PKI paths given for Vault then this will be ignored.",
			"    // currently supported options are ec or rsa.",
			"    // it is required that all servers in a datacenter have the same config for the CA.",
			"    // it is recommended that servers in different datacenters use the same key type and size,",
			"    // although the built-in CA and Vault provider will both allow mixed CA key types.",
			"    // some CA providers (currently Vault) will not allow cross-signing a new CA certificate with a different key type.",
			"    // this means that if you migrate from an RSA-keyed Vault CA to an EC-keyed CA from any provider,",
			"    // you may have to proceed without cross-signing which risks temporary connection issues for workloads during the new certificate rollout.",
			"    // we highly recommend testing this outside of production to understand the impact and suggest sticking to same key type where possible.",
			"    // note that this only affects CA keys generated by the provider.",
			"    // leaf certificate keys are always EC 256 regardless of the CA configuration.",
			"    // default is 'ec'.",
			"    private_key_type = \"${7:<private-key-type>}\"",
			"",
			"    // the length of key to generate for this CA.",
			"    // this is only used when the provider is generating a new key.",
			"    // if 'private_key' is set for the Consul provider, or existing root or intermediate PKI paths given for Vault then this will be ignored.",
			"    // currently supported values are:",
			"    //   private_key_type = ec (default): 224, 256, 384, 521 corresponding to the NIST P-* curves of the same name.",
			"    //   private_key_type = rsa: 2048, 4096",
			"    private_key_bits = ${8:<private-key-bits>}",
			"  }",
			"  // ca_config provider 'aws-pca'",
			"  // an object which allows setting different config options based on the CA provider chosen.",
			"  // this is only used when initially bootstrapping the cluster.",
			"  // for an existing cluster, use the Update ca configuration endpoint. [https://www.consul.io/api/connect/ca#update-ca-configuration]",
			"  ca_config {",
			"    // the Amazon Resource Name (ARN) of an existing private CA in your ACM account.",
			"    // if specified, Consul will attempt to use the existing CA to issue certificates.",
			"    existing_arn = \"${9:<amazon-resource-name>}\"",
			"  }",
			"  // ca_config provider 'consul'",
			"  // an object which allows setting different config options based on the CA provider chosen.",
			"  // this is only used when initially bootstrapping the cluster.",
			"  // for an existing cluster, use the Update ca configuration endpoint. [https://www.consul.io/api/connect/ca#update-ca-configuration]",
			"  ca_config {",
			"    // the PEM contents of the private key to use for the CA.",
			"    private_key = \"${10:<private-key-pem-contents>}\"",
			"    // the PEM contents of the root certificate to use for the CA.",
			"    root_cert   = \"${11:<root-key-pem-contents>}\"",
			"  }",
			"  // ca_config provider 'vault'",
			"  // an object which allows setting different config options based on the CA provider chosen.",
			"  // this is only used when initially bootstrapping the cluster.",
			"  // for an existing cluster, use the Update ca configuration endpoint. [https://www.consul.io/api/connect/ca#update-ca-configuration]",
			"  ca_config {",
			"    // the address of the Vault server to connect to.",
			"    address               = \"${12:<vault-address>}\"",
			"    // the Vault token to use.",
			"    // in Consul 1.8.5 and later, if the token has the renewable flag set,",
			"    // Consul will attempt to renew its lease periodically after half the duration has expired.",
			"    token                 = \"${13:<vault-token>}\"",
			"    // the path to use for the root CA pki backend in Vault.",
			"    // this can be an existing backend with a CA already configured,",
			"    // or a blank/unmounted backend in which case Connect will automatically mount/generate the CA.",
			"    // the Vault token given above must have sudo access to this backend,",
			"    // as well as permission to mount the backend at this path if it is not already mounted.",
			"    root_pki_path         = \"${14:<vault-root-ca-pki-backend-path>}\"",
			"    // the path to use for the temporary intermediate CA pki backend in Vault.",
			"    // Connect will overwrite any data at this path in order to generate a temporary intermediate CA.",
			"    // the Vault token given above must have write access to this backend,",
			"    // as well as permission to mount the backend at this path if it is not already mounted.",
			"    intermediate_pki_path = \"${15:<vault-temporary-intermediate-ca-pki-backend-path>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "consul full 'connect' configuration"
	},
	"consul configuration 'connect' - common": {
		"prefix": ["consul-configuration-connect-common"],
		"body": [
			"connect {",
			"  // enabled",
			"  // controls whether Connect features are enabled on this agent.",
			"  // should be enabled on all servers in the cluster in order for Connect to function properly.",
			"  // defaults to false.",
			"  enabled = ${1:true}",
			"}",
			"$0"
		],
		"description": "consul common 'connect' configuration"
	},
	"consul configuration 'connect' parameter 'enabled'": {
		"prefix": ["consul-configuration-connect-parameter-enabled"],
		"body": [
			"  // enabled",
			"  // controls whether Connect features are enabled on this agent.",
			"  // should be enabled on all servers in the cluster in order for Connect to function properly.",
			"  // defaults to false.",
			"  enabled = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'enabled' parameter of configuration 'connect'"
	},
	"consul configuration 'connect' parameter 'enable_mesh_gateway_wan_federation'": {
		"prefix": ["consul-configuration-connect-parameter-enable-mesh-gateway-wan-federation"],
		"body": [
			"  // enable_mesh_gateway_wan_federation",
			"  // controls whether cross-datacenter federation traffic between servers is funneled through mesh gateways.",
			"  // defaults to false.",
			"  enable_mesh_gateway_wan_federation = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'enable_mesh_gateway_wan_federation' parameter of configuration 'connect'"
	},
	"consul configuration 'connect' parameter 'ca_provider'": {
		"prefix": ["consul-configuration-connect-parameter-ca-provider"],
		"body": [
			"  // ca_provider",
			"  // controls which CA provider to use for Connect's CA.",
			"  // currently only the aws-pca, consul, and vault providers are supported.",
			"  // this is only used when initially bootstrapping the cluster.",
			"  // for an existing cluster, use the Update ca configuration endpoint. [https://www.consul.io/api/connect/ca#update-ca-configuration]",
			"  ca_provider = \"${1:<connect-ca-provider>}\" # (\"aws-pca\"|\"consul\"|\"vault\")",
			"$0"
		],
		"description": "consul templated 'ca_provider' parameter of configuration 'connect'"
	},
	"consul configuration 'connect' parameter 'ca_config' - empty": {
		"prefix": ["consul-configuration-connect-parameter-ca-config-empty"],
		"body": [
			"  // ca_config",
			"  // an object which allows setting different config options based on the CA provider chosen.",
			"  // this is only used when initially bootstrapping the cluster.",
			"  // for an existing cluster, use the Update ca configuration endpoint. [https://www.consul.io/api/connect/ca#update-ca-configuration]",
			"  ca_config {",
			"    $0",
			"  }",
			""
		],
		"description": "consul templated 'ca_config' parameter of configuration 'connect'"
	},
	"consul configuration 'connect' parameter 'ca_config' - common": {
		"prefix": ["consul-configuration-connect-parameter-ca-config-common"],
		"body": [
			"  // ca_config common",
			"  // an object which allows setting different config options based on the CA provider chosen.",
			"  // this is only used when initially bootstrapping the cluster.",
			"  // for an existing cluster, use the Update ca configuration endpoint. [https://www.consul.io/api/connect/ca#update-ca-configuration]",
			"  ca_config {",
			"    // sets a limit on the number of Certificate Signing Requests that can be processed concurrently.",
			"    // this is useful when you want to limit the number of CPU cores available to the server for certificate signing operations.",
			"    // for example, on an 8 core server, setting this to 1 will ensure that no more than one CPU core",
			"    // will be consumed when generating or rotating certificates.",
			"    // setting this is recommended instead of 'csr_max_per_second' when you want to limit the number of cores",
			"    // consumed since it is simpler to reason about limiting CSR resources this way without artificially slowing down rotations.",
			"    // defaults to 0 (disabled).",
			"    csr_max_concurrent = ${1:<limit-number-of-concurrent-csr>}",
			"    // sets a rate limit on the maximum number of Certificate Signing Requests (CSRs) the servers will accept.",
			"    // this is used to prevent CA rotation from causing unbounded CPU usage on servers.",
			"    // for larger deployments we recommend increasing this based on the expected number of server instances and server resources,",
			"    // or use 'csr_max_concurrent' instead if servers have more than one CPU core.",
			"    // setting this to zero disables rate limiting.",
			"    // it defaults to 50 which is conservative",
			"    csr_max_per_second = ${2:<limit-number-of-maximum-csr>}",
			"",
			"    // the upper bound on the lease duration of a leaf certificate issued for a service.",
			"    // in most cases a new leaf certificate will be requested by a proxy before this limit is reached.",
			"    // this is also the effective limit on how long a server outage can last (with no leader) before network connections will start being rejected.",
			"    // this value cannot be lower than 1 hour or higher than 1 year.",
			"    // this value is also used when rotating out old root certificates from the cluster.",
			"    // then a root certificate has been inactive (rotated out) for more than twice the current leaf_cert_ttl, it will be removed from the trusted list.",
			"    // defaults to 72h.",
			"    leaf_cert_ttl = \"${3:<lease-duration-of-leaf-certificate>}\"",
			"",
			"    // the type of key to generate for this CA.",
			"    // this is only used when the provider is generating a new key.",
			"    // if private_key is set for the Consul provider, or existing root or intermediate PKI paths given for Vault then this will be ignored.",
			"    // currently supported options are ec or rsa.",
			"    // it is required that all servers in a datacenter have the same config for the CA.",
			"    // it is recommended that servers in different datacenters use the same key type and size,",
			"    // although the built-in CA and Vault provider will both allow mixed CA key types.",
			"    // some CA providers (currently Vault) will not allow cross-signing a new CA certificate with a different key type.",
			"    // this means that if you migrate from an RSA-keyed Vault CA to an EC-keyed CA from any provider,",
			"    // you may have to proceed without cross-signing which risks temporary connection issues for workloads during the new certificate rollout.",
			"    // we highly recommend testing this outside of production to understand the impact and suggest sticking to same key type where possible.",
			"    // note that this only affects CA keys generated by the provider.",
			"    // leaf certificate keys are always EC 256 regardless of the CA configuration.",
			"    // default is 'ec'.",
			"    private_key_type = \"${4:<private-key-type>}\"",
			"",
			"    // the length of key to generate for this CA.",
			"    // this is only used when the provider is generating a new key.",
			"    // if 'private_key' is set for the Consul provider, or existing root or intermediate PKI paths given for Vault then this will be ignored.",
			"    // currently supported values are:",
			"    //   private_key_type = ec (default): 224, 256, 384, 521 corresponding to the NIST P-* curves of the same name.",
			"    //   private_key_type = rsa: 2048, 4096",
			"    private_key_bits = ${5:<private-key-bits>}",
			"  }",
			"$0"
		],
		"description": "consul templated 'ca_config' parameter of configuration 'connect' common options"
	},
	"consul configuration 'connect' parameter 'ca_config' - 'aws-pca'": {
		"prefix": ["consul-configuration-connect-parameter-ca-config-aws-pca"],
		"body": [
			"  // ca_config provider 'aws-pca'",
			"  // an object which allows setting different config options based on the CA provider chosen.",
			"  // this is only used when initially bootstrapping the cluster.",
			"  // for an existing cluster, use the Update ca configuration endpoint. [https://www.consul.io/api/connect/ca#update-ca-configuration]",
			"  ca_config {",
			"    // the Amazon Resource Name (ARN) of an existing private CA in your ACM account.",
			"    // if specified, Consul will attempt to use the existing CA to issue certificates.",
			"    existing_arn = \"${1:<amazon-resource-name>}\"",
			"  }",
			"$0"
		],
		"description": "consul templated 'ca_config' parameter of configuration 'connect' for provider 'aws-pca'"
	},
	"consul configuration 'connect' parameter 'ca_config' - 'consul'": {
		"prefix": ["consul-configuration-connect-parameter-ca-config-consul"],
		"body": [
			"  // ca_config provider 'consul'",
			"  // an object which allows setting different config options based on the CA provider chosen.",
			"  // this is only used when initially bootstrapping the cluster.",
			"  // for an existing cluster, use the Update ca configuration endpoint. [https://www.consul.io/api/connect/ca#update-ca-configuration]",
			"  ca_config {",
			"    // the PEM contents of the private key to use for the CA.",
			"    private_key = \"${1:<private-key-pem-contents>}\"",
			"    // the PEM contents of the root certificate to use for the CA.",
			"    root_cert   = \"${2:<root-key-pem-contents>}\"",
			"  }",
			"$0"
		],
		"description": "consul templated 'ca_config' parameter of configuration 'connect' for provider 'consul'"
	},
	"consul configuration 'connect' parameter 'ca_config' - 'vault'": {
		"prefix": ["consul-configuration-connect-parameter-ca-config-vault"],
		"body": [
			"  // ca_config provider 'vault'",
			"  // an object which allows setting different config options based on the CA provider chosen.",
			"  // this is only used when initially bootstrapping the cluster.",
			"  // for an existing cluster, use the Update ca configuration endpoint. [https://www.consul.io/api/connect/ca#update-ca-configuration]",
			"  ca_config {",
			"    // the address of the Vault server to connect to.",
			"    address               = \"${1:<vault-address>}\"",
			"    // the Vault token to use.",
			"    // in Consul 1.8.5 and later, if the token has the renewable flag set,",
			"    // Consul will attempt to renew its lease periodically after half the duration has expired.",
			"    token                 = \"${2:<vault-token>}\"",
			"    // the path to use for the root CA pki backend in Vault.",
			"    // this can be an existing backend with a CA already configured,",
			"    // or a blank/unmounted backend in which case Connect will automatically mount/generate the CA.",
			"    // the Vault token given above must have sudo access to this backend,",
			"    // as well as permission to mount the backend at this path if it is not already mounted.",
			"    root_pki_path         = \"${3:<vault-root-ca-pki-backend-path>}\"",
			"    // the path to use for the temporary intermediate CA pki backend in Vault.",
			"    // Connect will overwrite any data at this path in order to generate a temporary intermediate CA.",
			"    // the Vault token given above must have write access to this backend,",
			"    // as well as permission to mount the backend at this path if it is not already mounted.",
			"    intermediate_pki_path = \"${4:<vault-temporary-intermediate-ca-pki-backend-path>}\"",
			"  }",
			"$0"
		],
		"description": "consul templated 'ca_config' parameter of configuration 'connect' for provider 'vault'"
	},
	"consul configuration 'datacenter'": {
		"prefix": ["consul-configuration-datacenter"],
		"body": [
			"// datacenter",
			"datacenter = \"${1:<datcenter-name>}\"",
			"$0"
		],
		"description": "consul templated 'datacenter' configuration"
	},
	"consul configuration 'data_dir'": {
		"prefix": ["consul-configuration-data-dir"],
		"body": [
			"// data_dir",
			"data_dir = \"${1:<path-to-data-dir>}\"",
			"$0"
		],
		"description": "consul templated 'data_dir' configuration"
	},
	"consul configuration 'disable_anonymous_signature'": {
		"prefix": ["consul-configuration-disable-anonymous-signature"],
		"body": [
			"// disable_anonymous_signature",
			"// disables providing an anonymous signature for de-duplication with the update check.",
			"disable_anonymous_signature = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'disable_anonymous_signature' configuration"
	},
	"consul configuration 'disable_host_node_id'": {
		"prefix": ["consul-configuration-disable-host-node-id"],
		"body": [
			"// disable_host_node_id",
			"// setting this to true will prevent Consul from using information from the host to generate a deterministic node ID,",
			"// and will instead generate a random node ID which will be persisted in the data directory.",
			"// this is useful when running multiple Consul agents on the same host for testing.",
			"// this defaults to false in Consul prior to version 0.8.5 and in 0.8.5 and later defaults to true, so you must opt-in for host-based IDs.",
			"// host-based IDs are generated using gopsutil, which is shared with HashiCorp's Nomad, so if you opt-in to host-based IDs then Consul",
			"// and Nomad will use information on the host to automatically assign the same ID in both systems.",
			"disable_host_node_id = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'disable_host_node_id' configuration"
	},
	"consul configuration 'disable_http_unprintable_char_filter'": {
		"prefix": ["consul-configuration-disable-http-unprintable-char-filter"],
		"body": [
			"// disable_http_unprintable_char_filter",
			"// Consul 1.0.3 fixed a potential security vulnerability where malicious users could craft KV keys with unprintable chars",
			"// that would confuse operators using the CLI or UI into taking wrong actions.",
			"// users who had data written in older versions of Consul that did not have this restriction will be unable to delete those values by default in 1.0.3 or later.",
			"// this setting enables those users to temporarily disable the filter such that delete operations can work on those keys again to get back to a healthy state.",
			"// it is strongly recommended that this filter is not disabled permanently as it exposes the original security vulnerability.",
			"// defaults to false.",
			"disable_http_unprintable_char_filter = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'disable_http_unprintable_char_filter' configuration"
	},
	"consul configuration 'disable_remote_exec'": {
		"prefix": ["consul-configuration-disable-remote-exec"],
		"body": [
			"// disable_remote_exec",
			"// disables support for remote execution.",
			"// when set to true, the agent will ignore any incoming remote exec requests.",
			"// in versions of Consul prior to 0.8, this defaulted to false.",
			"// in Consul 0.8 the default was changed to true, to make remote exec opt-in instead of opt-out.",
			"disable_remote_exec = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'disable_remote_exec' configuration"
	},
	"consul configuration 'disable_update_check'": {
		"prefix": ["consul-configuration-disable-update-check"],
		"body": [
			"// disable_update_check",
			"// disables automatic checking for security bulletins and new version releases.",
			"// this is disabled in Consul Enterprise.",
			"disable_update_check = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'disable_update_check' configuration"
	},
	"consul configuration 'discard_check_output'": {
		"prefix": ["consul-configuration-discard-check-output"],
		"body": [
			"// discard_check_output",
			"// discards the output of health checks before storing them.",
			"// this reduces the number of writes to the Consul raft log in environments where health checks have volatile output like timestamps, process ids, ...",
			"discard_check_output = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'discard_check_output' configuration"
	},
	"consul configuration 'discovery_max_stale'": {
		"prefix": ["consul-configuration-discovery-max-stale"],
		"body": [
			"// discovery_max_stale",
			"// enables stale requests for all service discovery HTTP endpoints.",
			"// this is equivalent to the max_stale configuration for DNS requests.",
			"// if this value is zero (default), all service discovery HTTP endpoints are forwarded to the leader.",
			"// if this value is greater than zero, any Consul server can handle the service discovery request.",
			"// if a Consul server is behind the leader by more than discovery_max_stale, the query will be re-evaluated on the leader to get more up-to-date results.",
			"// Consul agents also add a new X-Consul-Effective-Consistency response header which indicates if the agent did a stale read.",
			"// 'discover-max-stale' was introduced in Consul 1.0.7 as a way for Consul operators to force stale requests from clients at the agent level,",
			"// and defaults to zero which matches default consistency behavior in earlier Consul versions.",
			"discovery_max_stale = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'discovery_max_stale' configuration"
	},
	"consul configuration 'dns_config' - empty": {
		"prefix": ["consul-configuration-dns-config-empty"],
		"body": [
			"dns_config {",
			"  $0",
			"}",
			""
		],
		"description": "consul empty 'dns_config' configuration"
	},
	"consul configuration 'dns_config' - full": {
		"prefix": ["consul-configuration-dns-config-full"],
		"body": [
			"dns_config {",
			"  // allow_stale",
			"  // enables a stale query for DNS information.",
			"  // this allows any Consul server, rather than only the leader, to service the request.",
			"  // the advantage of this is you get linear read scalability with Consul servers.",
			"  // in versions of Consul prior to 0.7, this defaulted to false, meaning all requests are serviced by the leader,",
			"  // providing stronger consistency but less throughput and higher latency.",
			"  // in Consul 0.7 and later, this defaults to true for better utilization of available servers.",
			"  allow_stale = ${1|true,false|}",
			"",
			"  // max_stale",
			"  // when allow_stale is specified, this is used to limit how stale results are allowed to be.",
			"  // if a Consul server is behind the leader by more than max_stale, the query will be re-evaluated on the leader to get more up-to-date results.",
			"  // prior to Consul 0.7.1 this defaulted to 5 seconds; in Consul 0.7.1 and later this defaults to 10 years (\"87600h\")",
			"  // which effectively allows DNS queries to be answered by any server, no matter how stale.",
			"  // in practice, servers are usually only milliseconds behind the leader, so this lets Consul continue serving requests in long outage scenarios where no leader can be elected.",
			"  max_stale = \"${2:<max-stale>}\"",
			"",
			"  // node_ttl",
			"  // by default, this is \"0s\", so all node lookups are served with a 0 TTL value.",
			"  // dns caching for node lookups can be enabled by setting this value.",
			"  // this should be specified with the \"s\" suffix for second or \"m\" for minute.",
			"  node_ttl = \"${3:<node-ttl>}\"",
			"",
			"  // service_ttl",
			"  // this is a sub-object which allows for setting a TTL on service lookups with a per-service policy.",
			"  // the \"*\" wildcard service can be used when there is no specific policy available for a service.",
			"  // by default, all services are served with a 0 TTL value.",
			"  // dns caching for service lookups can be enabled by setting this value.",
			"  service_ttl = \"${4:<service-ttl>}\"",
			"",
			"  // enable_truncate",
			"  // if set to true, a UDP DNS query that would return more than 3 records, or more than would fit into a valid UDP response, will set the truncated flag,",
			"  // indicating to clients that they should re-query using TCP to get the full set of records.",
			"  enable_truncate = ${5|true,false|}",
			"",
			"  // only_passing",
			"  // if set to true, any nodes whose health checks are warning or critical will be excluded from DNS results.",
			"  // if false, the default, only nodes whose health checks are failing as critical will be excluded.",
			"  // for service lookups, the health checks of the node itself, as well as the service-specific checks are considered.",
			"  // for example, if a node has a health check that is critical then all services on that node will be excluded because they are also considered critical.",
			"  only_passing = ${6|true,false|}",
			"",
			"  // recursor_strategy",
			"  // if set to sequential, Consul will query recursors in the order listed in the recursors option.",
			"  // ff set to random, Consul will query an upstream DNS resolvers in a random order.",
			"  // defaults to sequential.",
			"  recursor_strategy = \"${7|sequential,random|}\"",
			"  // recursor_timeout",
			"  // timeout used by Consul when recursively querying an upstream DNS server.",
			"  // see recursors for more details.",
			"  // default is 2s.",
			"  // this is available in Consul 0.7 and later.",
			"  recursor_timeout  = \"${8:<recursor-timeout>}\"",
			"",
			"  // disable_compression",
			"  // if set to true, DNS responses will not be compressed.",
			"  // compression was added and enabled by default in Consul 0.7.",
			"  disable_compression = \"${9:<disable-compression>}\"",
			"",
			"  // udp_answer_limit",
			"  // limit the number of resource records contained in the answer section of a UDP-based DNS response.",
			"  // this parameter applies only to UDP DNS queries that are less than 512 bytes.",
			"  // this setting is deprecated and replaced in Consul 1.0.7 by a_record_limit.",
			"  udp_answer_limit = ${10:<udp-answer-limit>}",
			"",
			"  // a_record_limit",
			"  // limit the number of resource records contained in the answer section of a A, AAAA or ANY DNS response (both TCP and UDP).",
			"  // when answering a question, Consul will use the complete list of matching hosts, shuffle the list randomly, and then limit the number of answers to a_record_limit (default: no limit).",
			"  // this limit does not apply to SRV records.",
			"  // in environments where RFC 3484 Section 6 Rule 9 is implemented and enforced (i.e. DNS answers are always sorted and therefore never random),",
			"  // clients may need to set this value to 1 to preserve the expected randomized distribution behavior",
			"  // (note: RFC 3484 has been obsoleted by RFC 6724 and as a result it should be increasingly uncommon to need to change this value with modern resolvers).",
			"  a_record_limit = ${11:<a-record-limit>}",
			"",
			"  // enable_additional_node_meta_txt",
			"  // when set to true, Consul will add TXT records for Node metadata into the Additional section of the DNS responses for several query types such as SRV queries.",
			"  // when set to false those records are not emitted.",
			"  // this does not impact the behavior of those same TXT records when they would be added to the Answer section of the response like when querying with type TXT or ANY.",
			"  // this defaults to true.",
			"  enable_additional_node_meta_txt = ${12|true,false|}",
			"",
			"  soa {",
			"    // expire",
			"    // configure SOA Expire duration in seconds.",
			"    // default value is 86400, ie: 24 hours.",
			"    expire = ${13:<expire-in-seconds>}",
			"",
			"    // min_ttl",
			"    // configure SOA DNS minimum TTL.",
			"    // as explained in RFC-2308 this also controls negative cache TTL in most implementations.",
			"    // default value is 0, ie: no minimum delay or negative TTL.",
			"    min_ttl = ${14:<min-ttl-in-seconds>}",
			"",
			"    // refresh",
			"    // configure SOA Refresh duration in seconds.",
			"    // default value is 3600, ie: 1 hour.",
			"    refresh = ${15:<refresh-duration-in-seconds>}",
			"",
			"    // retry",
			"    // configures the Retry duration expressed in seconds.",
			"    // default value is 600, ie: 10 minutes.",
			"    retry = ${16:<retry-duration-in-seconds>}",
			"  }",
			"",
			"  // use_cache",
			"  // when set to true, DNS resolution will use the agent cache described in agent caching.",
			"  // this setting affects all service and prepared queries DNS requests.",
			"  // Implies 'allow_stale'.",
			"  use_cache     = ${17|true,false|}",
			"  // cache_max_age",
			"  // when use_cache is enabled, the agent will attempt to re-fetch the result from the servers if the cached value is older than this duration.",
			"  // see: agent caching.",
			"  cache_max_age = \"${18:<cache-max-age>}\"",
			"",
			"  // prefer_namespace",
			"  // ! enterprise feature !",
			"  // ! deprecated in Consul 1.11. use the canonical DNS format [https://www.consul.io/docs/discovery/dns#namespaced-partitioned-services] instead. !",
			"  // when set to true, in a DNS query for a service, the label between the domain and the service label will be treated as a namespace name instead of a datacenter.",
			"  // when set to false, the default, the behavior will be the same as non-Enterprise versions and will assume the label is the datacenter.",
			"  // see: https://www.consul.io/docs/discovery/dns#namespaced-services more details.",
			"  prefer_namespace = ${19|true,false|}",
			"}",
			"$0"
		],
		"description": "consul full 'dns_config' configuration"
	},
	"consul configuration 'dns_config' - common": {
		"prefix": ["consul-configuration-dns-config-common"],
		"body": [
			"dns_config {",
			"}",
			"$0"
		],
		"description": "consul common 'dns_config' configuration"
	},
	"consul configuration 'dns_config' parameter 'allow_stale'": {
		"prefix": ["consul-configuration-dns-config-parameter-allow-stale"],
		"body": [
			"  // allow_stale",
			"  // enables a stale query for DNS information.",
			"  // this allows any Consul server, rather than only the leader, to service the request.",
			"  // the advantage of this is you get linear read scalability with Consul servers.",
			"  // in versions of Consul prior to 0.7, this defaulted to false, meaning all requests are serviced by the leader,",
			"  // providing stronger consistency but less throughput and higher latency.",
			"  // in Consul 0.7 and later, this defaults to true for better utilization of available servers.",
			"  allow_stale = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'allow_stale' parameter of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'max_stale'": {
		"prefix": ["consul-configuration-dns-config-parameter-max-stale"],
		"body": [
			"  // max_stale",
			"  // when allow_stale is specified, this is used to limit how stale results are allowed to be.",
			"  // if a Consul server is behind the leader by more than max_stale, the query will be re-evaluated on the leader to get more up-to-date results.",
			"  // prior to Consul 0.7.1 this defaulted to 5 seconds; in Consul 0.7.1 and later this defaults to 10 years (\"87600h\")",
			"  // which effectively allows DNS queries to be answered by any server, no matter how stale.",
			"  // in practice, servers are usually only milliseconds behind the leader, so this lets Consul continue serving requests in long outage scenarios where no leader can be elected.",
			"  max_stale = \"${1:<max-stale>}\"",
			"$0"
		],
		"description": "consul templated 'max_stale' parameter of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'node_ttl'": {
		"prefix": ["consul-configuration-dns-config-parameter-node-ttl"],
		"body": [
			"  // node_ttl",
			"  // by default, this is \"0s\", so all node lookups are served with a 0 TTL value.",
			"  // dns caching for node lookups can be enabled by setting this value.",
			"  // this should be specified with the \"s\" suffix for second or \"m\" for minute.",
			"  node_ttl = \"${1:<node-ttl>}\"",
			"$0"
		],
		"description": "consul templated 'node_ttl' parameter of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'service_ttl'": {
		"prefix": ["consul-configuration-dns-config-parameter-service-ttl"],
		"body": [
			"  // service_ttl",
			"  // this is a sub-object which allows for setting a TTL on service lookups with a per-service policy.",
			"  // the \"*\" wildcard service can be used when there is no specific policy available for a service.",
			"  // by default, all services are served with a 0 TTL value.",
			"  // dns caching for service lookups can be enabled by setting this value.",
			"  service_ttl = \"${1:<service-ttl>}\"",
			"$0"
		],
		"description": "consul templated 'service_ttl' parameter of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'enable_truncate'": {
		"prefix": ["consul-configuration-dns-config-parameter-enable-truncate"],
		"body": [
			"  // enable_truncate",
			"  // if set to true, a UDP DNS query that would return more than 3 records, or more than would fit into a valid UDP response, will set the truncated flag,",
			"  // indicating to clients that they should re-query using TCP to get the full set of records.",
			"  enable_truncate = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'enable_truncate' parameter of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'only_passing'": {
		"prefix": ["consul-configuration-dns-config-parameter-only-passing"],
		"body": [
			"  // only_passing",
			"  // if set to true, any nodes whose health checks are warning or critical will be excluded from DNS results.",
			"  // if false, the default, only nodes whose health checks are failing as critical will be excluded.",
			"  // for service lookups, the health checks of the node itself, as well as the service-specific checks are considered.",
			"  // for example, if a node has a health check that is critical then all services on that node will be excluded because they are also considered critical.",
			"  only_passing = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'only_passing' parameter of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'recursor_strategy'": {
		"prefix": ["consul-configuration-dns-config-parameter-recursor-strategy"],
		"body": [
			"  // recursor_strategy",
			"  // if set to sequential, Consul will query recursors in the order listed in the recursors option.",
			"  // ff set to random, Consul will query an upstream DNS resolvers in a random order.",
			"  // defaults to sequential.",
			"  recursor_strategy = \"${1|sequential,random|}\"",
			"$0"
		],
		"description": "consul templated 'recursor_strategy' parameter of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'recursor_timeout'": {
		"prefix": ["consul-configuration-dns-config-parameter-recursor-timeout"],
		"body": [
			"  // recursor_timeout",
			"  // timeout used by Consul when recursively querying an upstream DNS server.",
			"  // see recursors for more details.",
			"  // default is 2s.",
			"  // this is available in Consul 0.7 and later.",
			"  recursor_timeout = \"${1:<recursor-timeout>}\"",
			"$0"
		],
		"description": "consul templated 'recursor_timeout' parameter of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'disable_compression'": {
		"prefix": ["consul-configuration-dns-config-parameter-disable-compression"],
		"body": [
			"  // disable_compression",
			"  // if set to true, DNS responses will not be compressed.",
			"  // compression was added and enabled by default in Consul 0.7.",
			"  disable_compression = \"${1:<disable-compression>}\"",
			"$0"
		],
		"description": "consul templated 'disable_compression' parameter of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'udp_answer_limit'": {
		"prefix": ["consul-configuration-dns-config-parameter-udp-answer-limit"],
		"body": [
			"  // udp_answer_limit",
			"  // limit the number of resource records contained in the answer section of a UDP-based DNS response.",
			"  // this parameter applies only to UDP DNS queries that are less than 512 bytes.",
			"  // this setting is deprecated and replaced in Consul 1.0.7 by a_record_limit.",
			"  udp_answer_limit = ${1:<udp-answer-limit>}",
			"$0"
		],
		"description": "consul templated 'udp_answer_limit' parameter of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'a_record_limit'": {
		"prefix": ["consul-configuration-dns-config-parameter-a-record-limit"],
		"body": [
			"  // a_record_limit",
			"  // limit the number of resource records contained in the answer section of a A, AAAA or ANY DNS response (both TCP and UDP).",
			"  // when answering a question, Consul will use the complete list of matching hosts, shuffle the list randomly, and then limit the number of answers to a_record_limit (default: no limit).",
			"  // this limit does not apply to SRV records.",
			"  // in environments where RFC 3484 Section 6 Rule 9 is implemented and enforced (i.e. DNS answers are always sorted and therefore never random),",
			"  // clients may need to set this value to 1 to preserve the expected randomized distribution behavior",
			"  // (note: RFC 3484 has been obsoleted by RFC 6724 and as a result it should be increasingly uncommon to need to change this value with modern resolvers).",
			"  a_record_limit = ${1:<a-record-limit>}",
			"$0"
		],
		"description": "consul templated 'a_record_limit' parameter of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'enable_additional_node_meta_txt'": {
		"prefix": ["consul-configuration-dns-config-parameter-enable-additional-node-meta-txt"],
		"body": [
			"  // enable_additional_node_meta_txt",
			"  // when set to true, Consul will add TXT records for Node metadata into the Additional section of the DNS responses for several query types such as SRV queries.",
			"  // when set to false those records are not emitted.",
			"  // this does not impact the behavior of those same TXT records when they would be added to the Answer section of the response like when querying with type TXT or ANY.",
			"  // this defaults to true.",
			"  enable_additional_node_meta_txt = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'enable_additional_node_meta_txt' parameter of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'soa' - empty": {
		"prefix": ["consul-configuration-dns-config-parameter-soa-empty"],
		"body": [
			"  soa {",
			"    $0",
			"  }",
			""
		],
		"description": "consul empty 'soa' parameter of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'soa' - full": {
		"prefix": ["consul-configuration-dns-config-parameter-soa-full"],
		"body": [
			"  soa {",
			"    // expire",
			"    // configure SOA Expire duration in seconds.",
			"    // default value is 86400, ie: 24 hours.",
			"    expire = ${1:<expire-in-seconds>}",
			"",
			"    // min_ttl",
			"    // configure SOA DNS minimum TTL.",
			"    // as explained in RFC-2308 this also controls negative cache TTL in most implementations.",
			"    // default value is 0, ie: no minimum delay or negative TTL.",
			"    min_ttl = ${2:<min-ttl-in-seconds>}",
			"",
			"    // refresh",
			"    // configure SOA Refresh duration in seconds.",
			"    // default value is 3600, ie: 1 hour.",
			"    refresh = ${3:<refresh-duration-in-seconds>}",
			"",
			"    // retry",
			"    // configures the Retry duration expressed in seconds.",
			"    // default value is 600, ie: 10 minutes.",
			"    retry = ${4:<retry-duration-in-seconds>}",
			"  }",
			"$0"
		],
		"description": "consul full 'soa' parameter of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'soa' - common": {
		"prefix": ["consul-configuration-dns-config-parameter-soa-common"],
		"body": [
			"  soa {",
			"  }",
			"$0"
		],
		"description": "consul common 'soa' parameter of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'soa' parameter 'expire'": {
		"prefix": ["consul-configuration-dns-config-parameter-soa-parameter-expire"],
		"body": [
			"    // expire",
			"    // configure SOA Expire duration in seconds.",
			"    // default value is 86400, ie: 24 hours.",
			"    expire = ${1:<expire-in-seconds>}",
			"$0"
		],
		"description": "consul templated 'expire' parameter of parameter 'soa' of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'soa' parameter 'min_ttl'": {
		"prefix": ["consul-configuration-dns-config-parameter-soa-parameter-min-ttl"],
		"body": [
			"    // min_ttl",
			"    // configure SOA DNS minimum TTL.",
			"    // as explained in RFC-2308 this also controls negative cache TTL in most implementations.",
			"    // default value is 0, ie: no minimum delay or negative TTL.",
			"    min_ttl = ${1:<min-ttl-in-seconds>}",
			"$0"
		],
		"description": "consul templated 'min_ttl' parameter of parameter 'soa' of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'soa' parameter 'refresh'": {
		"prefix": ["consul-configuration-dns-config-parameter-soa-parameter-refresh"],
		"body": [
			"    // refresh",
			"    // configure SOA Refresh duration in seconds.",
			"    // default value is 3600, ie: 1 hour.",
			"    refresh = ${1:<refresh-duration-in-seconds>}",
			"$0"
		],
		"description": "consul templated 'refresh' parameter of parameter 'soa' of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'soa' parameter 'retry'": {
		"prefix": ["consul-configuration-dns-config-parameter-soa-parameter-retry"],
		"body": [
			"    // retry",
			"    // configures the Retry duration expressed in seconds.",
			"    // default value is 600, ie: 10 minutes.",
			"    retry = ${1:<retry-duration-in-seconds>}",
			"$0"
		],
		"description": "consul templated 'retry' parameter of parameter 'soa' of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'use_cache'": {
		"prefix": ["consul-configuration-dns-config-parameter-use-cache"],
		"body": [
			"  // use_cache",
			"  // when set to true, DNS resolution will use the agent cache described in agent caching.",
			"  // this setting affects all service and prepared queries DNS requests.",
			"  // Implies 'allow_stale'.",
			"  use_cache = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'use_cache' parameter of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'cache_max_age'": {
		"prefix": ["consul-configuration-dns-config-parameter-cache-max-age"],
		"body": [
			"  // cache_max_age",
			"  // when use_cache is enabled, the agent will attempt to re-fetch the result from the servers if the cached value is older than this duration.",
			"  // see: agent caching.",
			"  cache_max_age = \"${1:<cache-max-age>}\"",
			"$0"
		],
		"description": "consul templated 'cache_max_age' parameter of configuration 'dns_config'"
	},
	"consul configuration 'dns_config' parameter 'prefer_namespace'": {
		"prefix": ["consul-configuration-dns-config-parameter-prefer-namespace"],
		"body": [
			"  // prefer_namespace",
			"  // ! enterprise feature !",
			"  // ! deprecated in Consul 1.11. use the canonical DNS format [https://www.consul.io/docs/discovery/dns#namespaced-partitioned-services] instead. !",
			"  // when set to true, in a DNS query for a service, the label between the domain and the service label will be treated as a namespace name instead of a datacenter.",
			"  // when set to false, the default, the behavior will be the same as non-Enterprise versions and will assume the label is the datacenter.",
			"  // see: https://www.consul.io/docs/discovery/dns#namespaced-services more details.",
			"  prefer_namespace = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'prefer_namespace' parameter of configuration 'dns_config'"
	},
	"consul configuration 'domain'": {
		"prefix": ["consul-configuration-domain"],
		"body": [
			"// domain",
			"// by default, Consul responds to DNS queries in the \"consul.\" domain.",
			"// this flag can be used to change that domain.",
			"// all queries in this domain are assumed to be handled by Consul and will not be recursively resolved.",
			"domain = \"${1:<domain-name>}\"",
			"$0"
		],
		"description": "consul templated 'domain' configuration"
	},
	"consul configuration 'enable_acl_replication'": {
		"prefix": ["consul-configuration-enable-acl-replication"],
		"body": [
			"// enable_acl_replication",
			"// ! deprecated in Consul 1.11. use the acl.enable_token_replication [https://www.consul.io/docs/agent/options#acl_enable_token_replication] field instead. !",
			"// when set on a Consul server, enables ACL replication without having to set the replication token via 'acl_replication_token'.",
			"// instead, enable ACL replication and then introduce the token using the agent token API on each server.",
			"// see 'acl_replication_token' [https://www.consul.io/docs/agent/options#acl_replication_token] for more details.",
			"// ! warning !",
			"// when enabling ACL token replication on the secondary datacenter, policies and roles already present in the secondary datacenter will be lost.",
			"// for production environments, consider configuring ACL replication in your initial datacenter bootstrapping process.",
			"enable_acl_replication = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'enable_acl_replication' configuration"
	},
	"consul configuration 'enable_agent_tls_for_checks'": {
		"prefix": ["consul-configuration-enable-agent-tls-for-checks"],
		"body": [
			"// enable_agent_tls_for_checks",
			"// when set, uses a subset of the agent's TLS configuration (key_file, cert_file, ca_file, ca_path, and server_name) to set up the client for HTTP or gRPC health checks.",
			"// this allows services requiring 2-way TLS to be checked using the agent's credentials.",
			"// this was added in Consul 1.0.1 and defaults to false.",
			"enable_agent_tls_for_checks = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'enable_agent_tls_for_checks' configuration"
	},
	"consul configuration 'enable_central_service_config'": {
		"prefix": ["consul-configuration-enable-central-service-config"],
		"body": [
			"// enable_central_service_config",
			"// when set, the Consul agent will look for any centralized service configuration that match a registering service instance.",
			"// if it finds any, the agent will merge the centralized defaults with the service instance configuration.",
			"// this allows for things like service protocol or proxy configuration to be defined centrally and inherited by any affected service registrations.",
			"// this defaults to false in versions of Consul prior to 1.9.0, and defaults to true in Consul 1.9.0 and later.",
			"enable_central_service_config = ${1|true,false|}",
			"$0"
		],
		"description": "consul templated 'enable_central_service_config' configuration"
	},



























	//
	// consul-replicate (https://github.com/hashicorp/consul-replicate)
	//
	"consul-replicate configuration - full": {
		"prefix": ["consul-replicate-configuration-full"],
		"body": [
			"consul {",
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${1|true,false|}",
			"    // username",
			"    username = \"${2:<consul-username>}\"",
			"    // password",
			"    password = \"${3:<consul-password>}\"",
			"  }",
			"",
			"  // address",
			"  // this is the address of the Consul agent.",
			"  // by default, this is 127.0.0.1:8500, which is the default bind and port for a local Consul agent.",
			"  // it is not recommended that you communicate directly with a Consul server, and instead communicate with the local Consul agent.",
			"  // there are many reasons for this, most importantly the Consul agent is able to multiplex",
			"  // connections to the Consul server and reduce the number of open HTTP connections.",
			"  // Additionally, it provides a 'well-known' IP address for which clients can connect.",
			"  address = \"${4:<consul-address>}\"",
			"",
			"  // token",
			"  // this is the ACL token to use when connecting to Consul.",
			"  // if you did not enable ACLs on your Consul cluster, you do not need to set this option.",
			"  // this option is also available via the environment variable 'CONSUL_TOKEN'.",
			"  token = \"${5:<consul-acl-token>}\"",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Replicate is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${6|true,false|}",
			"",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${7:<retry-attempts>}",
			"",
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff     = \"${8:<sleep-time-between-retry-attempts>}\"",
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${9:<max-sleep-time-between-retry-attempts>}\"",
			"  }",
			"",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${10|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${11|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Replicate will automatically combine them into an X509 certificate for you.",
			"    cert = \"${12:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Replicate will automatically combine them into an X509 certificate for you.",
			"    key  = \"${13:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${14:<path-to-ca-cert-file>}\"",
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${15:<path-to-ca-cert-directory>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${16:<sni-server-name>}\"",
			"  }",
			"}",
			"",
			"// exclude",
			"// this is the list of keys to exclude if they are found in the prefix.",
			"// this can be specified multiple times to exclude multiple keys from replication.",
			"exclude {",
			"  source = \"${17:<key-to-exclude-from-replication>}\"",
			"}",
			"",
			"// kill_signal",
			"// this is the signal to listen for to trigger a graceful stop.",
			"// setting this value to the empty string will cause Consul Replicate to not listen for any graceful stop signals.",
			"// defaults to \"SIGINT\"",
			"kill_signal = \"${18:<kill-signal>}\"",
			"",
			"// reload_signal",
			"// this is the signal to listen for to trigger a reload event.",
			"// setting this value to the empty string will cause Consul Replicate to not listen for any reload signals.",
			"// defaults to \"SIGHUP\".",
			"reload_signal = \"${19:<reload-signal>}\"",
			"",
			"// log_level",
			"// this is the log level.",
			"// if you find a bug in Consul Replicate, please enable debug logs so we can help identify the issue.",
			"// this is also available as a command line flag.",
			"log_level = \"${20:<log-level>}\"",
			"",
			"// max_stale",
			"// this is the maximum interval to allow 'stale' data.",
			"// by default, only the Consul leader will respond to queries; any requests to a follower will forward to the leader.",
			"// in large clusters with many requests, this is not as scalable, so this option allows any follower to respond to a query,",
			"// so long as the last-replicated data is within these bounds.",
			"// higher values result in less cluster load, but are more likely to have outdated data.",
			"max_stale = \"${21:<max-stale>}\"",
			"",
			"// pid_file",
			"// this is the path to store a PID file which will contain the process ID of the Consul Replicate process.",
			"// this is useful if you plan to send custom signals to the process.",
			"pid_file = \"${22:<path-to-pid-file>}\"",
			"",
			"// prefix",
			"// this is the prefix and datacenter to replicate and the resulting destination.",
			"prefix {",
			"  source      = \"${23:<source-key-prefix>}\"",
			"  datacenter  = \"${24:<destination-datacenter>}\"",
			"  destination = \"${25:<destination-key-prefix>}\"",
			"}",
			"",
			"// status_dir",
			"// this is the path in Consul to store replication and leader status.",
			"status_dir = \"${26:<path-to-status-directory>}\"",
			"",
			"syslog {",
			"  // enabled",
			"  // this enables syslog logging.",
			"  // specifying any other option also enables syslog logging.",
			"  enabled = \"${27:<syslog-enabled>}\"",
			"",
			"  // facility",
			"  // this is the name of the syslog facility to log to.",
			"  facility = \"${28:<syslog-facility>}\"",
			"}",
			"",
			"// wait",
			"// this is the quiescence timers; it defines the minimum and maximum amount of time to wait for the cluster to reach a consistent state",
			"// before rendering a replicating.",
			"// this is useful to enable in systems that have a lot of flapping, because it will reduce the the number of times a replication occurs.",
			"wait {",
			"  min = \"${29:<minimum-wait-for-consistent-cluster-state>}\"",
			"  max = \"${30:<maximum-wait-for-consistent-cluster-state>}\"",
			"}",
			"$0"
		],
		"description": "full consul-replicate configuration"
	},
	"consul-replicate configuration - common": {
		"prefix": ["consul-replicate-configuration-common"],
		"body": [
			"consul {",
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${1|true,false|}",
			"    // username",
			"    username = \"${2:<consul-username>}\"",
			"    // password",
			"    password = \"${3:<consul-password>}\"",
			"  }",
			"",
			"  // address",
			"  // this is the address of the Consul agent.",
			"  // by default, this is 127.0.0.1:8500, which is the default bind and port for a local Consul agent.",
			"  // it is not recommended that you communicate directly with a Consul server, and instead communicate with the local Consul agent.",
			"  // there are many reasons for this, most importantly the Consul agent is able to multiplex",
			"  // connections to the Consul server and reduce the number of open HTTP connections.",
			"  // Additionally, it provides a 'well-known' IP address for which clients can connect.",
			"  address = \"${4:<consul-address>}\"",
			"",
			"  // token",
			"  // this is the ACL token to use when connecting to Consul.",
			"  // if you did not enable ACLs on your Consul cluster, you do not need to set this option.",
			"  // this option is also available via the environment variable 'CONSUL_TOKEN'.",
			"  token = \"${5:<consul-acl-token>}\"",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Replicate is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${6:<retry-attempts>}",
			"  }",
			"",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${7|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${8|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Replicate will automatically combine them into an X509 certificate for you.",
			"    cert = \"${9:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Replicate will automatically combine them into an X509 certificate for you.",
			"    key  = \"${10:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${11:<path-to-ca-cert-file>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${12:<sni-server-name>}\"",
			"  }",
			"}",
			"",
			"// log_level",
			"// this is the log level.",
			"// if you find a bug in Consul Replicate, please enable debug logs so we can help identify the issue.",
			"// this is also available as a command line flag.",
			"log_level = \"${13:warn}\"",
			"",
			"// pid_file",
			"// this is the path to store a PID file which will contain the process ID of the Consul Replicate process.",
			"// this is useful if you plan to send custom signals to the process.",
			"pid_file = \"${14:<path-to-pid-file>}\"",
			"",
			"// prefix",
			"// this is the prefix and datacenter to replicate and the resulting destination.",
			"prefix {",
			"  source      = \"${15:<source-key-prefix>}\"",
			"  datacenter  = \"${16:<destination-datacenter>}\"",
			"  destination = \"${17:<destination-key-prefix>}\"",
			"}",
			"",
			"// status_dir",
			"// this is the path in Consul to store replication and leader status.",
			"status_dir = \"${18:<path-to-status-directory>}\"",
			"$0"
		],
		"description": "common consul-replicate configuration"
	},
	"consul-replicate configuration 'consul' - empty": {
		"prefix": ["consul-replicate-configuration-consul-empty"],
		"body": [
			"consul {",
			"  $0",
			"}",
			""
		],
		"description": "consul-replicate empty 'consul' configuration"
	},
	"consul-replicate configuration 'consul' - full": {
		"prefix": ["consul-replicate-configuration-consul-full"],
		"body": [
			"consul {",
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${1|true,false|}",
			"    // username",
			"    username = \"${2:<consul-username>}\"",
			"    // password",
			"    password = \"${3:<consul-password>}\"",
			"  }",
			"",
			"  // address",
			"  // this is the address of the Consul agent.",
			"  // by default, this is 127.0.0.1:8500, which is the default bind and port for a local Consul agent.",
			"  // it is not recommended that you communicate directly with a Consul server, and instead communicate with the local Consul agent.",
			"  // there are many reasons for this, most importantly the Consul agent is able to multiplex",
			"  // connections to the Consul server and reduce the number of open HTTP connections.",
			"  // Additionally, it provides a 'well-known' IP address for which clients can connect.",
			"  address = \"${4:<consul-address>}\"",
			"",
			"  // token",
			"  // this is the ACL token to use when connecting to Consul.",
			"  // if you did not enable ACLs on your Consul cluster, you do not need to set this option.",
			"  // this option is also available via the environment variable 'CONSUL_TOKEN'.",
			"  token = \"${5:<consul-acl-token>}\"",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Replicate is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${6|true,false|}",
			"",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${7:<retry-attempts>}",
			"",
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff     = \"${8:<sleep-time-between-retry-attempts>}\"",
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${9:<max-sleep-time-between-retry-attempts>}\"",
			"  }",
			"",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${10|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${11|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Replicate will automatically combine them into an X509 certificate for you.",
			"    cert = \"${12:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Replicate will automatically combine them into an X509 certificate for you.",
			"    key  = \"${13:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${14:<path-to-ca-cert-file>}\"",
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${15:<path-to-ca-cert-directory>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${16:<sni-server-name>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "consul-replicate full 'consul' configuration"
	},
	"consul-replicate configuration 'consul' - common": {
		"prefix": ["consul-replicate-configuration-consul-common"],
		"body": [
			"consul {",
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${1|true,false|}",
			"    // username",
			"    username = \"${2:<consul-username>}\"",
			"    // password",
			"    password = \"${3:<consul-password>}\"",
			"  }",
			"",
			"  // address",
			"  // this is the address of the Consul agent.",
			"  // by default, this is 127.0.0.1:8500, which is the default bind and port for a local Consul agent.",
			"  // it is not recommended that you communicate directly with a Consul server, and instead communicate with the local Consul agent.",
			"  // there are many reasons for this, most importantly the Consul agent is able to multiplex",
			"  // connections to the Consul server and reduce the number of open HTTP connections.",
			"  // Additionally, it provides a 'well-known' IP address for which clients can connect.",
			"  address = \"${4:<consul-address>}\"",
			"",
			"  // token",
			"  // this is the ACL token to use when connecting to Consul.",
			"  // if you did not enable ACLs on your Consul cluster, you do not need to set this option.",
			"  // this option is also available via the environment variable 'CONSUL_TOKEN'.",
			"  token = \"${5:<consul-acl-token>}\"",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Replicate is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${6:<retry-attempts>}",
			"  }",
			"",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${7|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${8|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Replicate will automatically combine them into an X509 certificate for you.",
			"    cert = \"${9:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Replicate will automatically combine them into an X509 certificate for you.",
			"    key  = \"${10:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${11:<path-to-ca-cert-file>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${12:<sni-server-name>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "consul-replicate common 'consul' configuration"
	},
	"consul-replicate configuration 'consul' parameter 'auth' - empty": {
		"prefix": ["consul-replicate-configuration-consul-parameter-auth-empty"],
		"body": [
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    $0",
			"  }",
			""
		],
		"description": "consul-replicate empty 'auth' parameter of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'auth' - full": {
		"prefix": ["consul-replicate-configuration-consul-parameter-auth-full"],
		"body": [
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${1|true,false|}",
			"    // username",
			"    username = \"${2:<consul-username>}\"",
			"    // password",
			"    password = \"${3:<consul-password>}\"",
			"  }",
			"$0"
		],
		"description": "consul-replicate full 'auth' parameter of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'auth' - common": {
		"prefix": ["consul-replicate-configuration-consul-parameter-auth-common"],
		"body": [
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${1|true,false|}",
			"    // username",
			"    username = \"${2:<consul-username>}\"",
			"    // password",
			"    password = \"${3:<consul-password>}\"",
			"  }",
			"$0"
		],
		"description": "consul-replicate common 'auth' parameter of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'auth' parameter 'enabled'": {
		"prefix": ["consul-replicate-configuration-consul-parameter-auth-parameter-enabled"],
		"body": [
			"    // enabled",
			"    enabled = ${1|true,false|}",
			"$0"
		],
		"description": "consul-replicate templated 'enabled' parameter of parameter 'auth' of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'auth' parameter 'username'": {
		"prefix": ["consul-replicate-configuration-consul-parameter-auth-parameter-username"],
		"body": [
			"    // username",
			"    username = \"${1:<consul-username>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'username' parameter of parameter 'auth' of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'auth' parameter 'password'": {
		"prefix": ["consul-replicate-configuration-consul-parameter-auth-parameter-password"],
		"body": [
			"    // password",
			"    password = \"${1:<consul-password>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'password' parameter of parameter 'auth' of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'address'": {
		"prefix": ["consul-replicate-configuration-consul-parameter-address"],
		"body": [
			"  // address",
			"  // this is the address of the Consul agent.",
			"  // by default, this is 127.0.0.1:8500, which is the default bind and port for a local Consul agent.",
			"  // it is not recommended that you communicate directly with a Consul server, and instead communicate with the local Consul agent.",
			"  // there are many reasons for this, most importantly the Consul agent is able to multiplex",
			"  // connections to the Consul server and reduce the number of open HTTP connections.",
			"  // Additionally, it provides a 'well-known' IP address for which clients can connect.",
			"  address = \"${1:<consul-address>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'address' parameter of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'token'": {
		"prefix": ["consul-replicate-configuration-consul-parameter-token"],
		"body": [
			"  // token",
			"  // this is the ACL token to use when connecting to Consul.",
			"  // if you did not enable ACLs on your Consul cluster, you do not need to set this option.",
			"  // this option is also available via the environment variable 'CONSUL_TOKEN'.",
			"  token = \"${1:<consul-acl-token>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'token' parameter of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'retry' - empty": {
		"prefix": ["consul-replicate-configuration-consul-parameter-retry-empty"],
		"body": [
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Replicate is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    $0",
			"  }",
			""
		],
		"description": "consul-replicate empty 'retry' parameter of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'retry' - full": {
		"prefix": ["consul-replicate-configuration-consul-parameter-retry-full"],
		"body": [
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Replicate is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${1|true,false|}",
			"",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${2:<retry-attempts>}",
			"",
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff     = \"${3:<sleep-time-between-retry-attempts>}\"",
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${4:<max-sleep-time-between-retry-attempts>}\"",
			"  }",
			"$0"
		],
		"description": "consul-replicate full 'retry' parameter of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'retry' - common": {
		"prefix": ["consul-replicate-configuration-consul-parameter-retry-common"],
		"body": [
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Replicate is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${1:<retry-attempts>}",
			"  }",
			"$0"
		],
		"description": "consul-replicate common 'retry' parameter of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'retry' parameter 'enabled'": {
		"prefix": ["consul-replicate-configuration-consul-parameter-retry-parameter-enabled"],
		"body": [
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${1|true,false|}",
			"$0"
		],
		"description": "consul-replicate templated 'enabled' parameter of parameter 'retry' of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'retry' parameter 'attempts'": {
		"prefix": ["consul-replicate-configuration-consul-parameter-retry-parameter-attempts"],
		"body": [
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${1:<retry-attempts>}",
			"$0"
		],
		"description": "consul-replicate templated 'attempts' parameter of parameter 'retry' of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'retry' parameter 'backoff'": {
		"prefix": ["consul-replicate-configuration-consul-parameter-retry-parameter-backoff"],
		"body": [
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff = \"${1:<sleep-time-between-retry-attempts>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'backoff' parameter of parameter 'retry' of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'retry' parameter 'max_backoff'": {
		"prefix": ["consul-replicate-configuration-consul-parameter-retry-parameter-max-backoff"],
		"body": [
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${1:<max-sleep-time-between-retry-attempts>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'max_backoff' parameter of parameter 'retry' of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'ssl' - empty": {
		"prefix": ["consul-replicate-configuration-consul-parameter-ssl-empty"],
		"body": [
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    $0",
			"  }",
			""
		],
		"description": "consul-replicate empty 'ssl' parameter of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'ssl' - full": {
		"prefix": ["consul-replicate-configuration-consul-parameter-ssl-full"],
		"body": [
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${1|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${2|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Replicate will automatically combine them into an X509 certificate for you.",
			"    cert = \"${3:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Replicate will automatically combine them into an X509 certificate for you.",
			"    key  = \"${4:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${5:<path-to-ca-cert-file>}\"",
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${6:<path-to-ca-cert-directory>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${7:<sni-server-name>}\"",
			"  }",
			"$0"
		],
		"description": "consul-replicate full 'ssl' parameter of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'ssl' - common": {
		"prefix": ["consul-replicate-configuration-consul-parameter-ssl-common"],
		"body": [
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${1|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${2|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Replicate will automatically combine them into an X509 certificate for you.",
			"    cert = \"${3:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Replicate will automatically combine them into an X509 certificate for you.",
			"    key  = \"${4:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${5:<path-to-ca-cert-file>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${6:<sni-server-name>}\"",
			"  }",
			"$0"
		],
		"description": "consul-replicate common 'ssl' parameter of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'ssl' parameter 'enabled'": {
		"prefix": ["consul-replicate-configuration-consul-parameter-ssl-parameter-enabled"],
		"body": [
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${1|true,false|}",
			"$0"
		],
		"description": "consul-replicate templated 'enabled' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'ssl' parameter 'verify'": {
		"prefix": ["consul-replicate-configuration-consul-parameter-ssl-parameter-verify"],
		"body": [
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${1|true,false|}",
			"$0"
		],
		"description": "consul-replicate templated 'verify' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'ssl' parameter 'cert'": {
		"prefix": ["consul-replicate-configuration-consul-parameter-ssl-parameter-cert"],
		"body": [
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Replicate will automatically combine them into an X509 certificate for you.",
			"    cert = \"${1:<path-to-client-cert>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'cert' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'ssl' parameter 'key'": {
		"prefix": ["consul-replicate-configuration-consul-parameter-ssl-parameter-key"],
		"body": [
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Replicate will automatically combine them into an X509 certificate for you.",
			"    key = \"${1:<path-to-client-key>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'key' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'ssl' parameter 'ca_cert'": {
		"prefix": ["consul-replicate-configuration-consul-parameter-ssl-parameter-ca-cert"],
		"body": [
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${1:<path-to-ca-cert-file>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'ca_cert' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'ssl' parameter 'ca_path'": {
		"prefix": ["consul-replicate-configuration-consul-parameter-ssl-parameter-ca-path"],
		"body": [
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${1:<path-to-ca-cert-directory>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'ca_path' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"consul-replicate configuration 'consul' parameter 'ssl' parameter 'server_name'": {
		"prefix": ["consul-replicate-configuration-consul-parameter-ssl-parameter-server-name"],
		"body": [
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${1:<sni-server-name>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'server_name' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"consul-replicate configuration 'exclude'": {
		"prefix": ["consul-replicate-configuration-exclude"],
		"body": [
			"// exclude",
			"// this is the list of keys to exclude if they are found in the prefix.",
			"// this can be specified multiple times to exclude multiple keys from replication.",
			"exclude {",
			"  source = \"${1:<key-to-exclude-from-replication>}\"",
			"}",
			"$0"
		],
		"description": "consul-replicate templated 'exclude' configuration"
	},
	"consul-replicate configuration 'kill_signal'": {
		"prefix": ["consul-replicate-configuration-kill-signal"],
		"body": [
			"// kill_signal",
			"// this is the signal to listen for to trigger a graceful stop.",
			"// setting this value to the empty string will cause Consul Replicate to not listen for any graceful stop signals.",
			"// defaults to \"SIGINT\"",
			"kill_signal = \"${1:<kill-signal>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'kill_signal' configuration"
	},
	"consul-replicate configuration 'reload_signal'": {
		"prefix": ["consul-replicate-configuration-reload-signal"],
		"body": [
			"// reload_signal",
			"// this is the signal to listen for to trigger a reload event.",
			"// setting this value to the empty string will cause Consul Replicate to not listen for any reload signals.",
			"// defaults to \"SIGHUP\".",
			"reload_signal = \"${1:<reload-signal>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'reload_signal' configuration"
	},
	"consul-replicate configuration 'log_level'": {
		"prefix": ["consul-replicate-configuration-log-level"],
		"body": [
			"// log_level",
			"// this is the log level.",
			"// this is also available as a command line flag.",
			"// valid options include (in order of verbosity): trace, debug, info, warn, err",
			"log_level = \"${1:<log-level>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'log_level' configuration"
	},
	"consul-replicate configuration 'max_stale'": {
		"prefix": ["consul-replicate-configuration-max-stale"],
		"body": [
			"// max_stale",
			"// this is the maximum interval to allow 'stale' data.",
			"// by default, only the Consul leader will respond to queries; any requests to a follower will forward to the leader.",
			"// in large clusters with many requests, this is not as scalable, so this option allows any follower to respond to a query,",
			"// so long as the last-replicated data is within these bounds.",
			"// higher values result in less cluster load, but are more likely to have outdated data.",
			"max_stale = \"${1:<max-stale>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'max_stale' configuration"
	},
	"consul-replicate configuration 'pid_file'": {
		"prefix": ["consul-replicate-configuration-pid-file"],
		"body": [
			"// pid_file",
			"// this is the path to store a PID file which will contain the process ID of the Consul Replicate process.",
			"// this is useful if you plan to send custom signals to the process.",
			"pid_file = \"${1:<path-to-pid-file>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'pid_file' configuration"
	},
	"consul-replicate configuration 'prefix'": {
		"prefix": ["consul-replicate-configuration-prefix"],
		"body": [
			"// prefix",
			"// this is the prefix and datacenter to replicate and the resulting destination.",
			"prefix {",
			"  source      = \"${1:<source-key-prefix>}\"",
			"  datacenter  = \"${2:<destination-datacenter>}\"",
			"  destination = \"${3:<destination-key-prefix>}\"",
			"}",
			"$0"
		],
		"description": "consul-replicate templated 'prefix' configuration"
	},
	"consul-replicate configuration 'status_dir'": {
		"prefix": ["consul-replicate-configuration-status-dir"],
		"body": [
			"// status_dir",
			"// this is the path in Consul to store replication and leader status.",
			"status_dir = \"${1:<path-to-status-directory>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'status_dir' configuration"
	},
	"consul-replicate configuration 'syslog' - empty": {
		"prefix": ["consul-replicate-configuration-syslog-empty"],
		"body": [
			"// this block defines the configuration for connecting to a syslog server for logging.",
			"syslog {",
			"  $0",
			"}",
			""
		],
		"description": "consul-replicate empty 'syslog' configuration"
	},
	"consul-replicate configuration 'syslog' - full": {
		"prefix": ["consul-replicate-configuration-syslog-full"],
		"body": [
			"// this block defines the configuration for connecting to a syslog server for logging.",
			"syslog {",
			"  // enabled",
			"  // this enables syslog logging.",
			"  // specifying any other option also enables syslog logging.",
			"  enabled = \"${1:<syslog-enabled>}\"",
			"",
			"  // facility",
			"  // this is the name of the syslog facility to log to.",
			"  facility = \"${2:<syslog-facility>}\"",
			"}",
			"$0"
		],
		"description": "consul-replicate full 'syslog' configuration"
	},
	"consul-replicate configuration 'syslog' - common": {
		"prefix": ["consul-replicate-configuration-syslog-common"],
		"body": [
			"// this block defines the configuration for connecting to a syslog server for logging.",
			"syslog {",
			"  // enabled",
			"  // this enables syslog logging.",
			"  // specifying any other option also enables syslog logging.",
			"  enabled = \"${1:<syslog-enabled>}\"",
			"",
			"  // facility",
			"  // this is the name of the syslog facility to log to.",
			"  facility = \"${2:<syslog-facility>}\"",
			"}",
			"$0"
		],
		"description": "consul-replicate common 'syslog' configuration"
	},
	"consul-replicate configuration 'syslog' parameter 'enabled'": {
		"prefix": ["consul-replicate-configuration-syslog-parameter-enabled"],
		"body": [
			"  // enabled",
			"  // this enables syslog logging.",
			"  // specifying any other option also enables syslog logging.",
			"  enabled = \"${1:<syslog-enabled>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'enabled' parameter of configuration 'syslog'"
	},
	"consul-replicate configuration 'syslog' parameter 'facility'": {
		"prefix": ["consul-replicate-configuration-syslog-parameter-facility"],
		"body": [
			"  // facility",
			"  // this is the name of the syslog facility to log to.",
			"  facility = \"${1:<syslog-facility>}\"",
			"$0"
		],
		"description": "consul-replicate templated 'facility' parameter of configuration 'syslog'"
	},
	"consul-replicate configuration 'wait'": {
		"prefix": ["consul-replicate-configuration-wait"],
		"body": [
			"// wait",
			"// this is the quiescence timers; it defines the minimum and maximum amount of time to wait for the cluster to reach a consistent state",
			"// before rendering a replicating.",
			"// this is useful to enable in systems that have a lot of flapping, because it will reduce the the number of times a replication occurs.",
			"wait {",
			"  min = \"${1:<minimum-wait-for-consistent-cluster-state>}\"",
			"  max = \"${2:<maximum-wait-for-consistent-cluster-state>}\"",
			"}",
			"$0"
		],
		"description": "consul-replicate templated 'wait' configuration"
	},
	//
	// consul-template (https://github.com/hashicorp/consul-template)
	//
	"consul-template configuration - full": {
		"prefix": ["consul-template-configuration-full"],
		"body": [
			"// kill_signal",
			"// this is the signal to listen for to trigger a graceful stop.",
			"// setting this value to the empty string will cause Consul Template to not listen for any graceful stop signals.",
			"// defaults to \"SIGINT\"",
			"kill_signal = \"${1:<kill-signal>}\"",
			"",
			"// reload_signal",
			"// this is the signal to listen for to trigger a reload event.",
			"// setting this value to the empty string will cause Consul Template to not listen for any reload signals.",
			"// defaults to \"SIGHUP\".",
			"reload_signal = \"${2:<reload-signal>}\"",
			"",
			"// log_level",
			"// this is the log level.",
			"// this is also available as a command line flag.",
			"// valid options include (in order of verbosity): trace, debug, info, warn, err",
			"log_level = \"${3:<log-level>}\"",
			"",
			"// max_stale",
			"// this is the maximum interval to allow 'stale' data. By default, only the Consul leader will respond to queries;",
			"// any requests to a follower will forward to the leader.",
			"// in large clusters with many requests, this is not as scalable, so this option allows any follower to respond to a query,",
			"// so long as the last-replicated data is within these bounds.",
			"// higher values result in less cluster load, but are more likely to have outdated data.",
			"max_stale = \"${4:<max-stale>}\"",
			"",
			"// block_query_wait",
			"// this is amount of time in seconds to do a blocking query for.",
			"// many endpoints in Consul support a feature known as 'blocking queries'.",
			"// a blocking query is used to wait for a potential change using long polling.",
			"block_query_wait = \"${5:<max-stale>}\"",
			"",
			"// wait",
			"// this is the quiescence timers; it defines the minimum and maximum amount of time to wait for the cluster to reach a consistent state",
			"// before rendering a replicating.",
			"// this is useful to enable in systems that have a lot of flapping, because it will reduce the the number of times a replication occurs.",
			"wait {",
			"  min = \"${6:<minimum-wait-for-consistent-cluster-state>}\"",
			"  max = \"${7:<maximum-wait-for-consistent-cluster-state>}\"",
			"}",
			"",
			"// pid_file",
			"// this is the path to store a PID file which will contain the process ID of the Consul Template process.",
			"// this is useful if you plan to send custom signals to the process.",
			"pid_file = \"${8:<path-to-pid-file>}\"",
			"",
			"// this block defines the configuration for connecting to a syslog server for logging.",
			"syslog {",
			"  // enabled",
			"  // this enables syslog logging.",
			"  // specifying any other option also enables syslog logging.",
			"  enabled = \"${9:<syslog-enabled>}\"",
			"",
			"  // facility",
			"  // this is the name of the syslog facility to log to.",
			"  facility = \"${10:<syslog-facility>}\"",
			"}",
			"",
			"logfile {",
			"  // path",
			"  // if a path is specified, the feature is enabled",
			"  // please refer to the documentation for the '-log-file' CLI flag for more information about its behaviour.",
			"  path = \"${11:<path-to-logfile>}\"",
			"",
			"  // log_rotate_bytes",
			"  // this allow you to control the number of bytes that should be written to a log before it needs to be rotated.",
			"  // unless specified, there is no limit to the number of bytes that can be written to a log file.",
			"  log_rotate_bytes = ${12:<log-rotate-bytes>}",
			"",
			"  // log_rotate_duration",
			"  // this lets you control time based rotation.",
			"  // defaults to \"24h\".",
			"  log_rotate_duration = ${13:<log-rotate-duration>}",
			"",
			"  // log_rotate_max_files",
			"  // this lets you control the maximum number of older log file archives to keep.",
			"  // set to -1 to discard old log files when a new one is created",
			"  // defaults to 0 (no files are ever deleted).",
			"  log_rotate_max_files = ${14:<log-rotate-max-files>}",
			"}",
			"",
			"consul {",
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${15|true,false|}",
			"    // username",
			"    username = \"${16:<consul-username>}\"",
			"    // password",
			"    password = \"${17:<consul-password>}\"",
			"  }",
			"",
			"  // address",
			"  // this is the address of the Consul agent.",
			"  // by default, this is 127.0.0.1:8500, which is the default bind and port for a local Consul agent.",
			"  // it is not recommended that you communicate directly with a Consul server, and instead communicate with the local Consul agent.",
			"  // there are many reasons for this, most importantly the Consul agent is able to multiplex",
			"  // connections to the Consul server and reduce the number of open HTTP connections.",
			"  // Additionally, it provides a 'well-known' IP address for which clients can connect.",
			"  address = \"${18:<consul-address>}\"",
			"",
			"  // namespace",
			"  // this is a Consul Enterprise namespace to use for reading/writing.",
			"  // This can also be set via the 'CONSUL_NAMESPACE' environment variable.",
			"  // BETA: this is to be considered a beta feature as it has had limited testing",
			"  namespace = \"${19:<consul-namespace>}\"",
			"",
			"  // token",
			"  // this is the ACL token to use when connecting to Consul.",
			"  // if you did not enable ACLs on your Consul cluster, you do not need to set this option.",
			"  // this option is also available via the environment variable 'CONSUL_TOKEN'.",
			"  token = \"${20:<consul-acl-token>}\"",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Template is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${21|true,false|}",
			"",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${22:<retry-attempts>}",
			"",
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff     = \"${23:<sleep-time-between-retry-attempts>}\"",
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${24:<max-sleep-time-between-retry-attempts>}\"",
			"  }",
			"",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${25|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${26|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    cert = \"${27:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    key  = \"${28:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${29:<path-to-ca-cert-file>}\"",
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${30:<path-to-ca-cert-directory>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${31:<sni-server-name>}\"",
			"  }",
			"}",
			"",
			"consul {",
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${1|true,false|}",
			"    // username",
			"    username = \"${2:<consul-username>}\"",
			"    // password",
			"    password = \"${3:<consul-password>}\"",
			"  }",
			"",
			"  // address",
			"  // this is the address of the Consul agent.",
			"  // by default, this is 127.0.0.1:8500, which is the default bind and port for a local Consul agent.",
			"  // it is not recommended that you communicate directly with a Consul server, and instead communicate with the local Consul agent.",
			"  // there are many reasons for this, most importantly the Consul agent is able to multiplex",
			"  // connections to the Consul server and reduce the number of open HTTP connections.",
			"  // Additionally, it provides a 'well-known' IP address for which clients can connect.",
			"  address = \"${4:<consul-address>}\"",
			"",
			"  // namespace",
			"  // this is a Consul Enterprise namespace to use for reading/writing.",
			"  // This can also be set via the 'CONSUL_NAMESPACE' environment variable.",
			"  // BETA: this is to be considered a beta feature as it has had limited testing",
			"  namespace = \"${5:<consul-namespace>}\"",
			"",
			"  // token",
			"  // this is the ACL token to use when connecting to Consul.",
			"  // if you did not enable ACLs on your Consul cluster, you do not need to set this option.",
			"  // this option is also available via the environment variable 'CONSUL_TOKEN'.",
			"  token = \"${6:<consul-acl-token>}\"",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Template is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${7|true,false|}",
			"",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${8:<retry-attempts>}",
			"",
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff     = \"${9:<sleep-time-between-retry-attempts>}\"",
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${10:<max-sleep-time-between-retry-attempts>}\"",
			"  }",
			"",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${11|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${12|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    cert = \"${13:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    key  = \"${14:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${15:<path-to-ca-cert-file>}\"",
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${16:<path-to-ca-cert-directory>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${17:<sni-server-name>}\"",
			"  }",
			"}",
			"",
			"vault {",
			"  // address",
			"  // this is the address of the Vault leader.",
			"  // the protocol (http(s)) portion of the address is required.",
			"  address = \"${18:<vault-address>}\"",
			"",
			"  // namespace",
			"  // this is a Vault Enterprise namespace to use for reading/writing secrets.",
			"  // this value can also be specified via the environment variable 'VAULT_NAMESPACE'.",
			"  namespace = \"${19:<vault-namespace>}\"",
			"",
			"  // token",
			"  // this is the token to use when communicating with the Vault server.",
			"  // like other tools that integrate with Vault, Consul Template makes the assumption that you provide it with a Vault token;",
			"  // it does not have the incorporated logic to generate tokens via Vault's auth methods.",
			"  // this value can also be specified via the environment variable 'VAULT_TOKEN'.",
			"  // it is highly recommended that you do not put your token in plain-text in a configuration file.",
			"  // when using a token from Vault Agent, the vault_agent_token_file setting should be used instead, as that will take precedence over this field.",
			"  token = \"${20:<vault-token>}\"",
			"",
			"  // vault_agent_token_file",
			"  // this tells Consul Template to load the Vault token from the contents of a file.",
			"  // if this field is specified:",
			"  //   - by default Consul Template will not try to renew the Vault token, if you want it",
			"  // to renew you will need to specify renew_token = true as below.",
			"  //   - Consul Template will periodically stat the file and update the token if it has changed.",
			"  vault_agent_token_file = \"${21:<vault-agent-token-file>}\"",
			"",
			"  // unwrap_token",
			"  // this tells Consul Template that the provided token is actually a wrapped",
			"  // token that should be unwrapped using Vault's cubbyhole response wrapping before being used.",
			"  // please see Vault's cubbyhole response wrapping documentation for more information.",
			"  unwrap_token = \"${22:<vault-unwrap-token>}\"",
			"",
			"  // default_lease_duration",
			"  // the default lease duration Consul Template will use on a Vault secret that does not have a lease duration.",
			"  // this is used to calculate the sleep duration for rechecking a Vault secret value.",
			"  // defaults to 5 minutes.",
			"  default_lease_duration = \"${23:<default-lease-duration>}\"",
			"",
			"  // renew_token",
			"  // this option tells Consul Template to automatically renew the Vault token given.",
			"  // if you are unfamiliar with Vault's architecture, Vault requires tokens be renewed at some regular interval or they will be revoked.",
			"  // Consul Template will automatically renew the token at half the lease duration of the token.",
			"  // the default value is true, but this option can be disabled if you want to renew the Vault token using an out-of-band process.",
			"  // note that secrets specified in a template (using {{secret}} for example) are always renewed, even if this option is set to false.",
			"  // this option only applies to the top-level Vault token itself.",
			"  renew_token = ${24|true,false|}",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Template is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${25|true,false|}",
			"",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${26:<retry-attempts>}",
			"",
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff     = \"${27:<sleep-time-between-retry-attempts>}\"",
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${28:<max-sleep-time-between-retry-attempts>}\"",
			"  }",
			"",
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${29|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${30|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    cert = \"${31:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    key  = \"${32:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${33:<path-to-ca-cert-file>}\"",
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${34:<path-to-ca-cert-directory>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${35:<sni-server-name>}\"",
			"  }",
			"}",
			"",
			"template {",
			"  // source",
			"  // this is the source file on disk to use as the input template.",
			"  // this is often called the 'Consul Template template'.",
			"  // this option is required if not using the 'contents' option.",
			"  source   = \"${36:<path-to-template-file>}\"",
			"  // contents",
			"  // this option allows embedding the contents of a template in the configuration file rather then supplying the 'source' path to the template file.",
			"  // this is useful for short templates.",
			"  // this option is mutually exclusive with the 'source' option.",
			"  contents = \"${37:<embedded-content-of-template>}\"",
			"",
			"  // destination",
			"  // this is the destination path on disk where the source template will render.",
			"  // if the parent directories do not exist, Consul Template will attempt to create them, unless create_dest_dirs is false.",
			"  destination = \"${38:<path-to-rendered-file>}\"",
			"",
			"  // create_dest_dirs",
			"  // this options tells Consul Template to create the parent directories of the destination path if they do not exist.",
			"  // defaults to true.",
			"  create_dest_dirs = ${39|true,false|}",
			"",
			"  // command",
			"  // this is the optional command to run when the template is rendered.",
			"  // the command will only run if the resulting template changes.",
			"  // The command must return within 30s (configurable), and it must have a successful exit code.",
			"  // Consul Template is not a replacement for a process monitor or init system.",
			"  // please see the 'commands' section in the README for more.",
			"  command         = \"${40:<command-to-run-after-rendering>}\"",
			"  // command_timeout",
			"  // this is the maximum amount of time to wait for the optional command to return.",
			"  // if you set the timeout to 0s the command is run in the background without monitoring it for errors.",
			"  // if also using Once, consul-template can exit before the command is finished.",
			"  // defaults to 30s.",
			"  command_timeout = \"${41:<command-timeout>}\"",
			"",
			"  // error_on_missing_key",
			"  // exit with an error when accessing a struct or map field/key that does not exist.",
			"  // the default behavior will print '<no value>' when accessing a field that does not exist.",
			"  // it is highly recommended you set this to 'true' when retrieving secrets from Vault.",
			"  error_on_missing_key = ${42|true,false|}",
			"",
			"  // perms",
			"  // this is the permission to render the file.",
			"  // if this option is left unspecified, Consul Template will attempt to match the permissions of the file that already exists at the destination path.",
			"  // if no file exists at that path, the permissions are 0644.",
			"  perms = \"${43:<permission-to-render-the-file>}\"",
			"",
			"  // backup",
			"  // this option backs up the previously rendered template at the destination path before writing a new one.",
			"  // it keeps exactly one backup.",
			"  // this option is useful for preventing accidental changes to the data without having a rollback strategy.",
			"  backup = ${44|true,false|}",
			"",
			"  // delimiter",
			"  // these are the delimiters to use in the template.",
			"  // the default is \"{{\" and \"}}\", but for some templates, it may be easier to use a different delimiter that does not conflict with the output file itself.",
			"  left_delimiter  = \"${45:<left-delimiter>}\"",
			"  right_delimiter = \"${46:<right-delimiter>}\"",
			"",
			"  // function_denylist",
			"  // these are functions that are not permitted in the template.",
			"  // if a template includes one of these functions, it will exit with an error.",
			"  function_denylist = [${47:<function1>},${48:<function2>},${49:<functionN>}]",
			"",
			"  // sandbox_path",
			"  // if a sandbox path is provided, any path provided to the `file` function is checked that it falls within the sandbox path.",
			"  // relative paths that try to traverse outside the sandbox path will exit with an error.",
			"  sandbox_path = \"${50:<path-to-sandbox>}\"",
			"",
			"  // wait",
			"  // this is the `minimum(:maximum)` to wait before rendering a new template to disk and triggering a command, separated by a colon (`:`)",
			"  // if the optional maximum value is omitted, it is assumed to be 4x the required minimum value.",
			"  // this is a numeric time with a unit suffix (\"5s\").",
			"  // there is no default value.",
			"  // the wait value for a template takes precedence over any globally-configured wait.",
			"  wait {",
			"    min = \"${51:<minimum-wait-for-rendering-new-template>}\"",
			"    max = \"${52:<maximum-wait-for-rendering-new-template>}\"",
			"  }",
			"}",
			"",
			"// once",
			"// configure Consul Template to execute each template exactly once and exits.",
			"once = ${53|true,false|}",
			"",
			"deduplicate {",
			"  // enabled",
			"  // this enables de-duplication mode. Specifying any other options also enables de-duplication mode.",
			"  enabled = ${54|true,false|}",
			"",
			"  // prefix",
			"  // this is the prefix to the path in Consul's KV store where de-duplication templates will be pre-rendered and stored.",
			"  prefix = \"${55:<kv-store-prefix>}\"",
			"}",
			"",
			"exec {",
			"  // command",
			"  // this is the command to exec as a child process.",
			"  // there can be only one command per Consul Template process.",
			"  command = \"${56:<command-to-exec>}\"",
			"",
			"  // splay",
			"  // this is a random splay to wait before killing the command.",
			"  // the default value is 0 (no wait), but large clusters should consider setting a splay value",
			"  // to prevent all child processes from reloading at the same time when data changes occur.",
			"  // when this value is set to non-zero, Consul Template will wait a random period of time up to the splay value before reloading",
			"  // or killing the child process. This can be used to prevent the thundering herd problem on applications that do not gracefully reload.",
			"  splay = \"${57:<time-to-wait-before-killing-the-command>}\"",
			"",
			"  env {",
			"    // pristine",
			"    // this specifies if the child process should not inherit the parent process's environment.",
			"    // by default, the child will have full access to the environment variables of the parent.",
			"    // setting this to true will send only the values specified in 'custom' to the child process.",
			"    pristine = ${58|true,false|}",
			"",
			"    // custom",
			"    // this specifies additional custom environment variables in the form shown below to inject into the child's runtime environment.",
			"    // if a custom environment variable shares its name with a system environment variable, the custom environment variable takes precedence.",
			"    // even if pristine, allowlist, or denylist is specified, all values in this option are given to the child process.",
			"    custom = [",
			"      \"${59:<custom-env-variable1>}\",",
			"      \"${60:<custom-env-variable2>}\",",
			"      \"${61:<custom-env-variableN>}\"",
			"    ]",
			"",
			"    // allowlist",
			"    // this specifies a list of environment variables to exclusively include in the list of environment variables exposed to the child process.",
			"    // if specified, only those environment variables matching the given patterns are exposed to the child process.",
			"    // these strings are matched using Go's glob function, so wildcards are permitted.",
			"    allowlist = [",
			"      \"${62:<allowed-env-variable1>}\",",
			"      \"${63:<allowed-env-variable2>}\",",
			"      \"${64:<allowed-env-variableN>}\"",
			"    ]",
			"",
			"    // denylist",
			"    // this specifies a list of environment variables to exclusively prohibit in the list of environment variables exposed to the child process.",
			"    // if specified, any environment variables matching the given patterns will not be exposed to the child process, even if they are in the allowlist.",
			"    // the values in this option take precedence over the values in the allowlist.",
			"    // these strings are matched using Go's glob function, so wildcards are permitted.",
			"    denylist = [",
			"      \"${65:<denied-env-variable1>}\",",
			"      \"${66:<denied-env-variable2>}\",",
			"      \"${67:<denied-env-variableN>}\"",
			"    ]",
			"  }",
			"",
			"  // reload_signal",
			"  // this defines the signal that will be sent to the child process when a change occurs in a watched template.",
			"  // the signal will only be sent after the process is started, and the process will only be started after all dependent templates have been rendered at least once.",
			"  // the default value is nil, which tells Consul Template to stop the child process and spawn a new one instead of sending it a signal.",
			"  // this is useful for legacy applications or applications that cannot properly reload their configuration without a full reload.",
			"  reload_signal = \"${68:<reload-signal>}\"",
			"",
			"  // kill_signal",
			"  // this defines the signal sent to the child process when Consul Template is gracefully shutting down.",
			"  // the application should begin a graceful cleanup.",
			"  // if the application does not terminate before the `kill_timeout`, it will be terminated (effectively \"kill -9\").",
			"  // the default value is \"SIGINT\".",
			"  kill_signal = \"${69:<kill-signal>}\"",
			"",
			"  // kill_timeout",
			"  // this defines the amount of time to wait for the child process to gracefully terminate when Consul Template exits.",
			"  // after this specified time, the child process will be force-killed (effectively \"kill -9\").",
			"  // the default value is \"30s\".",
			"  kill_timeout = \"${70:<kill-timeout>}\"",
			"}",
			"$0"
		],
		"description": "full consul-template configuration"
	},
	"consul-template configuration - common": {
		"prefix": ["consul-template-configuration-common"],
		"body": [
			"// log_level",
			"// this is the log level.",
			"// this is also available as a command line flag.",
			"// valid options include (in order of verbosity): trace, debug, info, warn, err",
			"log_level = \"${1:<log-level>}\"",
			"",
			"// pid_file",
			"// this is the path to store a PID file which will contain the process ID of the Consul Template process.",
			"// this is useful if you plan to send custom signals to the process.",
			"pid_file = \"${2:<path-to-pid-file>}\"",
			"",
			"logfile {",
			"  // path",
			"  // if a path is specified, the feature is enabled",
			"  // please refer to the documentation for the '-log-file' CLI flag for more information about its behaviour.",
			"  path = \"${3:<path-to-logfile>}\"",
			"",
			"  // log_rotate_bytes",
			"  // this allow you to control the number of bytes that should be written to a log before it needs to be rotated.",
			"  // unless specified, there is no limit to the number of bytes that can be written to a log file.",
			"  log_rotate_bytes = ${4:<log-rotate-bytes>}",
			"",
			"  // log_rotate_duration",
			"  // this lets you control time based rotation.",
			"  // defaults to \"24h\".",
			"  log_rotate_duration = ${5:<log-rotate-duration>}",
			"",
			"  // log_rotate_max_files",
			"  // this lets you control the maximum number of older log file archives to keep.",
			"  // set to -1 to discard old log files when a new one is created",
			"  // defaults to 0 (no files are ever deleted).",
			"  log_rotate_max_files = ${6:<log-rotate-max-files>}",
			"}",
			"",
			"consul {",
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${7|true,false|}",
			"    // username",
			"    username = \"${8:<consul-username>}\"",
			"    // password",
			"    password = \"${9:<consul-password>}\"",
			"  }",
			"",
			"  // address",
			"  // this is the address of the Consul agent.",
			"  // by default, this is 127.0.0.1:8500, which is the default bind and port for a local Consul agent.",
			"  // it is not recommended that you communicate directly with a Consul server, and instead communicate with the local Consul agent.",
			"  // there are many reasons for this, most importantly the Consul agent is able to multiplex",
			"  // connections to the Consul server and reduce the number of open HTTP connections.",
			"  // Additionally, it provides a 'well-known' IP address for which clients can connect.",
			"  address = \"${10:<consul-address>}\"",
			"",
			"  // namespace",
			"  // this is a Consul Enterprise namespace to use for reading/writing.",
			"  // This can also be set via the 'CONSUL_NAMESPACE' environment variable.",
			"  // BETA: this is to be considered a beta feature as it has had limited testing",
			"  namespace = \"${11:<consul-namespace>}\"",
			"",
			"  // token",
			"  // this is the ACL token to use when connecting to Consul.",
			"  // if you did not enable ACLs on your Consul cluster, you do not need to set this option.",
			"  // this option is also available via the environment variable 'CONSUL_TOKEN'.",
			"  token = \"${12:<consul-acl-token>}\"",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Template is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${13:<retry-attempts>}",
			"  }",
			"",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${14|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${15|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    cert = \"${16:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    key  = \"${17:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${18:<path-to-ca-cert-file>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${19:<sni-server-name>}\"",
			"  }",
			"}",
			"",
			"vault {",
			"  // address",
			"  // this is the address of the Vault leader.",
			"  // the protocol (http(s)) portion of the address is required.",
			"  address = \"${20:<vault-address>}\"",
			"",
			"  // namespace",
			"  // this is a Vault Enterprise namespace to use for reading/writing secrets.",
			"  // this value can also be specified via the environment variable 'VAULT_NAMESPACE'.",
			"  namespace = \"${21:<vault-namespace>}\"",
			"",
			"  // token",
			"  // this is the token to use when communicating with the Vault server.",
			"  // like other tools that integrate with Vault, Consul Template makes the assumption that you provide it with a Vault token;",
			"  // it does not have the incorporated logic to generate tokens via Vault's auth methods.",
			"  // this value can also be specified via the environment variable 'VAULT_TOKEN'.",
			"  // it is highly recommended that you do not put your token in plain-text in a configuration file.",
			"  // when using a token from Vault Agent, the vault_agent_token_file setting should be used instead, as that will take precedence over this field.",
			"  token = \"${22:<vault-token>}\"",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Template is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${23:<retry-attempts>}",
			"  }",
			"",
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${24|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${25|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    cert = \"${26:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    key  = \"${27:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${28:<path-to-ca-cert-file>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${29:<sni-server-name>}\"",
			"  }",
			"}",
			"",
			"template {",
			"  // source",
			"  // this is the source file on disk to use as the input template.",
			"  // this is often called the 'Consul Template template'.",
			"  // this option is required if not using the 'contents' option.",
			"  source = \"${30:<path-to-template-file>}\"",
			"",
			"  // destination",
			"  // this is the destination path on disk where the source template will render.",
			"  // if the parent directories do not exist, Consul Template will attempt to create them, unless create_dest_dirs is false.",
			"  destination = \"${31:<path-to-rendered-file>}\"",
			"",
			"  // create_dest_dirs",
			"  // this options tells Consul Template to create the parent directories of the destination path if they do not exist.",
			"  // defaults to true.",
			"  create_dest_dirs = ${32|true,false|}",
			"",
			"  // command",
			"  // this is the optional command to run when the template is rendered.",
			"  // the command will only run if the resulting template changes.",
			"  // The command must return within 30s (configurable), and it must have a successful exit code.",
			"  // Consul Template is not a replacement for a process monitor or init system.",
			"  // please see the 'commands' section in the README for more.",
			"  command         = \"${33:<command-to-run-after-rendering>}\"",
			"  // command_timeout",
			"  // this is the maximum amount of time to wait for the optional command to return.",
			"  // if you set the timeout to 0s the command is run in the background without monitoring it for errors.",
			"  // if also using Once, consul-template can exit before the command is finished.",
			"  // defaults to 30s.",
			"  command_timeout = \"${34:<command-timeout>}\"",
			"",
			"  // error_on_missing_key",
			"  // exit with an error when accessing a struct or map field/key that does not exist.",
			"  // the default behavior will print '<no value>' when accessing a field that does not exist.",
			"  // it is highly recommended you set this to 'true' when retrieving secrets from Vault.",
			"  error_on_missing_key = ${35|true,false|}",
			"",
			"  // perms",
			"  // this is the permission to render the file.",
			"  // if this option is left unspecified, Consul Template will attempt to match the permissions of the file that already exists at the destination path.",
			"  // if no file exists at that path, the permissions are 0644.",
			"  perms = \"${36:<permission-to-render-the-file>}\"",
			"",
			"  // backup",
			"  // this option backs up the previously rendered template at the destination path before writing a new one.",
			"  // it keeps exactly one backup.",
			"  // this option is useful for preventing accidental changes to the data without having a rollback strategy.",
			"  backup = ${37|true,false|}",
			"}",
			"",
			"exec {",
			"  // command",
			"  // this is the command to exec as a child process.",
			"  // there can be only one command per Consul Template process.",
			"  command = \"${38:<command-to-exec>}\"",
			"",
			"  env {",
			"    // pristine",
			"    // this specifies if the child process should not inherit the parent process's environment.",
			"    // by default, the child will have full access to the environment variables of the parent.",
			"    // setting this to true will send only the values specified in 'custom' to the child process.",
			"    pristine = ${39|true,false|}",
			"  }",
			"}",
			"$0"
		],
		"description": "common consul-template configuration"
	},
	"consul-template configuration 'kill_signal'": {
		"prefix": ["consul-template-configuration-kill-signal"],
		"body": [
			"// kill_signal",
			"// this is the signal to listen for to trigger a graceful stop.",
			"// setting this value to the empty string will cause Consul Template to not listen for any graceful stop signals.",
			"// defaults to \"SIGINT\"",
			"kill_signal = \"${1:<kill-signal>}\"",
			"$0"
		],
		"description": "consul-template templated 'kill_signal' configuration"
	},
	"consul-template configuration 'reload_signal'": {
		"prefix": ["consul-template-configuration-reload-signal"],
		"body": [
			"// reload_signal",
			"// this is the signal to listen for to trigger a reload event.",
			"// setting this value to the empty string will cause Consul Template to not listen for any reload signals.",
			"// defaults to \"SIGHUP\".",
			"reload_signal = \"${1:<reload-signal>}\"",
			"$0"
		],
		"description": "consul-template templated 'reload_signal' configuration"
	},
	"consul-template configuration 'log_level'": {
		"prefix": ["consul-template-configuration-log-level"],
		"body": [
			"// log_level",
			"// this is the log level.",
			"// this is also available as a command line flag.",
			"// valid options include (in order of verbosity): trace, debug, info, warn, err",
			"log_level = \"${1:<log-level>}\"",
			"$0"
		],
		"description": "consul-template templated 'log_level' configuration"
	},
	"consul-template configuration 'max_stale'": {
		"prefix": ["consul-template-configuration-max-stale"],
		"body": [
			"// max_stale",
			"// this is the maximum interval to allow 'stale' data. By default, only the Consul leader will respond to queries;",
			"// any requests to a follower will forward to the leader.",
			"// in large clusters with many requests, this is not as scalable, so this option allows any follower to respond to a query,",
			"// so long as the last-replicated data is within these bounds.",
			"// higher values result in less cluster load, but are more likely to have outdated data.",
			"max_stale = \"${1:<max-stale>}\"",
			"$0"
		],
		"description": "consul-template templated 'max_stale' configuration"
	},
	"consul-template configuration 'block_query_wait'": {
		"prefix": ["consul-template-configuration-block-query-wait"],
		"body": [
			"// block_query_wait",
			"// this is amount of time in seconds to do a blocking query for.",
			"// many endpoints in Consul support a feature known as 'blocking queries'.",
			"// a blocking query is used to wait for a potential change using long polling.",
			"block_query_wait = \"${1:<max-stale>}\"",
			"$0"
		],
		"description": "consul-template templated 'block_query_wait' configuration"
	},
	"consul-template configuration 'wait'": {
		"prefix": ["consul-template-configuration-wait"],
		"body": [
			"// wait",
			"// this is the quiescence timers; it defines the minimum and maximum amount of time to wait for the cluster to reach a consistent state",
			"// before rendering a replicating.",
			"// this is useful to enable in systems that have a lot of flapping, because it will reduce the the number of times a replication occurs.",
			"wait {",
			"  min = \"${1:<minimum-wait-for-consistent-cluster-state>}\"",
			"  max = \"${2:<maximum-wait-for-consistent-cluster-state>}\"",
			"}",
			"$0"
		],
		"description": "consul-template templated 'wait' configuration"
	},
	"consul-template configuration 'pid_file'": {
		"prefix": ["consul-template-configuration-pid-file"],
		"body": [
			"// pid_file",
			"// this is the path to store a PID file which will contain the process ID of the Consul Template process.",
			"// this is useful if you plan to send custom signals to the process.",
			"pid_file = \"${1:<path-to-pid-file>}\"",
			"$0"
		],
		"description": "consul-template templated 'pid_file' configuration"
	},
	"consul-template configuration 'syslog' - empty": {
		"prefix": ["consul-template-configuration-syslog-empty"],
		"body": [
			"// this block defines the configuration for connecting to a syslog server for logging.",
			"syslog {",
			"  $0",
			"}",
			""
		],
		"description": "consul-template empty 'syslog' configuration"
	},
	"consul-template configuration 'syslog' - full": {
		"prefix": ["consul-template-configuration-syslog-full"],
		"body": [
			"// this block defines the configuration for connecting to a syslog server for logging.",
			"syslog {",
			"  // enabled",
			"  // this enables syslog logging.",
			"  // specifying any other option also enables syslog logging.",
			"  enabled = \"${1:<syslog-enabled>}\"",
			"",
			"  // facility",
			"  // this is the name of the syslog facility to log to.",
			"  facility = \"${2:<syslog-facility>}\"",
			"}",
			"$0"
		],
		"description": "consul-template full 'syslog' configuration"
	},
	"consul-template configuration 'syslog' - common": {
		"prefix": ["consul-template-configuration-syslog-common"],
		"body": [
			"// this block defines the configuration for connecting to a syslog server for logging.",
			"syslog {",
			"  // enabled",
			"  // this enables syslog logging.",
			"  // specifying any other option also enables syslog logging.",
			"  enabled = \"${1:<syslog-enabled>}\"",
			"",
			"  // facility",
			"  // this is the name of the syslog facility to log to.",
			"  facility = \"${2:<syslog-facility>}\"",
			"}",
			"$0"
		],
		"description": "consul-template common 'syslog' configuration"
	},
	"consul-template configuration 'syslog' parameter 'enabled'": {
		"prefix": ["consul-template-configuration-syslog-parameter-enabled"],
		"body": [
			"  // enabled",
			"  // this enables syslog logging.",
			"  // specifying any other option also enables syslog logging.",
			"  enabled = \"${1:<syslog-enabled>}\"",
			"$0"
		],
		"description": "consul-template templated 'enabled' parameter of configuration 'syslog'"
	},
	"consul-template configuration 'syslog' parameter 'facility'": {
		"prefix": ["consul-template-configuration-syslog-parameter-facility"],
		"body": [
			"  // facility",
			"  // this is the name of the syslog facility to log to.",
			"  facility = \"${1:<syslog-facility>}\"",
			"$0"
		],
		"description": "consul-template templated 'facility' parameter of configuration 'syslog'"
	},
	"consul-template configuration 'logfile' - empty": {
		"prefix": ["consul-template-configuration-logfile-empty"],
		"body": [
			"// this block defines the configuration for logging to file.",
			"logfile {",
			"  $0",
			"}",
			""
		],
		"description": "consul-template empty 'logfile' configuration"
	},
	"consul-template configuration 'logfile' - full": {
		"prefix": ["consul-template-configuration-logfile-full"],
		"body": [
			"// this block defines the configuration for logging to file.",
			"logfile {",
			"  // path",
			"  // if a path is specified, the feature is enabled",
			"  // please refer to the documentation for the '-log-file' CLI flag for more information about its behaviour.",
			"  path = \"${1:<path-to-logfile>}\"",
			"",
			"  // log_rotate_bytes",
			"  // this allow you to control the number of bytes that should be written to a log before it needs to be rotated.",
			"  // unless specified, there is no limit to the number of bytes that can be written to a log file.",
			"  log_rotate_bytes = ${2:<log-rotate-bytes>}",
			"",
			"  // log_rotate_duration",
			"  // this lets you control time based rotation.",
			"  // defaults to \"24h\".",
			"  log_rotate_duration = ${3:<log-rotate-duration>}",
			"",
			"  // log_rotate_max_files",
			"  // this lets you control the maximum number of older log file archives to keep.",
			"  // set to -1 to discard old log files when a new one is created",
			"  // defaults to 0 (no files are ever deleted).",
			"  log_rotate_max_files = ${4:<log-rotate-max-files>}",
			"}",
			"$0"
		],
		"description": "consul-template full 'logfile' configuration"
	},
	"consul-template configuration 'logfile' - common": {
		"prefix": ["consul-template-configuration-logfile-common"],
		"body": [
			"// this block defines the configuration for logging to file.",
			"logfile {",
			"  // path",
			"  // if a path is specified, the feature is enabled",
			"  // please refer to the documentation for the '-log-file' CLI flag for more information about its behaviour.",
			"  path = \"${1:<path-to-logfile>}\"",
			"",
			"  // log_rotate_bytes",
			"  // this allow you to control the number of bytes that should be written to a log before it needs to be rotated.",
			"  // unless specified, there is no limit to the number of bytes that can be written to a log file.",
			"  log_rotate_bytes = ${2:<log-rotate-bytes>}",
			"",
			"  // log_rotate_duration",
			"  // this lets you control time based rotation.",
			"  // defaults to \"24h\".",
			"  log_rotate_duration = ${3:<log-rotate-duration>}",
			"",
			"  // log_rotate_max_files",
			"  // this lets you control the maximum number of older log file archives to keep.",
			"  // set to -1 to discard old log files when a new one is created",
			"  // defaults to 0 (no files are ever deleted).",
			"  log_rotate_max_files = ${4:<log-rotate-max-files>}",
			"}",
			"$0"
		],
		"description": "consul-template common 'logfile' configuration"
	},
	"consul-template configuration 'logfile' parameter 'path'": {
		"prefix": ["consul-template-configuration-logfile-parameter-path"],
		"body": [
			"  // path",
			"  // if a path is specified, the feature is enabled",
			"  // please refer to the documentation for the '-log-file' CLI flag for more information about its behaviour.",
			"  path = \"${1:<path-to-logfile>}\"",
			"$0"
		],
		"description": "consul-template templated 'path' parameter of configuration 'logfile'"
	},
	"consul-template configuration 'logfile' parameter 'log_rotate_bytes'": {
		"prefix": ["consul-template-configuration-logfile-parameter-log-rotate-bytes"],
		"body": [
			"  // log_rotate_bytes",
			"  // this allow you to control the number of bytes that should be written to a log before it needs to be rotated.",
			"  // unless specified, there is no limit to the number of bytes that can be written to a log file.",
			"  log_rotate_bytes = ${1:<log-rotate-bytes>}",
			"$0"
		],
		"description": "consul-template templated 'log_rotate_bytes' parameter of configuration 'logfile'"
	},
	"consul-template configuration 'logfile' parameter 'log_rotate_duration'": {
		"prefix": ["consul-template-configuration-logfile-parameter-log-rotate-duration"],
		"body": [
			"  // log_rotate_duration",
			"  // this lets you control time based rotation.",
			"  // defaults to \"24h\".",
			"  log_rotate_duration = ${1:<log-rotate-duration>}",
			"$0"
		],
		"description": "consul-template templated 'log_rotate_duration' parameter of configuration 'logfile'"
	},
	"consul-template configuration 'logfile' parameter 'log_rotate_max_files'": {
		"prefix": ["consul-template-configuration-logfile-parameter-log-rotate-max-files"],
		"body": [
			"  // log_rotate_max_files",
			"  // this lets you control the maximum number of older log file archives to keep.",
			"  // set to -1 to discard old log files when a new one is created",
			"  // defaults to 0 (no files are ever deleted).",
			"  log_rotate_max_files = ${1:<log-rotate-max-files>}",
			"$0"
		],
		"description": "consul-template templated 'log_rotate_max_files' parameter of configuration 'logfile'"
	},
	"consul-template configuration 'consul' - empty": {
		"prefix": ["consul-template-configuration-consul-empty"],
		"body": [
			"consul {",
			"  $0",
			"}",
			""
		],
		"description": "consul-template empty 'consul' configuration"
	},
	"consul-template configuration 'consul' - full": {
		"prefix": ["consul-template-configuration-consul-full"],
		"body": [
			"consul {",
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${1|true,false|}",
			"    // username",
			"    username = \"${2:<consul-username>}\"",
			"    // password",
			"    password = \"${3:<consul-password>}\"",
			"  }",
			"",
			"  // address",
			"  // this is the address of the Consul agent.",
			"  // by default, this is 127.0.0.1:8500, which is the default bind and port for a local Consul agent.",
			"  // it is not recommended that you communicate directly with a Consul server, and instead communicate with the local Consul agent.",
			"  // there are many reasons for this, most importantly the Consul agent is able to multiplex",
			"  // connections to the Consul server and reduce the number of open HTTP connections.",
			"  // Additionally, it provides a 'well-known' IP address for which clients can connect.",
			"  address = \"${4:<consul-address>}\"",
			"",
			"  // namespace",
			"  // this is a Consul Enterprise namespace to use for reading/writing.",
			"  // This can also be set via the 'CONSUL_NAMESPACE' environment variable.",
			"  // BETA: this is to be considered a beta feature as it has had limited testing",
			"  namespace = \"${5:<consul-namespace>}\"",
			"",
			"  // token",
			"  // this is the ACL token to use when connecting to Consul.",
			"  // if you did not enable ACLs on your Consul cluster, you do not need to set this option.",
			"  // this option is also available via the environment variable 'CONSUL_TOKEN'.",
			"  token = \"${6:<consul-acl-token>}\"",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Template is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${7|true,false|}",
			"",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${8:<retry-attempts>}",
			"",
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff     = \"${9:<sleep-time-between-retry-attempts>}\"",
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${10:<max-sleep-time-between-retry-attempts>}\"",
			"  }",
			"",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${11|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${12|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    cert = \"${13:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    key  = \"${14:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${15:<path-to-ca-cert-file>}\"",
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${16:<path-to-ca-cert-directory>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${17:<sni-server-name>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "consul-template full 'consul' configuration"
	},
	"consul-template configuration 'consul' - common": {
		"prefix": ["consul-template-configuration-consul-common"],
		"body": [
			"consul {",
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${1|true,false|}",
			"    // username",
			"    username = \"${2:<consul-username>}\"",
			"    // password",
			"    password = \"${3:<consul-password>}\"",
			"  }",
			"",
			"  // address",
			"  // this is the address of the Consul agent.",
			"  // by default, this is 127.0.0.1:8500, which is the default bind and port for a local Consul agent.",
			"  // it is not recommended that you communicate directly with a Consul server, and instead communicate with the local Consul agent.",
			"  // there are many reasons for this, most importantly the Consul agent is able to multiplex",
			"  // connections to the Consul server and reduce the number of open HTTP connections.",
			"  // Additionally, it provides a 'well-known' IP address for which clients can connect.",
			"  address = \"${4:<consul-address>}\"",
			"",
			"  // namespace",
			"  // this is a Consul Enterprise namespace to use for reading/writing.",
			"  // This can also be set via the 'CONSUL_NAMESPACE' environment variable.",
			"  // BETA: this is to be considered a beta feature as it has had limited testing",
			"  namespace = \"${5:<consul-namespace>}\"",
			"",
			"  // token",
			"  // this is the ACL token to use when connecting to Consul.",
			"  // if you did not enable ACLs on your Consul cluster, you do not need to set this option.",
			"  // this option is also available via the environment variable 'CONSUL_TOKEN'.",
			"  token = \"${6:<consul-acl-token>}\"",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Template is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${7:<retry-attempts>}",
			"  }",
			"",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${8|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${9|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    cert = \"${10:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    key  = \"${11:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${12:<path-to-ca-cert-file>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${13:<sni-server-name>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "consul-template common 'consul' configuration"
	},
	"consul-template configuration 'consul' parameter 'auth' - empty": {
		"prefix": ["consul-template-configuration-consul-parameter-auth-empty"],
		"body": [
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    $0",
			"  }",
			""
		],
		"description": "consul-template empty 'auth' parameter of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'auth' - full": {
		"prefix": ["consul-template-configuration-consul-parameter-auth-full"],
		"body": [
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${1|true,false|}",
			"    // username",
			"    username = \"${2:<consul-username>}\"",
			"    // password",
			"    password = \"${3:<consul-password>}\"",
			"  }",
			"$0"
		],
		"description": "consul-template full 'auth' parameter of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'auth' - common": {
		"prefix": ["consul-template-configuration-consul-parameter-auth-common"],
		"body": [
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${1|true,false|}",
			"    // username",
			"    username = \"${2:<consul-username>}\"",
			"    // password",
			"    password = \"${3:<consul-password>}\"",
			"  }",
			"$0"
		],
		"description": "consul-template common 'auth' parameter of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'auth' parameter 'enabled'": {
		"prefix": ["consul-template-configuration-consul-parameter-auth-parameter-enabled"],
		"body": [
			"    // enabled",
			"    enabled = ${1|true,false|}",
			"$0"
		],
		"description": "consul-template templated 'enabled' parameter of parameter 'auth' of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'auth' parameter 'username'": {
		"prefix": ["consul-template-configuration-consul-parameter-auth-parameter-username"],
		"body": [
			"    // username",
			"    username = \"${1:<consul-username>}\"",
			"$0"
		],
		"description": "consul-template templated 'username' parameter of parameter 'auth' of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'auth' parameter 'password'": {
		"prefix": ["consul-template-configuration-consul-parameter-auth-parameter-password"],
		"body": [
			"    // password",
			"    password = \"${1:<consul-password>}\"",
			"$0"
		],
		"description": "consul-template templated 'password' parameter of parameter 'auth' of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'address'": {
		"prefix": ["consul-template-configuration-consul-parameter-address"],
		"body": [
			"  // address",
			"  // this is the address of the Consul agent.",
			"  // by default, this is 127.0.0.1:8500, which is the default bind and port for a local Consul agent.",
			"  // it is not recommended that you communicate directly with a Consul server, and instead communicate with the local Consul agent.",
			"  // there are many reasons for this, most importantly the Consul agent is able to multiplex",
			"  // connections to the Consul server and reduce the number of open HTTP connections.",
			"  // Additionally, it provides a 'well-known' IP address for which clients can connect.",
			"  address = \"${1:<consul-address>}\"",
			"$0"
		],
		"description": "consul-template templated 'address' parameter of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'namespace'": {
		"prefix": ["consul-template-configuration-consul-parameter-namespace"],
		"body": [
			"  // namespace",
			"  // this is a Consul Enterprise namespace to use for reading/writing.",
			"  // This can also be set via the 'CONSUL_NAMESPACE' environment variable.",
			"  // BETA: this is to be considered a beta feature as it has had limited testing",
			"  namespace = \"${1:<consul-namespace>}\"",
			"$0"
		],
		"description": "consul-template templated 'namespace' parameter of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'token'": {
		"prefix": ["consul-template-configuration-consul-parameter-token"],
		"body": [
			"  // token",
			"  // this is the ACL token to use when connecting to Consul.",
			"  // if you did not enable ACLs on your Consul cluster, you do not need to set this option.",
			"  // this option is also available via the environment variable 'CONSUL_TOKEN'.",
			"  token = \"${1:<consul-acl-token>}\"",
			"$0"
		],
		"description": "consul-template templated 'token' parameter of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'retry' - empty": {
		"prefix": ["consul-template-configuration-consul-parameter-retry-empty"],
		"body": [
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Template is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    $0",
			"  }",
			""
		],
		"description": "consul-template empty 'retry' parameter of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'retry' - full": {
		"prefix": ["consul-template-configuration-consul-parameter-retry-full"],
		"body": [
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Template is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${1|true,false|}",
			"",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${2:<retry-attempts>}",
			"",
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff     = \"${3:<sleep-time-between-retry-attempts>}\"",
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${4:<max-sleep-time-between-retry-attempts>}\"",
			"  }",
			"$0"
		],
		"description": "consul-template full 'retry' parameter of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'retry' - common": {
		"prefix": ["consul-template-configuration-consul-parameter-retry-common"],
		"body": [
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Template is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${1:<retry-attempts>}",
			"  }",
			"$0"
		],
		"description": "consul-template common 'retry' parameter of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'retry' parameter 'enabled'": {
		"prefix": ["consul-template-configuration-consul-parameter-retry-parameter-enabled"],
		"body": [
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${1|true,false|}",
			"$0"
		],
		"description": "consul-template templated 'enabled' parameter of parameter 'retry' of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'retry' parameter 'attempts'": {
		"prefix": ["consul-template-configuration-consul-parameter-retry-parameter-attempts"],
		"body": [
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${1:<retry-attempts>}",
			"$0"
		],
		"description": "consul-template templated 'attempts' parameter of parameter 'retry' of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'retry' parameter 'backoff'": {
		"prefix": ["consul-template-configuration-consul-parameter-retry-parameter-backoff"],
		"body": [
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff = \"${1:<sleep-time-between-retry-attempts>}\"",
			"$0"
		],
		"description": "consul-template templated 'backoff' parameter of parameter 'retry' of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'retry' parameter 'max_backoff'": {
		"prefix": ["consul-template-configuration-consul-parameter-retry-parameter-max-backoff"],
		"body": [
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${1:<max-sleep-time-between-retry-attempts>}\"",
			"$0"
		],
		"description": "consul-template templated 'max_backoff' parameter of parameter 'retry' of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'ssl' - empty": {
		"prefix": ["consul-template-configuration-consul-parameter-ssl-empty"],
		"body": [
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    $0",
			"  }",
			""
		],
		"description": "consul-template empty 'ssl' parameter of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'ssl' - full": {
		"prefix": ["consul-template-configuration-consul-parameter-ssl-full"],
		"body": [
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${1|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${2|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    cert = \"${3:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    key  = \"${4:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${5:<path-to-ca-cert-file>}\"",
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${6:<path-to-ca-cert-directory>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${7:<sni-server-name>}\"",
			"  }",
			"$0"
		],
		"description": "consul-template full 'ssl' parameter of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'ssl' - common": {
		"prefix": ["consul-template-configuration-consul-parameter-ssl-common"],
		"body": [
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${1|true,false|})",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${2|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    cert = \"${3:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    key  = \"${4:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${5:<path-to-ca-cert-file>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${6:<sni-server-name>}\"",
			"  }",
			"$0"
		],
		"description": "consul-template common 'ssl' parameter of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'ssl' parameter 'enabled'": {
		"prefix": ["consul-template-configuration-consul-parameter-ssl-parameter-enabled"],
		"body": [
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${1|true,false|}",
			"$0"
		],
		"description": "consul-template templated 'enabled' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'ssl' parameter 'verify'": {
		"prefix": ["consul-template-configuration-consul-parameter-ssl-parameter-verify"],
		"body": [
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${1|true,false|}",
			"$0"
		],
		"description": "consul-template templated 'verify' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'ssl' parameter 'cert'": {
		"prefix": ["consul-template-configuration-consul-parameter-ssl-parameter-cert"],
		"body": [
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    cert = \"${1:<path-to-client-cert>}\"",
			"$0"
		],
		"description": "consul-template templated 'cert' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'ssl' parameter 'key'": {
		"prefix": ["consul-template-configuration-consul-parameter-ssl-parameter-key"],
		"body": [
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    key = \"${1:<path-to-client-key>}\"",
			"$0"
		],
		"description": "consul-template templated 'key' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'ssl' parameter 'ca_cert'": {
		"prefix": ["consul-template-configuration-consul-parameter-ssl-parameter-ca-cert"],
		"body": [
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${1:<path-to-ca-cert-file>}\"",
			"$0"
		],
		"description": "consul-template templated 'ca_cert' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'ssl' parameter 'ca_path'": {
		"prefix": ["consul-template-configuration-consul-parameter-ssl-parameter-ca-path"],
		"body": [
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${1:<path-to-ca-cert-directory>}\"",
			"$0"
		],
		"description": "consul-template templated 'ca_path' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"consul-template configuration 'consul' parameter 'ssl' parameter 'server_name'": {
		"prefix": ["consul-template-configuration-consul-parameter-ssl-parameter-server-name"],
		"body": [
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${1:<sni-server-name>}\"",
			"$0"
		],
		"description": "consul-template templated 'server_name' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"consul-template configuration 'vault' - empty": {
		"prefix": ["consul-template-configuration-vault-empty"],
		"body": [
			"vault {",
			"  $0",
			"}",
			""
		],
		"description": "consul-template empty 'vault' configuration"
	},
	"consul-template configuration 'vault' - full": {
		"prefix": ["consul-template-configuration-vault-full"],
		"body": [
			"vault {",
			"  // address",
			"  // this is the address of the Vault leader.",
			"  // the protocol (http(s)) portion of the address is required.",
			"  address = \"${1:<vault-address>}\"",
			"",
			"  // namespace",
			"  // this is a Vault Enterprise namespace to use for reading/writing secrets.",
			"  // this value can also be specified via the environment variable 'VAULT_NAMESPACE'.",
			"  namespace = \"${2:<vault-namespace>}\"",
			"",
			"  // token",
			"  // this is the token to use when communicating with the Vault server.",
			"  // like other tools that integrate with Vault, Consul Template makes the assumption that you provide it with a Vault token;",
			"  // it does not have the incorporated logic to generate tokens via Vault's auth methods.",
			"  // this value can also be specified via the environment variable 'VAULT_TOKEN'.",
			"  // it is highly recommended that you do not put your token in plain-text in a configuration file.",
			"  // when using a token from Vault Agent, the vault_agent_token_file setting should be used instead, as that will take precedence over this field.",
			"  token = \"${3:<vault-token>}\"",
			"",
			"  // vault_agent_token_file",
			"  // this tells Consul Template to load the Vault token from the contents of a file.",
			"  // if this field is specified:",
			"  //   - by default Consul Template will not try to renew the Vault token, if you want it",
			"  // to renew you will need to specify renew_token = true as below.",
			"  //   - Consul Template will periodically stat the file and update the token if it has changed.",
			"  vault_agent_token_file = \"${4:<vault-agent-token-file>}\"",
			"",
			"  // unwrap_token",
			"  // this tells Consul Template that the provided token is actually a wrapped",
			"  // token that should be unwrapped using Vault's cubbyhole response wrapping before being used.",
			"  // please see Vault's cubbyhole response wrapping documentation for more information.",
			"  unwrap_token = \"${5:<vault-unwrap-token>}\"",
			"",
			"  // default_lease_duration",
			"  // the default lease duration Consul Template will use on a Vault secret that does not have a lease duration.",
			"  // this is used to calculate the sleep duration for rechecking a Vault secret value.",
			"  // defaults to 5 minutes.",
			"  default_lease_duration = \"${6:<default-lease-duration>}\"",
			"",
			"  // renew_token",
			"  // this option tells Consul Template to automatically renew the Vault token given.",
			"  // if you are unfamiliar with Vault's architecture, Vault requires tokens be renewed at some regular interval or they will be revoked.",
			"  // Consul Template will automatically renew the token at half the lease duration of the token.",
			"  // the default value is true, but this option can be disabled if you want to renew the Vault token using an out-of-band process.",
			"  // note that secrets specified in a template (using {{secret}} for example) are always renewed, even if this option is set to false.",
			"  // this option only applies to the top-level Vault token itself.",
			"  renew_token = ${7|true,false|}",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Template is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${8|true,false|}",
			"",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${9:<retry-attempts>}",
			"",
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff     = \"${10:<sleep-time-between-retry-attempts>}\"",
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${11:<max-sleep-time-between-retry-attempts>}\"",
			"  }",
			"",
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${12|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${13|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    cert = \"${14:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    key  = \"${15:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${16:<path-to-ca-cert-file>}\"",
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${17:<path-to-ca-cert-directory>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${18:<sni-server-name>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "consul-template full 'vault' configuration"
	},
	"consul-template configuration 'vault' - common": {
		"prefix": ["consul-template-configuration-vault-common"],
		"body": [
			"vault {",
			"  // address",
			"  // this is the address of the Vault leader.",
			"  // the protocol (http(s)) portion of the address is required.",
			"  address = \"${1:<vault-address>}\"",
			"",
			"  // namespace",
			"  // this is a Vault Enterprise namespace to use for reading/writing secrets.",
			"  // this value can also be specified via the environment variable 'VAULT_NAMESPACE'.",
			"  namespace = \"${2:<vault-namespace>}\"",
			"",
			"  // token",
			"  // this is the token to use when communicating with the Vault server.",
			"  // like other tools that integrate with Vault, Consul Template makes the assumption that you provide it with a Vault token;",
			"  // it does not have the incorporated logic to generate tokens via Vault's auth methods.",
			"  // this value can also be specified via the environment variable 'VAULT_TOKEN'.",
			"  // it is highly recommended that you do not put your token in plain-text in a configuration file.",
			"  // when using a token from Vault Agent, the vault_agent_token_file setting should be used instead, as that will take precedence over this field.",
			"  token = \"${3:<vault-token>}\"",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Template is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${4:<retry-attempts>}",
			"  }",
			"",
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${5|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${6|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    cert = \"${7:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    key  = \"${8:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${9:<path-to-ca-cert-file>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${10:<sni-server-name>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "consul-template common 'vault' configuration"
	},
	"consul-template configuration 'vault' parameter 'address'": {
		"prefix": ["consul-template-configuration-vault-parameter-address"],
		"body": [
			"  // address",
			"  // this is the address of the Vault leader.",
			"  // the protocol (http(s)) portion of the address is required.",
			"  address = \"${1:<vault-address>}\"",
			"$0"
		],
		"description": "consul-template templated 'address' parameter of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'namespace'": {
		"prefix": ["consul-template-configuration-vault-parameter-namespace"],
		"body": [
			"  // namespace",
			"  // this is a Vault Enterprise namespace to use for reading/writing secrets.",
			"  // this value can also be specified via the environment variable 'VAULT_NAMESPACE'.",
			"  namespace = \"${1:<vault-namespace>}\"",
			"$0"
		],
		"description": "consul-template templated 'namespace' parameter of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'token'": {
		"prefix": ["consul-template-configuration-vault-parameter-token"],
		"body": [
			"  // token",
			"  // this is the token to use when communicating with the Vault server.",
			"  // like other tools that integrate with Vault, Consul Template makes the assumption that you provide it with a Vault token;",
			"  // it does not have the incorporated logic to generate tokens via Vault's auth methods.",
			"  // this value can also be specified via the environment variable 'VAULT_TOKEN'.",
			"  // it is highly recommended that you do not put your token in plain-text in a configuration file.",
			"  // when using a token from Vault Agent, the vault_agent_token_file setting should be used instead, as that will take precedence over this field.",
			"  token = \"${1:<vault-token>}\"",
			"$0"
		],
		"description": "consul-template templated 'token' parameter of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'vault_agent_token_file'": {
		"prefix": ["consul-template-configuration-vault-parameter-vault-agent-token-file"],
		"body": [
			"  // vault_agent_token_file",
			"  // this tells Consul Template to load the Vault token from the contents of a file.",
			"  // if this field is specified:",
			"  //   - by default Consul Template will not try to renew the Vault token, if you want it",
			"  // to renew you will need to specify renew_token = true as below.",
			"  //   - Consul Template will periodically stat the file and update the token if it has changed.",
			"  vault_agent_token_file = \"${1:<vault-agent-token-file>}\"",
			"$0"
		],
		"description": "consul-template templated 'vault_agent_token_file' parameter of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'unwrap_token'": {
		"prefix": ["consul-template-configuration-vault-parameter-unwrap-token"],
		"body": [
			"  // unwrap_token",
			"  // this tells Consul Template that the provided token is actually a wrapped",
			"  // token that should be unwrapped using Vault's cubbyhole response wrapping before being used.",
			"  // please see Vault's cubbyhole response wrapping documentation for more information.",
			"  unwrap_token = \"${1:<vault-unwrap-token>}\"",
			"$0"
		],
		"description": "consul-template templated 'unwrap_token' parameter of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'default_lease_duration'": {
		"prefix": ["consul-template-configuration-vault-parameter-default-lease-duration"],
		"body": [
			"  // default_lease_duration",
			"  // the default lease duration Consul Template will use on a Vault secret that does not have a lease duration.",
			"  // this is used to calculate the sleep duration for rechecking a Vault secret value.",
			"  // defaults to 5 minutes.",
			"  default_lease_duration = \"${1:<default-lease-duration>}\"",
			"$0"
		],
		"description": "consul-template templated 'default_lease_duration' parameter of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'renew_token'": {
		"prefix": ["consul-template-configuration-vault-parameter-renew-token"],
		"body": [
			"  // renew_token",
			"  // this option tells Consul Template to automatically renew the Vault token given.",
			"  // if you are unfamiliar with Vault's architecture, Vault requires tokens be renewed at some regular interval or they will be revoked.",
			"  // Consul Template will automatically renew the token at half the lease duration of the token.",
			"  // the default value is true, but this option can be disabled if you want to renew the Vault token using an out-of-band process.",
			"  // note that secrets specified in a template (using {{secret}} for example) are always renewed, even if this option is set to false.",
			"  // this option only applies to the top-level Vault token itself.",
			"  renew_token = ${1|true,false|}",
			"$0"
		],
		"description": "consul-template templated 'renew_token' parameter of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'retry' - empty": {
		"prefix": ["consul-template-configuration-vault-parameter-retry-empty"],
		"body": [
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Template is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    $0",
			"  }",
			""
		],
		"description": "consul-template empty 'retry' parameter of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'retry' - full": {
		"prefix": ["consul-template-configuration-vault-parameter-retry-full"],
		"body": [
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Template is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${1|true,false|}",
			"",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${2:<retry-attempts>}",
			"",
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff     = \"${3:<sleep-time-between-retry-attempts>}\"",
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${4:<max-sleep-time-between-retry-attempts>}\"",
			"  }",
			"$0"
		],
		"description": "consul-template full 'retry' parameter of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'retry' - common": {
		"prefix": ["consul-template-configuration-vault-parameter-retry-common"],
		"body": [
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Consul Template is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${1:<retry-attempts>}",
			"  }",
			"$0"
		],
		"description": "consul-template common 'retry' parameter of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'retry' parameter 'enabled'": {
		"prefix": ["consul-template-configuration-vault-parameter-retry-parameter-enabled"],
		"body": [
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${1|true,false|}",
			"$0"
		],
		"description": "consul-template templated 'enabled' parameter of parameter 'retry' of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'retry' parameter 'attempts'": {
		"prefix": ["consul-template-configuration-vault-parameter-retry-parameter-attempts"],
		"body": [
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${1:<retry-attempts>}",
			"$0"
		],
		"description": "consul-template templated 'attempts' parameter of parameter 'retry' of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'retry' parameter 'backoff'": {
		"prefix": ["consul-template-configuration-vault-parameter-retry-parameter-backoff"],
		"body": [
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff = \"${1:<sleep-time-between-retry-attempts>}\"",
			"$0"
		],
		"description": "consul-template templated 'backoff' parameter of parameter 'retry' of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'retry' parameter 'max_backoff'": {
		"prefix": ["consul-template-configuration-vault-parameter-retry-parameter-max-backoff"],
		"body": [
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${1:<max-sleep-time-between-retry-attempts>}\"",
			"$0"
		],
		"description": "consul-template templated 'max_backoff' parameter of parameter 'retry' of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'ssl' - empty": {
		"prefix": ["consul-template-configuration-vault-parameter-ssl-empty"],
		"body": [
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    $0",
			"  }",
			""
		],
		"description": "consul-template empty 'ssl' parameter of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'ssl' - full": {
		"prefix": ["consul-template-configuration-vault-parameter-ssl-full"],
		"body": [
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${1|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${2|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    cert = \"${3:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    key  = \"${4:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${5:<path-to-ca-cert-file>}\"",
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${6:<path-to-ca-cert-directory>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${7:<sni-server-name>}\"",
			"  }",
			"$0"
		],
		"description": "consul-template full 'ssl' parameter of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'ssl' - common": {
		"prefix": ["consul-template-configuration-vault-parameter-ssl-common"],
		"body": [
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${1|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${2|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    cert = \"${3:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    key  = \"${4:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${5:<path-to-ca-cert-file>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${6:<sni-server-name>}\"",
			"  }",
			"$0"
		],
		"description": "consul-template common 'ssl' parameter of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'ssl' parameter 'enabled'": {
		"prefix": ["consul-template-configuration-vault-parameter-ssl-parameter-enabled"],
		"body": [
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${1|true,false|}",
			"$0"
		],
		"description": "consul-template templated 'enabled' parameter of parameter 'ssl' of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'ssl' parameter 'verify'": {
		"prefix": ["consul-template-configuration-vault-parameter-ssl-parameter-verify"],
		"body": [
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${1|true,false|}",
			"$0"
		],
		"description": "consul-template templated 'verify' parameter of parameter 'ssl' of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'ssl' parameter 'cert'": {
		"prefix": ["consul-template-configuration-vault-parameter-ssl-parameter-cert"],
		"body": [
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    cert = \"${1:<path-to-client-cert>}\"",
			"$0"
		],
		"description": "consul-template templated 'cert' parameter of parameter 'ssl' of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'ssl' parameter 'key'": {
		"prefix": ["consul-template-configuration-vault-parameter-ssl-parameter-key"],
		"body": [
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Consul Template will automatically combine them into an X509 certificate for you.",
			"    key = \"${1:<path-to-client-key>}\"",
			"$0"
		],
		"description": "consul-template templated 'key' parameter of parameter 'ssl' of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'ssl' parameter 'ca_cert'": {
		"prefix": ["consul-template-configuration-vault-parameter-ssl-parameter-ca-cert"],
		"body": [
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${1:<path-to-ca-cert-file>}\"",
			"$0"
		],
		"description": "consul-template templated 'ca_cert' parameter of parameter 'ssl' of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'ssl' parameter 'ca_path'": {
		"prefix": ["consul-template-configuration-vault-parameter-ssl-parameter-ca-path"],
		"body": [
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${1:<path-to-ca-cert-directory>}\"",
			"$0"
		],
		"description": "consul-template templated 'ca_path' parameter of parameter 'ssl' of configuration 'vault'"
	},
	"consul-template configuration 'vault' parameter 'ssl' parameter 'server_name'": {
		"prefix": ["consul-template-configuration-vault-parameter-ssl-parameter-server-name"],
		"body": [
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${1:<sni-server-name>}\"",
			"$0"
		],
		"description": "consul-template templated 'server_name' parameter of parameter 'ssl' of configuration 'vault'"
	},
	"consul-template configuration 'template' - empty": {
		"prefix": ["consul-template-configuration-template-empty"],
		"body": [
			"template {",
			"  $0",
			"}",
			""
		],
		"description": "consul-template empty 'template' configuration"
	},
	"consul-template configuration 'template' - full": {
		"prefix": ["consul-template-configuration-template-full"],
		"body": [
			"template {",
			"  // source",
			"  // this is the source file on disk to use as the input template.",
			"  // this is often called the 'Consul Template template'.",
			"  // this option is required if not using the 'contents' option.",
			"  source   = \"${1:<path-to-template-file>}\"",
			"  // contents",
			"  // this option allows embedding the contents of a template in the configuration file rather then supplying the 'source' path to the template file.",
			"  // this is useful for short templates.",
			"  // this option is mutually exclusive with the 'source' option.",
			"  contents = \"${2:<embedded-content-of-template>}\"",
			"",
			"  // destination",
			"  // this is the destination path on disk where the source template will render.",
			"  // if the parent directories do not exist, Consul Template will attempt to create them, unless create_dest_dirs is false.",
			"  destination = \"${3:<path-to-rendered-file>}\"",
			"",
			"  // create_dest_dirs",
			"  // this options tells Consul Template to create the parent directories of the destination path if they do not exist.",
			"  // defaults to true.",
			"  create_dest_dirs = ${4|true,false|}",
			"",
			"  // command",
			"  // this is the optional command to run when the template is rendered.",
			"  // the command will only run if the resulting template changes.",
			"  // The command must return within 30s (configurable), and it must have a successful exit code.",
			"  // Consul Template is not a replacement for a process monitor or init system.",
			"  // please see the 'commands' section in the README for more.",
			"  command         = \"${5:<command-to-run-after-rendering>}\"",
			"  // command_timeout",
			"  // this is the maximum amount of time to wait for the optional command to return.",
			"  // if you set the timeout to 0s the command is run in the background without monitoring it for errors.",
			"  // if also using Once, consul-template can exit before the command is finished.",
			"  // defaults to 30s.",
			"  command_timeout = \"${6:<command-timeout>}\"",
			"",
			"  // error_on_missing_key",
			"  // exit with an error when accessing a struct or map field/key that does not exist.",
			"  // the default behavior will print '<no value>' when accessing a field that does not exist.",
			"  // it is highly recommended you set this to 'true' when retrieving secrets from Vault.",
			"  error_on_missing_key = ${7|true,false|}",
			"",
			"  // perms",
			"  // this is the permission to render the file.",
			"  // if this option is left unspecified, Consul Template will attempt to match the permissions of the file that already exists at the destination path.",
			"  // if no file exists at that path, the permissions are 0644.",
			"  perms = \"${8:<permission-to-render-the-file>}\"",
			"",
			"  // backup",
			"  // this option backs up the previously rendered template at the destination path before writing a new one.",
			"  // it keeps exactly one backup.",
			"  // this option is useful for preventing accidental changes to the data without having a rollback strategy.",
			"  backup = ${9|true,false|}",
			"",
			"  // delimiter",
			"  // these are the delimiters to use in the template.",
			"  // the default is \"{{\" and \"}}\", but for some templates, it may be easier to use a different delimiter that does not conflict with the output file itself.",
			"  left_delimiter  = \"${10:<left-delimiter>}\"",
			"  right_delimiter = \"${11:<right-delimiter>}\"",
			"",
			"  // function_denylist",
			"  // these are functions that are not permitted in the template.",
			"  // if a template includes one of these functions, it will exit with an error.",
			"  function_denylist = [${12:<function1>},${13:<function2>},${14:<functionN>}]",
			"",
			"  // sandbox_path",
			"  // if a sandbox path is provided, any path provided to the `file` function is checked that it falls within the sandbox path.",
			"  // relative paths that try to traverse outside the sandbox path will exit with an error.",
			"  sandbox_path = \"${15:<path-to-sandbox>}\"",
			"",
			"  // wait",
			"  // this is the `minimum(:maximum)` to wait before rendering a new template to disk and triggering a command, separated by a colon (`:`)",
			"  // if the optional maximum value is omitted, it is assumed to be 4x the required minimum value.",
			"  // this is a numeric time with a unit suffix (\"5s\").",
			"  // there is no default value.",
			"  // the wait value for a template takes precedence over any globally-configured wait.",
			"  wait {",
			"    min = \"${16:<minimum-wait-for-rendering-new-template>}\"",
			"    max = \"${17:<maximum-wait-for-rendering-new-template>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "consul-template full 'template' configuration"
	},
	"consul-template configuration 'template' - common": {
		"prefix": ["consul-template-configuration-template-common"],
		"body": [
			"template {",
			"  // source",
			"  // this is the source file on disk to use as the input template.",
			"  // this is often called the 'Consul Template template'.",
			"  // this option is required if not using the 'contents' option.",
			"  source = \"${1:<path-to-template-file>}\"",
			"",
			"  // destination",
			"  // this is the destination path on disk where the source template will render.",
			"  // if the parent directories do not exist, Consul Template will attempt to create them, unless create_dest_dirs is false.",
			"  destination = \"${2:<path-to-rendered-file>}\"",
			"",
			"  // create_dest_dirs",
			"  // this options tells Consul Template to create the parent directories of the destination path if they do not exist.",
			"  // defaults to true.",
			"  create_dest_dirs = ${3|true,false|}",
			"",
			"  // command",
			"  // this is the optional command to run when the template is rendered.",
			"  // the command will only run if the resulting template changes.",
			"  // The command must return within 30s (configurable), and it must have a successful exit code.",
			"  // Consul Template is not a replacement for a process monitor or init system.",
			"  // please see the 'commands' section in the README for more.",
			"  command         = \"${4:<command-to-run-after-rendering>}\"",
			"  // command_timeout",
			"  // this is the maximum amount of time to wait for the optional command to return.",
			"  // if you set the timeout to 0s the command is run in the background without monitoring it for errors.",
			"  // if also using Once, consul-template can exit before the command is finished.",
			"  // defaults to 30s.",
			"  command_timeout = \"${5:<command-timeout>}\"",
			"",
			"  // error_on_missing_key",
			"  // exit with an error when accessing a struct or map field/key that does not exist.",
			"  // the default behavior will print '<no value>' when accessing a field that does not exist.",
			"  // it is highly recommended you set this to 'true' when retrieving secrets from Vault.",
			"  error_on_missing_key = ${6|true,false|}",
			"",
			"  // perms",
			"  // this is the permission to render the file.",
			"  // if this option is left unspecified, Consul Template will attempt to match the permissions of the file that already exists at the destination path.",
			"  // if no file exists at that path, the permissions are 0644.",
			"  perms = \"${7:<permission-to-render-the-file>}\"",
			"",
			"  // backup",
			"  // this option backs up the previously rendered template at the destination path before writing a new one.",
			"  // it keeps exactly one backup.",
			"  // this option is useful for preventing accidental changes to the data without having a rollback strategy.",
			"  backup = ${8|true,false|}",
			"}",
			"$0"
		],
		"description": "consul-template common 'template' configuration"
	},
	"consul-template configuration 'template' parameter 'source'": {
		"prefix": ["consul-template-configuration-template-parameter-source"],
		"body": [
			"  // source",
			"  // this is the source file on disk to use as the input template.",
			"  // this is often called the 'Consul Template template'.",
			"  // this option is required if not using the 'contents' option.",
			"  source = \"${1:<path-to-template-file>}\"",
			"$0"
		],
		"description": "consul-template templated 'source' parameter of configuration 'template'"
	},
	"consul-template configuration 'template' parameter 'destination'": {
		"prefix": ["consul-template-configuration-template-parameter-destination"],
		"body": [
			"  // destination",
			"  // this is the destination path on disk where the source template will render.",
			"  // if the parent directories do not exist, Consul Template will attempt to create them, unless create_dest_dirs is false.",
			"  destination = \"${1:<path-to-rendered-file>}\"",
			"$0"
		],
		"description": "consul-template templated 'destination' parameter of configuration 'template'"
	},
	"consul-template configuration 'template' parameter 'create_dest_dirs'": {
		"prefix": ["consul-template-configuration-template-parameter-create-dest-dirs"],
		"body": [
			"  // create_dest_dirs",
			"  // this options tells Consul Template to create the parent directories of the destination path if they do not exist.",
			"  // defaults to true.",
			"  create_dest_dirs = ${1|true,false|}",
			"$0"
		],
		"description": "consul-template templated 'create_dest_dirs' parameter of configuration 'template'"
	},
	"consul-template configuration 'template' parameter 'contents'": {
		"prefix": ["consul-template-configuration-template-parameter-contents"],
		"body": [
			"  // contents",
			"  // this option allows embedding the contents of a template in the configuration file rather then supplying the 'source' path to the template file.",
			"  // this is useful for short templates.",
			"  // this option is mutually exclusive with the 'source' option.",
			"  contents = \"${1:<embedded-content-of-template>}\"",
			"$0"
		],
		"description": "consul-template templated 'contents' parameter of configuration 'template'"
	},
	"consul-template configuration 'template' parameter 'command'": {
		"prefix": ["consul-template-configuration-template-parameter-command"],
		"body": [
			"  // command",
			"  // this is the optional command to run when the template is rendered.",
			"  // the command will only run if the resulting template changes.",
			"  // The command must return within 30s (configurable), and it must have a successful exit code.",
			"  // Consul Template is not a replacement for a process monitor or init system.",
			"  // please see the 'commands' section in the README for more.",
			"  command = \"${1:<command-to-run-after-rendering>}\"",
			"$0"
		],
		"description": "consul-template templated 'command' parameter of configuration 'template'"
	},
	"consul-template configuration 'template' parameter 'command_timeout'": {
		"prefix": ["consul-template-configuration-template-parameter-command-timeout"],
		"body": [
			"  // command_timeout",
			"  // this is the maximum amount of time to wait for the optional command to return.",
			"  // if you set the timeout to 0s the command is run in the background without monitoring it for errors.",
			"  // if also using Once, consul-template can exit before the command is finished.",
			"  // defaults to 30s.",
			"  command_timeout = \"${1:<command-timeout>}\"",
			"$0"
		],
		"description": "consul-template templated 'command_timeout' parameter of configuration 'template'"
	},
	"consul-template configuration 'template' parameter 'error_on_missing_key'": {
		"prefix": ["consul-template-configuration-template-parameter-error-on-missing-key"],
		"body": [
			"  // error_on_missing_key",
			"  // exit with an error when accessing a struct or map field/key that does not exist.",
			"  // the default behavior will print '<no value>' when accessing a field that does not exist.",
			"  // it is highly recommended you set this to 'true' when retrieving secrets from Vault.",
			"  error_on_missing_key = ${1|true,false|}",
			"$0"
		],
		"description": "consul-template templated 'error_on_missing_key' parameter of configuration 'template'"
	},
	"consul-template configuration 'template' parameter 'perms'": {
		"prefix": ["consul-template-configuration-template-parameter-perms"],
		"body": [
			"  // perms",
			"  // this is the permission to render the file.",
			"  // if this option is left unspecified, Consul Template will attempt to match the permissions of the file that already exists at the destination path.",
			"  // if no file exists at that path, the permissions are 0644.",
			"  perms = \"${1:<permission-to-render-the-file>}\"",
			"$0"
		],
		"description": "consul-template templated 'perms' parameter of configuration 'template'"
	},
	"consul-template configuration 'template' parameter 'backup'": {
		"prefix": ["consul-template-configuration-template-parameter-backup"],
		"body": [
			"  // backup",
			"  // this option backs up the previously rendered template at the destination path before writing a new one.",
			"  // it keeps exactly one backup.",
			"  // this option is useful for preventing accidental changes to the data without having a rollback strategy.",
			"  backup = ${1|true,false|}",
			"$0"
		],
		"description": "consul-template templated 'backup' parameter of configuration 'template'"
	},
	"consul-template configuration 'template' parameter 'delimiter'": {
		"prefix": ["consul-template-configuration-template-parameter-delimiter"],
		"body": [
			"  // delimiter",
			"  // these are the delimiters to use in the template.",
			"  // the default is \"{{\" and \"}}\", but for some templates, it may be easier to use a different delimiter that does not conflict with the output file itself.",
			"  left_delimiter  = \"${1:<left-delimiter>}\"",
			"  right_delimiter = \"${2:<right-delimiter>}\"",
			"$0"
		],
		"description": "consul-template templated 'delimiter' parameter of configuration 'template'"
	},
	"consul-template configuration 'template' parameter 'function_denylist'": {
		"prefix": ["consul-template-configuration-template-parameter-function-denylist"],
		"body": [
			"  // function_denylist",
			"  // these are functions that are not permitted in the template.",
			"  // if a template includes one of these functions, it will exit with an error.",
			"  function_denylist = [${1:<function1>},${2:<function2>},${3:<functionN>}]",
			"$0"
		],
		"description": "consul-template templated 'function_denylist' parameter of configuration 'template'"
	},
	"consul-template configuration 'template' parameter 'sandbox_path'": {
		"prefix": ["consul-template-configuration-template-parameter-sandbox-path"],
		"body": [
			"  // sandbox_path",
			"  // if a sandbox path is provided, any path provided to the `file` function is checked that it falls within the sandbox path.",
			"  // relative paths that try to traverse outside the sandbox path will exit with an error.",
			"  sandbox_path = \"${1:<path-to-sandbox>}\"",
			"$0"
		],
		"description": "consul-template templated 'sandbox_path' parameter of configuration 'template'"
	},
	"consul-template configuration 'template' parameter 'wait'": {
		"prefix": ["consul-template-configuration-template-parameter-wait"],
		"body": [
			"  // wait",
			"  // this is the `minimum(:maximum)` to wait before rendering a new template to disk and triggering a command, separated by a colon (`:`)",
			"  // if the optional maximum value is omitted, it is assumed to be 4x the required minimum value.",
			"  // this is a numeric time with a unit suffix (\"5s\").",
			"  // there is no default value.",
			"  // the wait value for a template takes precedence over any globally-configured wait.",
			"  wait {",
			"    min = \"${1:<minimum-wait-for-rendering-new-template>}\"",
			"    max = \"${2:<maximum-wait-for-rendering-new-template>}\"",
			"  }",
			"$0"
		],
		"description": "consul-template templated 'wait' parameter of configuration 'template'"
	},
	"consul-template configuration 'once'": {
		"prefix": ["consul-template-configuration-once"],
		"body": [
			"// once",
			"// configure Consul Template to execute each template exactly once and exits.",
			"once = ${1|true,false|}",
			"$0"
		],
		"description": "consul-template templated 'once' configuration"
	},
	"consul-template configuration 'deduplicate' - empty": {
		"prefix": ["consul-template-configuration-deduplicate-empty"],
		"body": [
			"deduplicate {",
			"  $0",
			"}",
			""
		],
		"description": "consul-template empty 'deduplicate' configuration"
	},
	"consul-template configuration 'deduplicate' - full": {
		"prefix": ["consul-template-configuration-deduplicate-full"],
		"body": [
			"deduplicate {",
			"  // enabled",
			"  // this enables de-duplication mode. Specifying any other options also enables de-duplication mode.",
			"  enabled = ${1|true,false|}",
			"",
			"  // prefix",
			"  // this is the prefix to the path in Consul's KV store where de-duplication templates will be pre-rendered and stored.",
			"  prefix = \"${2:<kv-store-prefix>}\"",
			"}",
			"$0"
		],
		"description": "consul-template full 'deduplicate' configuration"
	},
	"consul-template configuration 'deduplicate' - common": {
		"prefix": ["consul-template-configuration-deduplicate-common"],
		"body": [
			"deduplicate {",
			"}",
			"$0"
		],
		"description": "consul-template common 'deduplicate' configuration"
	},
	"consul-template configuration 'deduplicate' parameter 'enabled'": {
		"prefix": ["consul-template-configuration-deduplicate-parameter-enabled"],
		"body": [
			"  // enabled",
			"  // this enables de-duplication mode. Specifying any other options also enables de-duplication mode.",
			"  enabled = ${1|true,false|}",
			"$0"
		],
		"description": "consul-template templated 'enabled' parameter of configuration 'deduplicate'"
	},
	"consul-template configuration 'deduplicate' parameter 'prefix'": {
		"prefix": ["consul-template-configuration-deduplicate-parameter-prefix"],
		"body": [
			"  // prefix",
			"  // this is the prefix to the path in Consul's KV store where de-duplication templates will be pre-rendered and stored.",
			"  prefix = \"${1:<kv-store-prefix>}\"",
			"$0"
		],
		"description": "consul-template templated 'prefix' parameter of configuration 'deduplicate'"
	},
	"consul-template configuration 'exec' - empty": {
		"prefix": ["consul-template-configuration-exec-empty"],
		"body": [
			"exec {",
			"  $0",
			"}",
			""
		],
		"description": "consul-template empty 'exec' configuration"
	},
	"consul-template configuration 'exec' - full": {
		"prefix": ["consul-template-configuration-exec-full"],
		"body": [
			"exec {",
			"  // command",
			"  // this is the command to exec as a child process.",
			"  // there can be only one command per Consul Template process.",
			"  command = \"${1:<command-to-exec>}\"",
			"",
			"  // splay",
			"  // this is a random splay to wait before killing the command.",
			"  // the default value is 0 (no wait), but large clusters should consider setting a splay value",
			"  // to prevent all child processes from reloading at the same time when data changes occur.",
			"  // when this value is set to non-zero, Consul Template will wait a random period of time up to the splay value before reloading",
			"  // or killing the child process. This can be used to prevent the thundering herd problem on applications that do not gracefully reload.",
			"  splay = \"${2:<time-to-wait-before-killing-the-command>}\"",
			"",
			"  env {",
			"    // pristine",
			"    // this specifies if the child process should not inherit the parent process's environment.",
			"    // by default, the child will have full access to the environment variables of the parent.",
			"    // setting this to true will send only the values specified in 'custom' to the child process.",
			"    pristine = ${3|true,false|}",
			"",
			"    // custom",
			"    // this specifies additional custom environment variables in the form shown below to inject into the child's runtime environment.",
			"    // if a custom environment variable shares its name with a system environment variable, the custom environment variable takes precedence.",
			"    // even if pristine, allowlist, or denylist is specified, all values in this option are given to the child process.",
			"    custom = [",
			"      \"${4:<custom-env-variable1>}\",",
			"      \"${5:<custom-env-variable2>}\",",
			"      \"${6:<custom-env-variableN>}\"",
			"    ]",
			"",
			"    // allowlist",
			"    // this specifies a list of environment variables to exclusively include in the list of environment variables exposed to the child process.",
			"    // if specified, only those environment variables matching the given patterns are exposed to the child process.",
			"    // these strings are matched using Go's glob function, so wildcards are permitted.",
			"    allowlist = [",
			"      \"${7:<allowed-env-variable1>}\",",
			"      \"${8:<allowed-env-variable2>}\",",
			"      \"${9:<allowed-env-variableN>}\"",
			"    ]",
			"",
			"    // denylist",
			"    // this specifies a list of environment variables to exclusively prohibit in the list of environment variables exposed to the child process.",
			"    // if specified, any environment variables matching the given patterns will not be exposed to the child process, even if they are in the allowlist.",
			"    // the values in this option take precedence over the values in the allowlist.",
			"    // these strings are matched using Go's glob function, so wildcards are permitted.",
			"    denylist = [",
			"      \"${10:<denied-env-variable1>}\",",
			"      \"${11:<denied-env-variable2>}\",",
			"      \"${12:<denied-env-variableN>}\"",
			"    ]",
			"  }",
			"",
			"  // reload_signal",
			"  // this defines the signal that will be sent to the child process when a change occurs in a watched template.",
			"  // the signal will only be sent after the process is started, and the process will only be started after all dependent templates have been rendered at least once.",
			"  // the default value is nil, which tells Consul Template to stop the child process and spawn a new one instead of sending it a signal.",
			"  // this is useful for legacy applications or applications that cannot properly reload their configuration without a full reload.",
			"  reload_signal = \"${13:<reload-signal>}\"",
			"",
			"  // kill_signal",
			"  // this defines the signal sent to the child process when Consul Template is gracefully shutting down.",
			"  // the application should begin a graceful cleanup.",
			"  // if the application does not terminate before the `kill_timeout`, it will be terminated (effectively \"kill -9\").",
			"  // the default value is \"SIGINT\".",
			"  kill_signal = \"${14:<kill-signal>}\"",
			"",
			"  // kill_timeout",
			"  // this defines the amount of time to wait for the child process to gracefully terminate when Consul Template exits.",
			"  // after this specified time, the child process will be force-killed (effectively \"kill -9\").",
			"  // the default value is \"30s\".",
			"  kill_timeout = \"${15:<kill-timeout>}\"",
			"}",
			"$0"
		],
		"description": "consul-template full 'exec' configuration"
	},
	"consul-template configuration 'exec' - common": {
		"prefix": ["consul-template-configuration-exec-common"],
		"body": [
			"exec {",
			"  // command",
			"  // this is the command to exec as a child process.",
			"  // there can be only one command per Consul Template process.",
			"  command = \"${1:<command-to-exec>}\"",
			"",
			"  env {",
			"    // pristine",
			"    // this specifies if the child process should not inherit the parent process's environment.",
			"    // by default, the child will have full access to the environment variables of the parent.",
			"    // setting this to true will send only the values specified in 'custom' to the child process.",
			"    pristine = ${2|true,false|}",
			"  }",
			"}",
			"$0"
		],
		"description": "consul-template common 'exec' configuration"
	},
	"consul-template configuration 'exec' parameter 'command'": {
		"prefix": ["consul-template-configuration-exec-parameter-command"],
		"body": [
			"  // command",
			"  // this is the command to exec as a child process.",
			"  // there can be only one command per Consul Template process.",
			"  command = \"${1:<command-to-exec>}\"",
			"$0"
		],
		"description": "consul-template templated 'command' parameter of configuration 'exec'"
	},
	"consul-template configuration 'exec' parameter 'splay'": {
		"prefix": ["consul-template-configuration-exec-parameter-splay"],
		"body": [
			"  // splay",
			"  // this is a random splay to wait before killing the command.",
			"  // the default value is 0 (no wait), but large clusters should consider setting a splay value",
			"  // to prevent all child processes from reloading at the same time when data changes occur.",
			"  // when this value is set to non-zero, Consul Template will wait a random period of time up to the splay value before reloading",
			"  // or killing the child process. This can be used to prevent the thundering herd problem on applications that do not gracefully reload.",
			"  splay = \"${1:<splay-to-wait-before-killing-the-command>}\"",
			"$0"
		],
		"description": "consul-template templated 'splay' parameter of configuration 'exec'"
	},
	"consul-template configuration 'exec' parameter 'env' - empty": {
		"prefix": ["consul-template-configuration-exec-parameter-env-empty"],
		"body": [
			"  env {",
			"    $0",
			"  }",
			""
		],
		"description": "consul-template empty 'env' parameter of configuration 'exec'"
	},
	"consul-template configuration 'exec' parameter 'env' - full": {
		"prefix": ["consul-template-configuration-exec-parameter-env-full"],
		"body": [
			"  env {",
			"    // pristine",
			"    // this specifies if the child process should not inherit the parent process's environment.",
			"    // by default, the child will have full access to the environment variables of the parent.",
			"    // setting this to true will send only the values specified in 'custom' to the child process.",
			"    pristine = ${1|true,false|}",
			"",
			"    // custom",
			"    // this specifies additional custom environment variables in the form shown below to inject into the child's runtime environment.",
			"    // if a custom environment variable shares its name with a system environment variable, the custom environment variable takes precedence.",
			"    // even if pristine, allowlist, or denylist is specified, all values in this option are given to the child process.",
			"    custom = [",
			"      \"${2:<custom-env-variable1>}\",",
			"      \"${3:<custom-env-variable2>}\",",
			"      \"${4:<custom-env-variableN>}\"",
			"    ]",
			"",
			"    // allowlist",
			"    // this specifies a list of environment variables to exclusively include in the list of environment variables exposed to the child process.",
			"    // if specified, only those environment variables matching the given patterns are exposed to the child process.",
			"    // these strings are matched using Go's glob function, so wildcards are permitted.",
			"    allowlist = [",
			"      \"${5:<allowed-env-variable1>}\",",
			"      \"${6:<allowed-env-variable2>}\",",
			"      \"${7:<allowed-env-variableN>}\"",
			"    ]",
			"",
			"    // denylist",
			"    // this specifies a list of environment variables to exclusively prohibit in the list of environment variables exposed to the child process.",
			"    // if specified, any environment variables matching the given patterns will not be exposed to the child process, even if they are in the allowlist.",
			"    // the values in this option take precedence over the values in the allowlist.",
			"    // these strings are matched using Go's glob function, so wildcards are permitted.",
			"    denylist = [",
			"      \"${8:<denied-env-variable1>}\",",
			"      \"${9:<denied-env-variable2>}\",",
			"      \"${10:<denied-env-variableN>}\"",
			"    ]",
			"  }",
			"$0"
		],
		"description": "consul-template full 'env' parameter of configuration 'exec'"
	},
	"consul-template configuration 'exec' parameter 'env' - common": {
		"prefix": ["consul-template-configuration-exec-parameter-env-common"],
		"body": [
			"  env {",
			"    // pristine",
			"    // this specifies if the child process should not inherit the parent process's environment.",
			"    // by default, the child will have full access to the environment variables of the parent.",
			"    // setting this to true will send only the values specified in 'custom' to the child process.",
			"    pristine = ${1|true,false|}",
			"  }",
			"$0"
		],
		"description": "consul-template common 'env' parameter of configuration 'exec'"
	},
	"consul-template configuration 'exec' parameter 'env' parameter 'pristine'": {
		"prefix": ["consul-template-configuration-exec-parameter-env-parameter-pristine"],
		"body": [
			"    // pristine",
			"    // this specifies if the child process should not inherit the parent process's environment.",
			"    // by default, the child will have full access to the environment variables of the parent.",
			"    // setting this to true will send only the values specified in 'custom_env' to the child process.",
			"    pristine = ${1|true,false|}",
			"$0"
		],
		"description": "consul-template templated 'pristine' parameter of parameter 'env' of configuration 'exec'"
	},
	"consul-template configuration 'exec' parameter 'env' parameter 'custom'": {
		"prefix": ["consul-template-configuration-exec-parameter-env-parameter-custom"],
		"body": [
			"    // custom",
			"    // this specifies additional custom environment variables in the form shown below to inject into the child's runtime environment.",
			"    // if a custom environment variable shares its name with a system environment variable, the custom environment variable takes precedence.",
			"    // even if pristine, allowlist, or denylist is specified, all values in this option are given to the child process.",
			"    custom = [",
			"      \"${1:<custom-env-variable1>}\",",
			"      \"${2:<custom-env-variable2>}\",",
			"      \"${3:<custom-env-variableN>}\"",
			"    ]",
			"$0"
		],
		"description": "consul-template templated 'custom' parameter of parameter 'env' of configuration 'exec'"
	},
	"consul-template configuration 'exec' parameter 'env' parameter 'allowlist'": {
		"prefix": ["consul-template-configuration-exec-parameter-env-parameter-allowlist"],
		"body": [
			"    // allowlist",
			"    // this specifies a list of environment variables to exclusively include in the list of environment variables exposed to the child process.",
			"    // if specified, only those environment variables matching the given patterns are exposed to the child process.",
			"    // these strings are matched using Go's glob function, so wildcards are permitted.",
			"    allowlist = [",
			"      \"${1:<allowed-env-variable1>}\",",
			"      \"${2:<allowed-env-variable2>}\",",
			"      \"${3:<allowed-env-variableN>}\"",
			"    ]",
			"$0"
		],
		"description": "consul-template templated 'allowlist' parameter of parameter 'env' of configuration 'exec'"
	},
	"consul-template configuration 'exec' parameter 'env' parameter 'denylist'": {
		"prefix": ["consul-template-configuration-exec-parameter-env-parameter-denylist"],
		"body": [
			"    // denylist",
			"    // this specifies a list of environment variables to exclusively prohibit in the list of environment variables exposed to the child process.",
			"    // if specified, any environment variables matching the given patterns will not be exposed to the child process, even if they are in the allowlist.",
			"    // the values in this option take precedence over the values in the allowlist.",
			"    // these strings are matched using Go's glob function, so wildcards are permitted.",
			"    denylist = [",
			"      \"${1:<denied-env-variable1>}\",",
			"      \"${2:<denied-env-variable2>}\",",
			"      \"${3:<denied-env-variableN>}\"",
			"    ]",
			"$0"
		],
		"description": "consul-template templated 'denylist' parameter of parameter 'env' of configuration 'exec'"
	},
	"consul-template configuration 'exec' parameter 'reload_signal'": {
		"prefix": ["consul-template-configuration-exec-parameter-reload-signal"],
		"body": [
			"  // reload_signal",
			"  // this defines the signal that will be sent to the child process when a change occurs in a watched template.",
			"  // the signal will only be sent after the process is started, and the process will only be started after all dependent templates have been rendered at least once.",
			"  // the default value is nil, which tells Consul Template to stop the child process and spawn a new one instead of sending it a signal.",
			"  // this is useful for legacy applications or applications that cannot properly reload their configuration without a full reload.",
			"  reload_signal = \"${1:<reload-signal>}\"",
			"$0"
		],
		"description": "consul-template templated 'reload_signal' parameter of configuration 'exec'"
	},
	"consul-template configuration 'exec' parameter 'kill_signal'": {
		"prefix": ["consul-template-configuration-exec-parameter-kill-signal"],
		"body": [
			"  // kill_signal",
			"  // this defines the signal sent to the child process when Consul Template is gracefully shutting down.",
			"  // the application should begin a graceful cleanup.",
			"  // if the application does not terminate before the `kill_timeout`, it will be terminated (effectively \"kill -9\").",
			"  // the default value is \"SIGINT\".",
			"  kill_signal = \"${1:<kill-signal>}\"",
			"$0"
		],
		"description": "consul-template templated 'kill_signal' parameter of configuration 'exec'"
	},
	"consul-template configuration 'exec' parameter 'kill_timeout'": {
		"prefix": ["consul-template-configuration-exec-parameter-kill-timeout"],
		"body": [
			"  // kill_timeout",
			"  // this defines the amount of time to wait for the child process to gracefully terminate when Consul Template exits.",
			"  // after this specified time, the child process will be force-killed (effectively \"kill -9\").",
			"  // the default value is \"30s\".",
			"  kill_timeout = \"${1:<kill-timeout>}\"",
			"$0"
		],
		"description": "consul-template templated 'kill_timeout' parameter of configuration 'exec'"
	},
	//
	// envconsul (https://github.com/hashicorp/envconsul)
	//
	"envconsul configuration - full": {
		"prefix": ["envconsul-configuration-full"],
		"body": [
			"consul {",
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${1|true,false|}",
			"    // username",
			"    username = \"${2:<consul-username>}\"",
			"    // password",
			"    password = \"${3:<consul-password>}\"",
			"  }",
			"",
			"  // address",
			"  // this is the address of the Consul agent.",
			"  // by default, this is 127.0.0.1:8500, which is the default bind and port for a local Consul agent.",
			"  // it is not recommended that you communicate directly with a Consul server, and instead communicate with the local Consul agent.",
			"  // there are many reasons for this, most importantly the Consul agent is able to multiplex",
			"  // connections to the Consul server and reduce the number of open HTTP connections.",
			"  // Additionally, it provides a 'well-known' IP address for which clients can connect.",
			"  address = \"${4:<consul-address>}\"",
			"",
			"  // token",
			"  // this is the ACL token to use when connecting to Consul.",
			"  // if you did not enable ACLs on your Consul cluster, you do not need to set this option.",
			"  // this option is also available via the environment variable 'CONSUL_TOKEN'.",
			"  token = \"${5:<consul-acl-token>}\"",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Envconsul is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${6|true,false|}",
			"",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${7:<retry-attempts>}",
			"",
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff     = \"${8:<sleep-time-between-retry-attempts>}\"",
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${9:<max-sleep-time-between-retry-attempts>}\"",
			"  }",
			"",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${10:|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${11|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    cert = \"${12:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    key  = \"${13:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${14:<path-to-ca-cert-file>}\"",
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${15:<path-to-ca-cert-directory>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${16:<sni-server-name>}\"",
			"  }",
			"}",
			"",
			"exec {",
			"  // command",
			"  // this is the command to exec as a child process.",
			"  // there can be only one command per Envconsul process.",
			"  command = \"${17:<command-to-exec>}\"",
			"",
			"  // splay",
			"  // this is a random splay to wait before killing the command.",
			"  // the default value is 0 (no wait), but large clusters should consider setting a splay value",
			"  // to prevent all child processes from reloading at the same time when data changes occur.",
			"  // when this value is set to non-zero, Envconsul will wait a random period of time up to the splay value before reloading",
			"  // or killing the child process. This can be used to prevent the thundering herd problem on applications that do not gracefully reload.",
			"  splay = \"${18:<time-to-wait-before-killing-the-command>}\"",
			"",
			"  env {",
			"    // pristine",
			"    // this specifies if the child process should not inherit the parent process's environment.",
			"    // by default, the child will have full access to the environment variables of the parent.",
			"    // setting this to true will send only the values specified in 'custom' to the child process.",
			"    pristine = ${19|true,false|}",
			"",
			"    // custom",
			"    // this specifies additional custom environment variables in the form shown below to inject into the child's runtime environment.",
			"    // if a custom environment variable shares its name with a system environment variable, the custom environment variable takes precedence.",
			"    // even if pristine, allowlist, or denylist is specified, all values in this option are given to the child process.",
			"    custom = [",
			"      \"${20:<custom-env-variable1>}\",",
			"      \"${21:<custom-env-variable2>}\",",
			"      \"${22:<custom-env-variableN>}\"",
			"    ]",
			"",
			"    // allowlist",
			"    // this specifies a list of environment variables to exclusively include in the list of environment variables exposed to the child process.",
			"    // if specified, only those environment variables matching the given patterns are exposed to the child process.",
			"    // these strings are matched using Go's glob function, so wildcards are permitted.",
			"    allowlist = [",
			"      \"${23:<allowed-env-variable1>}\",",
			"      \"${24:<allowed-env-variable2>}\",",
			"      \"${25:<allowed-env-variableN>}\"",
			"    ]",
			"",
			"    // denylist",
			"    // this specifies a list of environment variables to exclusively prohibit in the list of environment variables exposed to the child process.",
			"    // if specified, any environment variables matching the given patterns will not be exposed to the child process, even if they are in the allowlist.",
			"    // the values in this option take precedence over the values in the allowlist.",
			"    // these strings are matched using Go's glob function, so wildcards are permitted.",
			"    denylist = [",
			"      \"${26:<denied-env-variable1>}\",",
			"      \"${27:<denied-env-variable2>}\",",
			"      \"${28:<denied-env-variableN>}\"",
			"    ]",
			"  }",
			"",
			"  // kill_signal",
			"  // this defines the signal sent to the child process when Envconsul is gracefully shutting down.",
			"  // the application should begin a graceful cleanup.",
			"  // if the application does not terminate before the `kill_timeout`, it will be terminated (effectively \"kill -9\").",
			"  // the default value is \"SIGTERM\".",
			"  kill_signal = \"${30:<kill-signal>}\"",
			"",
			"  // kill_timeout",
			"  // this defines the amount of time to wait for the child process to gracefully terminate when Envconsul exits.",
			"  // after this specified time, the child process will be force-killed (effectively \"kill -9\").",
			"  // the default value is \"30s\".",
			"  kill_timeout = \"${31:<kill-timeout>}\"",
			"}",
			"",
			"// kill_signal",
			"// this is the signal to listen for to trigger a graceful stop.",
			"// setting this value to the empty string will cause it to not listen for any graceful stop signals.",
			"// the default value is \"SIGINT\".",
			"kill_signal = \"${32:<kill-signal>}\"",
			"",
			"// log_level",
			"// this is the log level. If you find a bug in Envconsul, please enable debug or trace logs so we can help identify the issue.",
			"// this is also available as a command line flag.",
			"// defaults to \"warn\"",
			"log_level = \"${33:<log-level>}\"",
			"",
			"// max_stale",
			"// Consul leader will respond to queries; any requests to a follower will forward to the leader.",
			"// in large clusters with many requests, this is not as scalable, so this option allows any follower to respond to a query,",
			"// so long as the last-replicated data is within these bounds.",
			"// higher values result in less cluster load, but are more likely to have outdated data.",
			"max_stale = \"${34:<max-stale>}\"",
			"",
			"// pid_file",
			"// this is the path to store a PID file which will contain the process ID of the Envconsul process.",
			"// this is useful if you plan to send custom signals to the process.",
			"pid_file = \"${35:<path-to-pid-file>}\"",
			"",
			"prefix {",
			"  // format",
			"  // this tells Envconsul to use a custom formatter when printing the key.",
			"  //",
			"  // the value between `{{ key }}` will be replaced with the key.",
			"  //   format = \"custom_{{ key }}\"",
			"  //",
			"  // the value after \"replaceKey\" in  `{{ key | replaceKey `actualKey` `expectedKey` }}` will be replaced with the next value.",
			"  // you could replace more then one key.",
			"  //   format = \"custom_{{ key | replaceKey `actualKey1` `expectedKey1` | replaceKey `actualKey2` `expectedKey2` }}\"",
			"  format = \"${36:<custom-formatter>}\"",
			"",
			"  // no_prefix",
			"  // this tells Envconsul to not prefix the keys with their parent \"folder\".",
			"  // the default for `prefix` (consul) is true, the default for `secret` (vault) is false.",
			"  // the differing defaults is to maintain backward compatibility.",
			"  no_prefix = ${37|true,false|}",
			"",
			"  // path",
			"  // this is the path of the key in Consul or Vault from which to read data.",
			"  // the path field is required or the config block will be ignored.",
			"  //   path = \"foo/bar\"",
			"  //",
			"  // this tells Envconsul to use a custom formatter when building the path for the key from which to read data,",
			"  // in this case reading an environment variable and putting it into the path.",
			"  //   path = \"foo/{{ env \"BAR\" }}\"",
			"  path = \"${38:<path-of-the key-in-consul-or-vault>}\"",
			"}",
			"",
			"// pristine",
			"// this tells Envconsul to not include the parent processes' environment when launching the child process.",
			"pristine = ${39|true,false|}",
			"",
			"// reload_signal",
			"// this is the signal to listen for to trigger a reload event.",
			"// the default value is \"SIGHUP\".",
			"// setting this value to the empty string will cause it to not listen for any reload signals.",
			"reload_signal = \"${40:<reload-signal>}\"",
			"",
			"// sanitize",
			"// this tell Envconsul to remove any non-standard values from environment variable keys and replace them with underscores.",
			"sanitize = ${41|true,false|}",
			"",
			"secret {",
			"  // format",
			"  // this tells Envconsul to use a custom formatter when printing the key.",
			"  //",
			"  // the value between `{{ key }}` will be replaced with the key.",
			"  //   format = \"custom_{{ key }}\"",
			"  //",
			"  // the value after \"replaceKey\" in  `{{ key | replaceKey `actualKey` `expectedKey` }}` will be replaced with the next value.",
			"  // you could replace more then one key.",
			"  //   format = \"custom_{{ key | replaceKey `actualKey1` `expectedKey1` | replaceKey `actualKey2` `expectedKey2` }}\"",
			"  format = \"${42:<custom-formatter>}\"",
			"",
			"  // no_prefix",
			"  // this tells Envconsul to not prefix the keys with their parent \"folder\".",
			"  // the default for `prefix` (consul) is true, the default for `secret` (vault) is false.",
			"  // the differing defaults is to maintain backward compatibility.",
			"  no_prefix = ${43|true,false|}",
			"",
			"  // path",
			"  // this is the path of the key in Consul or Vault from which to read data.",
			"  // the path field is required or the config block will be ignored.",
			"  //   path = \"foo/bar\"",
			"  //",
			"  // this tells Envconsul to use a custom formatter when building the path for the key from which to read data,",
			"  // in this case reading an environment variable and putting it into the path.",
			"  //   path = \"foo/{{ env \"BAR\" }}\"",
			"  path = \"${44:<path-of-the key-in-consul-or-vault>}\"",
			"}",
			"",
			"// this block defines the configuration for connecting to a syslog server for logging.",
			"syslog {",
			"  // enabled",
			"  // this enables syslog logging.",
			"  // specifying any other option also enables syslog logging.",
			"  enabled = \"${45:<syslog-enabled>}\"",
			"",
			"  // facility",
			"  // this is the name of the syslog facility to log to.",
			"  facility = \"${46:<syslog-facility>}\"",
			"}",
			"",
			"// upcase",
			"// this tells Envconsul to convert environment variable keys to uppercase (which is more common and a bit more standard).",
			"upcase = ${47|true,false|}",
			"",
			"vault {",
			"  // address",
			"  // this is the address of the Vault leader.",
			"  // the protocol (http(s)) portion of the address is required.",
			"  address = \"${48:<vault-address>}\"",
			"",
			"  // namespace",
			"  // this is a Vault Enterprise namespace to use for reading/writing secrets.",
			"  // this value can also be specified via the environment variable 'VAULT_NAMESPACE'.",
			"  namespace = \"${49:<vault-namespace>}\"",
			"",
			"  // token",
			"  // this is the token to use when communicating with the Vault server.",
			"  // like other tools that integrate with Vault, Envconsul makes the assumption that you provide it with a Vault token;",
			"  // it does not have the incorporated logic to generate tokens via Vault's auth methods.",
			"  // this value can also be specified via the environment variable 'VAULT_TOKEN'.",
			"  // it is highly recommended that you do not put your token in plain-text in a configuration file.",
			"  // when using a token from Vault Agent, the vault_agent_token_file setting should be used instead, as that will take precedence over this field.",
			"  token = \"${50:<vault-token>}\"",
			"",
			"  // vault_agent_token_file",
			"  // this tells Envconsul to load the Vault token from the contents of a file.",
			"  // if this field is specified:",
			"  //   - by default Envconsul will not try to renew the Vault token, if you want it",
			"  // to renew you will need to specify renew_token = true as below.",
			"  //   - Envconsul will periodically stat the file and update the token if it has changed.",
			"  vault_agent_token_file = \"${51:<vault-agent-token-file>}\"",
			"",
			"  // unwrap_token",
			"  // this tells Envconsul that the provided token is actually a wrapped",
			"  // token that should be unwrapped using Vault's cubbyhole response wrapping before being used.",
			"  // please see Vault's cubbyhole response wrapping documentation for more information.",
			"  unwrap_token = \"${52:<vault-unwrap-token>}\"",
			"",
			"  // renew_token",
			"  // this option tells Envconsul to automatically renew the Vault token given.",
			"  // if you are unfamiliar with Vault's architecture, Vault requires tokens be renewed at some regular interval or they will be revoked.",
			"  // Envconsul will automatically renew the token at half the lease duration of the token.",
			"  // the default value is true, but this option can be disabled if you want to renew the Vault token using an out-of-band process.",
			"  // note that secrets specified in a template (using {{secret}} for example) are always renewed, even if this option is set to false.",
			"  // this option only applies to the top-level Vault token itself.",
			"  renew_token = ${53|true,false|}",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Envconsul is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${54|true,false|}",
			"",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${55:<retry-attempts>}",
			"",
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff     = \"${56:<sleep-time-between-retry-attempts>}\"",
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${57:<max-sleep-time-between-retry-attempts>}\"",
			"  }",
			"",
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${58|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${59|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    cert = \"${60:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    key  = \"${61:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${62:<path-to-ca-cert-file>}\"",
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${63:<path-to-ca-cert-directory>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${64:<sni-server-name>}\"",
			"  }",
			"}",
			"",
			"service {",
			"  // query",
			"  // this is the query of the service in Consul from which to read data.",
			"  query = \"${65:<service-to-watch>}\"",
			"",
			"  // formatter",
			"  // this tells Envconsul to use a custom formatter when printing the key.",
			"  // the value between `{{ key }}` and `{{ service }}` will be replaced with the key and service name.",
			"  // default format `{{ service }}/{{ key }}`",
			"  format_id      = \"${66:<custom_id>}\"",
			"  format_name    = \"${67:<custom_name>}\"",
			"  format_address = \"${68:<custom_address>}\"",
			"  format_tag     = \"${69:<custom_tag>}\"",
			"  format_port    = \"${70:<custom_port>}\"",
			"}",
			"",
			"// wait",
			"// this is the quiescence timers; it defines the minimum and maximum amount of time to wait for the cluster to reach a consistent state",
			"// before relaunching the app.",
			"// this is useful to enable in systems that have a lot of flapping, because it will reduce the the number of times the app is restarted.",
			"wait {",
			"  min = \"${71:<minimum-wait-for-consistent-cluster-state>}\"",
			"  max = \"${72:<maximum-wait-for-consistent-cluster-state>}\"",
			"}",
			"$0"
		],
		"description": "full envconsul configuration"
	},
	"envconsul configuration - common": {
		"prefix": ["envconsul-configuration-common"],
		"body": [
			"consul {",
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${1|true,false|}",
			"    // username",
			"    username = \"${2:<consul-username>}\"",
			"    // password",
			"    password = \"${3:<consul-password>}\"",
			"  }",
			"",
			"  // address",
			"  // this is the address of the Consul agent.",
			"  // by default, this is 127.0.0.1:8500, which is the default bind and port for a local Consul agent.",
			"  // it is not recommended that you communicate directly with a Consul server, and instead communicate with the local Consul agent.",
			"  // there are many reasons for this, most importantly the Consul agent is able to multiplex",
			"  // connections to the Consul server and reduce the number of open HTTP connections.",
			"  // Additionally, it provides a 'well-known' IP address for which clients can connect.",
			"  address = \"${4:<consul-address>}\"",
			"",
			"  // token",
			"  // this is the ACL token to use when connecting to Consul.",
			"  // if you did not enable ACLs on your Consul cluster, you do not need to set this option.",
			"  // this option is also available via the environment variable 'CONSUL_TOKEN'.",
			"  token = \"${5:<consul-acl-token>}\"",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Envconsul is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${6:<retry-attempts>}",
			"  }",
			"",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${7|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${8|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    cert = \"${9:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    key  = \"${10:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${11:<path-to-ca-cert-file>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${12:<sni-server-name>}\"",
			"  }",
			"}",
			"",
			"exec {",
			"  // command",
			"  // this is the command to exec as a child process.",
			"  // there can be only one command per Envconsul process.",
			"  command = \"${13:<command-to-exec>}\"",
			"",
			"  env {",
			"    // pristine",
			"    // this specifies if the child process should not inherit the parent process's environment.",
			"    // by default, the child will have full access to the environment variables of the parent.",
			"    // setting this to true will send only the values specified in 'custom' to the child process.",
			"    pristine = ${14|true,false|}",
			"  }",
			"}",
			"",
			"// pid_file",
			"// this is the path to store a PID file which will contain the process ID of the Envconsul process.",
			"// this is useful if you plan to send custom signals to the process.",
			"pid_file = \"${15:<path-to-pid-file>}\"",
			"",
			"prefix {",
			"  // path",
			"  // this is the path of the key in Consul or Vault from which to read data.",
			"  // the path field is required or the config block will be ignored.",
			"  //   path = \"foo/bar\"",
			"  //",
			"  // this tells Envconsul to use a custom formatter when building the path for the key from which to read data,",
			"  // in this case reading an environment variable and putting it into the path.",
			"  //   path = \"foo/{{ env \"BAR\" }}\"",
			"  path = \"${16:<path-of-the key-in-consul-or-vault>}\"",
			"}",
			"",
			"// pristine",
			"// this tells Envconsul to not include the parent processes' environment when launching the child process.",
			"pristine = ${17|true,false|}",
			"",
			"secret {",
			"  // path",
			"  // this is the path of the key in Consul or Vault from which to read data.",
			"  // the path field is required or the config block will be ignored.",
			"  //   path = \"foo/bar\"",
			"  //",
			"  // this tells Envconsul to use a custom formatter when building the path for the key from which to read data,",
			"  // in this case reading an environment variable and putting it into the path.",
			"  //   path = \"foo/{{ env \"BAR\" }}\"",
			"  path = \"${18:<path-of-the key-in-consul-or-vault>}\"",
			"}",
			"",
			"// this block defines the configuration for connecting to a syslog server for logging.",
			"syslog {",
			"  // enabled",
			"  // this enables syslog logging.",
			"  // specifying any other option also enables syslog logging.",
			"  enabled = \"${19:<syslog-enabled>}\"",
			"",
			"  // facility",
			"  // this is the name of the syslog facility to log to.",
			"  facility = \"${20:<syslog-facility>}\"",
			"}",
			"",
			"// upcase",
			"// this tells Envconsul to convert environment variable keys to uppercase (which is more common and a bit more standard).",
			"upcase = ${21|true,false|}",
			"",
			"vault {",
			"  // address",
			"  // this is the address of the Vault leader.",
			"  // the protocol (http(s)) portion of the address is required.",
			"  address = \"${22:<vault-address>}\"",
			"",
			"  // namespace",
			"  // this is a Vault Enterprise namespace to use for reading/writing secrets.",
			"  // this value can also be specified via the environment variable 'VAULT_NAMESPACE'.",
			"  namespace = \"${23:<vault-namespace>}\"",
			"",
			"  // token",
			"  // this is the token to use when communicating with the Vault server.",
			"  // like other tools that integrate with Vault, Envconsul makes the assumption that you provide it with a Vault token;",
			"  // it does not have the incorporated logic to generate tokens via Vault's auth methods.",
			"  // this value can also be specified via the environment variable 'VAULT_TOKEN'.",
			"  // it is highly recommended that you do not put your token in plain-text in a configuration file.",
			"  // when using a token from Vault Agent, the vault_agent_token_file setting should be used instead, as that will take precedence over this field.",
			"  token = \"${24:<vault-token>}\"",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Envconsul is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${25:<retry-attempts>}",
			"  }",
			"",
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${26|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${27|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    cert = \"${28:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    key  = \"${29:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${30:<path-to-ca-cert-file>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${31:<sni-server-name>}\"",
			"  }",
			"}",
			"",
			"// this specifies a service in Consul to watch. This may be specified multiple times to watch multiple prefixes,",
			"// and the bottom-most service takes precedence, should any values overlap.",
			"service {",
			"  // query",
			"  // this is the query of the service in Consul from which to read data.",
			"  query = \"${32:<service-to-watch>}\"",
			"}",
			"$0"
		],
		"description": "common envconsul configuration"
	},
	"envconsul configuration 'consul' - empty": {
		"prefix": ["envconsul-configuration-consul-empty"],
		"body": [
			"consul {",
			"  $0",
			"}",
			""
		],
		"description": "envconsul empty 'consul' configuration"
	},
	"envconsul configuration 'consul' - full": {
		"prefix": ["envconsul-configuration-consul-full"],
		"body": [
			"consul {",
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${1|true,false|}",
			"    // username",
			"    username = \"${2:<consul-username>}\"",
			"    // password",
			"    password = \"${3:<consul-password>}\"",
			"  }",
			"",
			"  // address",
			"  // this is the address of the Consul agent.",
			"  // by default, this is 127.0.0.1:8500, which is the default bind and port for a local Consul agent.",
			"  // it is not recommended that you communicate directly with a Consul server, and instead communicate with the local Consul agent.",
			"  // there are many reasons for this, most importantly the Consul agent is able to multiplex",
			"  // connections to the Consul server and reduce the number of open HTTP connections.",
			"  // Additionally, it provides a 'well-known' IP address for which clients can connect.",
			"  address = \"${4:<consul-address>}\"",
			"",
			"  // token",
			"  // this is the ACL token to use when connecting to Consul.",
			"  // if you did not enable ACLs on your Consul cluster, you do not need to set this option.",
			"  // this option is also available via the environment variable 'CONSUL_TOKEN'.",
			"  token = \"${5:<consul-acl-token>}\"",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Envconsul is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${6|true,false|}",
			"",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${7:<retry-attempts>}",
			"",
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff     = \"${8:<sleep-time-between-retry-attempts>}\"",
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${9:<max-sleep-time-between-retry-attempts>}\"",
			"  }",
			"",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${10|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${11|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    cert = \"${12:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    key  = \"${13:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${14:<path-to-ca-cert-file>}\"",
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${15:<path-to-ca-cert-directory>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${16:<sni-server-name>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "envconsul full 'consul' configuration"
	},
	"envconsul configuration 'consul' - common": {
		"prefix": ["envconsul-configuration-consul-common"],
		"body": [
			"consul {",
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${1|true,false|}",
			"    // username",
			"    username = \"${2:<consul-username>}\"",
			"    // password",
			"    password = \"${3:<consul-password>}\"",
			"  }",
			"",
			"  // address",
			"  // this is the address of the Consul agent.",
			"  // by default, this is 127.0.0.1:8500, which is the default bind and port for a local Consul agent.",
			"  // it is not recommended that you communicate directly with a Consul server, and instead communicate with the local Consul agent.",
			"  // there are many reasons for this, most importantly the Consul agent is able to multiplex",
			"  // connections to the Consul server and reduce the number of open HTTP connections.",
			"  // Additionally, it provides a 'well-known' IP address for which clients can connect.",
			"  address = \"${4:<consul-address>}\"",
			"",
			"  // token",
			"  // this is the ACL token to use when connecting to Consul.",
			"  // if you did not enable ACLs on your Consul cluster, you do not need to set this option.",
			"  // this option is also available via the environment variable 'CONSUL_TOKEN'.",
			"  token = \"${5:<consul-acl-token>}\"",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Envconsul is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${6:<retry-attempts>}",
			"  }",
			"",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${7|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${8|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    cert = \"${9:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    key  = \"${10:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${11:<path-to-ca-cert-file>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${12:<sni-server-name>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "envconsul common 'consul' configuration"
	},
	"envconsul configuration 'consul' parameter 'auth' - empty": {
		"prefix": ["envconsul-configuration-consul-parameter-auth-empty"],
		"body": [
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    $0",
			"  }",
			""
		],
		"description": "envconsul empty 'auth' parameter of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'auth' - full": {
		"prefix": ["envconsul-configuration-consul-parameter-auth-full"],
		"body": [
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${1|true,false|}",
			"    // username",
			"    username = \"${2:<consul-username>}\"",
			"    // password",
			"    password = \"${3:<consul-password>}\"",
			"  }",
			"$0"
		],
		"description": "envconsul full 'auth' parameter of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'auth' - common": {
		"prefix": ["envconsul-configuration-consul-parameter-auth-common"],
		"body": [
			"  // this block specifies the basic authentication information to pass with the request.",
			"  // for more information on authentication, please see the Consul documentation.",
			"  auth {",
			"    // enabled",
			"    enabled  = ${1|true,false|}",
			"    // username",
			"    username = \"${2:<consul-username>}\"",
			"    // password",
			"    password = \"${3:<consul-password>}\"",
			"  }",
			"$0"
		],
		"description": "envconsul common 'auth' parameter of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'auth' parameter 'enabled'": {
		"prefix": ["envconsul-configuration-consul-parameter-auth-parameter-enabled"],
		"body": [
			"    // enabled",
			"    enabled = ${1|true,false|}",
			"$0"
		],
		"description": "envconsul templated 'enabled' parameter of parameter 'auth' of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'auth' parameter 'username'": {
		"prefix": ["envconsul-configuration-consul-parameter-auth-parameter-username"],
		"body": [
			"    // username",
			"    username = \"${1:<consul-username>}\"",
			"$0"
		],
		"description": "envconsul templated 'username' parameter of parameter 'auth' of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'auth' parameter 'password'": {
		"prefix": ["envconsul-configuration-consul-parameter-auth-parameter-password"],
		"body": [
			"    // password",
			"    password = \"${1:<consul-password>}\"",
			"$0"
		],
		"description": "envconsul templated 'password' parameter of parameter 'auth' of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'address'": {
		"prefix": ["envconsul-configuration-consul-parameter-address"],
		"body": [
			"  // address",
			"  // this is the address of the Consul agent.",
			"  // by default, this is 127.0.0.1:8500, which is the default bind and port for a local Consul agent.",
			"  // it is not recommended that you communicate directly with a Consul server, and instead communicate with the local Consul agent.",
			"  // there are many reasons for this, most importantly the Consul agent is able to multiplex",
			"  // connections to the Consul server and reduce the number of open HTTP connections.",
			"  // Additionally, it provides a 'well-known' IP address for which clients can connect.",
			"  address = \"${1:<consul-address>}\"",
			"$0"
		],
		"description": "envconsul templated 'address' parameter of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'token'": {
		"prefix": ["envconsul-configuration-consul-parameter-token"],
		"body": [
			"  // token",
			"  // this is the ACL token to use when connecting to Consul.",
			"  // if you did not enable ACLs on your Consul cluster, you do not need to set this option.",
			"  // this option is also available via the environment variable 'CONSUL_TOKEN'.",
			"  token = \"${1:<consul-acl-token>}\"",
			"$0"
		],
		"description": "envconsul templated 'token' parameter of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'retry' - empty": {
		"prefix": ["envconsul-configuration-consul-parameter-retry-empty"],
		"body": [
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Envconsul is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    $0",
			"  }",
			""
		],
		"description": "envconsul empty 'retry' parameter of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'retry' - full": {
		"prefix": ["envconsul-configuration-consul-parameter-retry-full"],
		"body": [
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Envconsul is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${1|true,false|}",
			"",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${2:<retry-attempts>}",
			"",
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff     = \"${3:<sleep-time-between-retry-attempts>}\"",
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${4:<max-sleep-time-between-retry-attempts>}\"",
			"  }",
			"$0"
		],
		"description": "envconsul full 'retry' parameter of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'retry' - common": {
		"prefix": ["envconsul-configuration-consul-parameter-retry-common"],
		"body": [
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Envconsul is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${1:<retry-attempts>}",
			"  }",
			"$0"
		],
		"description": "envconsul common 'retry' parameter of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'retry' parameter 'enabled'": {
		"prefix": ["envconsul-configuration-consul-parameter-retry-parameter-enabled"],
		"body": [
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${1|true,false|}",
			"$0"
		],
		"description": "envconsul templated 'enabled' parameter of parameter 'retry' of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'retry' parameter 'attempts'": {
		"prefix": ["envconsul-configuration-consul-parameter-retry-parameter-attempts"],
		"body": [
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${1:<retry-attempts>}",
			"$0"
		],
		"description": "envconsul templated 'attempts' parameter of parameter 'retry' of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'retry' parameter 'backoff'": {
		"prefix": ["envconsul-configuration-consul-parameter-retry-parameter-backoff"],
		"body": [
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff = \"${1:<sleep-time-between-retry-attempts>}\"",
			"$0"
		],
		"description": "envconsul templated 'backoff' parameter of parameter 'retry' of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'retry' parameter 'max_backoff'": {
		"prefix": ["envconsul-configuration-consul-parameter-retry-parameter-max-backoff"],
		"body": [
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${1:<max-sleep-time-between-retry-attempts>}\"",
			"$0"
		],
		"description": "envconsul templated 'max_backoff' parameter of parameter 'retry' of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'ssl' - empty": {
		"prefix": ["envconsul-configuration-consul-parameter-ssl-empty"],
		"body": [
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    $0",
			"  }",
			""
		],
		"description": "envconsul empty 'ssl' parameter of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'ssl' - full": {
		"prefix": ["envconsul-configuration-consul-parameter-ssl-full"],
		"body": [
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${1|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${2|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    cert = \"${3:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    key  = \"${4:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${5:<path-to-ca-cert-file>}\"",
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${6:<path-to-ca-cert-directory>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${7:<sni-server-name>}\"",
			"  }",
			"$0"
		],
		"description": "envconsul full 'ssl' parameter of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'ssl' - common": {
		"prefix": ["envconsul-configuration-consul-parameter-ssl-common"],
		"body": [
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${1|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${2|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    cert = \"${3:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    key  = \"${4:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${5:<path-to-ca-cert-file>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${6:<sni-server-name>}\"",
			"  }",
			"$0"
		],
		"description": "envconsul common 'ssl' parameter of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'ssl' parameter 'enabled'": {
		"prefix": ["envconsul-configuration-consul-parameter-ssl-parameter-enabled"],
		"body": [
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${1|true,false|}",
			"$0"
		],
		"description": "envconsul templated 'enabled' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'ssl' parameter 'verify'": {
		"prefix": ["envconsul-configuration-consul-parameter-ssl-parameter-verify"],
		"body": [
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${1|true,false|}",
			"$0"
		],
		"description": "envconsul templated 'verify' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'ssl' parameter 'cert'": {
		"prefix": ["envconsul-configuration-consul-parameter-ssl-parameter-cert"],
		"body": [
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    cert = \"${1:<path-to-client-cert>}\"",
			"$0"
		],
		"description": "envconsul templated 'cert' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'ssl' parameter 'key'": {
		"prefix": ["envconsul-configuration-consul-parameter-ssl-parameter-key"],
		"body": [
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    key = \"${1:<path-to-client-key>}\"",
			"$0"
		],
		"description": "envconsul templated 'key' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'ssl' parameter 'ca_cert'": {
		"prefix": ["envconsul-configuration-consul-parameter-ssl-parameter-ca-cert"],
		"body": [
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${1:<path-to-ca-cert-file>}\"",
			"$0"
		],
		"description": "envconsul templated 'ca_cert' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'ssl' parameter 'ca_path'": {
		"prefix": ["envconsul-configuration-consul-parameter-ssl-parameter-ca-path"],
		"body": [
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${1:<path-to-ca-cert-directory>}\"",
			"$0"
		],
		"description": "envconsul templated 'ca_path' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"envconsul configuration 'consul' parameter 'ssl' parameter 'server_name'": {
		"prefix": ["envconsul-configuration-consul-parameter-ssl-parameter-server-name"],
		"body": [
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${1:<sni-server-name>}\"",
			"$0"
		],
		"description": "envconsul templated 'server_name' parameter of parameter 'ssl' of configuration 'consul'"
	},
	"envconsul configuration 'exec' - empty": {
		"prefix": ["envconsul-configuration-exec-empty"],
		"body": [
			"exec {",
			"  $0",
			"}",
			""
		],
		"description": "envconsul empty 'exec' configuration"
	},
	"envconsul configuration 'exec' - full": {
		"prefix": ["envconsul-configuration-exec-full"],
		"body": [
			"exec {",
			"  // command",
			"  // this is the command to exec as a child process.",
			"  // there can be only one command per Envconsul process.",
			"  command = \"${1:<command-to-exec>}\"",
			"",
			"  // splay",
			"  // this is a random splay to wait before killing the command.",
			"  // the default value is 0 (no wait), but large clusters should consider setting a splay value",
			"  // to prevent all child processes from reloading at the same time when data changes occur.",
			"  // when this value is set to non-zero, Envconsul will wait a random period of time up to the splay value before reloading",
			"  // or killing the child process. This can be used to prevent the thundering herd problem on applications that do not gracefully reload.",
			"  splay = \"${2:<time-to-wait-before-killing-the-command>}\"",
			"",
			"  env {",
			"    // pristine",
			"    // this specifies if the child process should not inherit the parent process's environment.",
			"    // by default, the child will have full access to the environment variables of the parent.",
			"    // setting this to true will send only the values specified in 'custom' to the child process.",
			"    pristine = ${3|true,false|}",
			"",
			"    // custom",
			"    // this specifies additional custom environment variables in the form shown below to inject into the child's runtime environment.",
			"    // if a custom environment variable shares its name with a system environment variable, the custom environment variable takes precedence.",
			"    // even if pristine, allowlist, or denylist is specified, all values in this option are given to the child process.",
			"    custom = [",
			"      \"${4:<custom-env-variable1>}\",",
			"      \"${5:<custom-env-variable2>}\",",
			"      \"${6:<custom-env-variableN>}\"",
			"    ]",
			"",
			"    // allowlist",
			"    // this specifies a list of environment variables to exclusively include in the list of environment variables exposed to the child process.",
			"    // if specified, only those environment variables matching the given patterns are exposed to the child process.",
			"    // these strings are matched using Go's glob function, so wildcards are permitted.",
			"    allowlist = [",
			"      \"${7:<allowed-env-variable1>}\",",
			"      \"${8:<allowed-env-variable2>}\",",
			"      \"${9:<allowed-env-variableN>}\"",
			"    ]",
			"",
			"    // denylist",
			"    // this specifies a list of environment variables to exclusively prohibit in the list of environment variables exposed to the child process.",
			"    // if specified, any environment variables matching the given patterns will not be exposed to the child process, even if they are in the allowlist.",
			"    // the values in this option take precedence over the values in the allowlist.",
			"    // these strings are matched using Go's glob function, so wildcards are permitted.",
			"    denylist = [",
			"      \"${10:<denied-env-variable1>}\",",
			"      \"${11:<denied-env-variable2>}\",",
			"      \"${12:<denied-env-variableN>}\"",
			"    ]",
			"  }",
			"",
			"  // kill_signal",
			"  // this defines the signal sent to the child process when Envconsul is gracefully shutting down.",
			"  // the application should begin a graceful cleanup.",
			"  // if the application does not terminate before the `kill_timeout`, it will be terminated (effectively \"kill -9\").",
			"  // the default value is \"SIGINT\".",
			"  kill_signal = \"${14:<kill-signal>}\"",
			"",
			"  // kill_timeout",
			"  // this defines the amount of time to wait for the child process to gracefully terminate when Envconsul exits.",
			"  // after this specified time, the child process will be force-killed (effectively \"kill -9\").",
			"  // the default value is \"30s\".",
			"  kill_timeout = \"${15:<kill-timeout>}\"",
			"}",
			"$0"
		],
		"description": "envconsul full 'exec' configuration"
	},
	"envconsul configuration 'exec' - common": {
		"prefix": ["envconsul-configuration-exec-common"],
		"body": [
			"exec {",
			"  // command",
			"  // this is the command to exec as a child process.",
			"  // there can be only one command per Envconsul process.",
			"  command = \"${1:<command-to-exec>}\"",
			"",
			"  env {",
			"    // pristine",
			"    // this specifies if the child process should not inherit the parent process's environment.",
			"    // by default, the child will have full access to the environment variables of the parent.",
			"    // setting this to true will send only the values specified in 'custom' to the child process.",
			"    pristine = ${2|true,false|}",
			"  }",
			"}",
			"$0"
		],
		"description": "envconsul common 'exec' configuration"
	},
	"envconsul configuration 'exec' parameter 'command'": {
		"prefix": ["envconsul-configuration-exec-parameter-command"],
		"body": [
			"  // command",
			"  // this is the command to exec as a child process.",
			"  // there can be only one command per Envconsul process.",
			"  command = \"${1:<command-to-exec>}\"",
			"$0"
		],
		"description": "envconsul templated 'command' parameter of configuration 'exec'"
	},
	"envconsul configuration 'exec' parameter 'splay'": {
		"prefix": ["envconsul-configuration-exec-parameter-splay"],
		"body": [
			"  // splay",
			"  // this is a random splay to wait before killing the command.",
			"  // the default value is 0 (no wait), but large clusters should consider setting a splay value",
			"  // to prevent all child processes from reloading at the same time when data changes occur.",
			"  // when this value is set to non-zero, Envconsul will wait a random period of time up to the splay value before reloading",
			"  // or killing the child process. This can be used to prevent the thundering herd problem on applications that do not gracefully reload.",
			"  splay = \"${1:<splay-to-wait-before-killing-the-command>}\"",
			"$0"
		],
		"description": "envconsul templated 'splay' parameter of configuration 'exec'"
	},
	"envconsul configuration 'exec' parameter 'env' - empty": {
		"prefix": ["envconsul-configuration-exec-parameter-env-empty"],
		"body": [
			"  env {",
			"    $0",
			"  }",
			""
		],
		"description": "envconsul empty 'env' parameter of configuration 'exec'"
	},
	"envconsul configuration 'exec' parameter 'env' - full": {
		"prefix": ["envconsul-configuration-exec-parameter-env-full"],
		"body": [
			"  env {",
			"    // pristine",
			"    // this specifies if the child process should not inherit the parent process's environment.",
			"    // by default, the child will have full access to the environment variables of the parent.",
			"    // setting this to true will send only the values specified in 'custom' to the child process.",
			"    pristine = ${1|true,false|}",
			"",
			"    // custom",
			"    // this specifies additional custom environment variables in the form shown below to inject into the child's runtime environment.",
			"    // if a custom environment variable shares its name with a system environment variable, the custom environment variable takes precedence.",
			"    // even if pristine, allowlist, or denylist is specified, all values in this option are given to the child process.",
			"    custom = [",
			"      \"${2:<custom-env-variable1>}\",",
			"      \"${3:<custom-env-variable2>}\",",
			"      \"${4:<custom-env-variableN>}\"",
			"    ]",
			"",
			"    // allowlist",
			"    // this specifies a list of environment variables to exclusively include in the list of environment variables exposed to the child process.",
			"    // if specified, only those environment variables matching the given patterns are exposed to the child process.",
			"    // these strings are matched using Go's glob function, so wildcards are permitted.",
			"    allowlist = [",
			"      \"${5:<allowed-env-variable1>}\",",
			"      \"${6:<allowed-env-variable2>}\",",
			"      \"${7:<allowed-env-variableN>}\"",
			"    ]",
			"",
			"    // denylist",
			"    // this specifies a list of environment variables to exclusively prohibit in the list of environment variables exposed to the child process.",
			"    // if specified, any environment variables matching the given patterns will not be exposed to the child process, even if they are in the allowlist.",
			"    // the values in this option take precedence over the values in the allowlist.",
			"    // these strings are matched using Go's glob function, so wildcards are permitted.",
			"    denylist = [",
			"      \"${8:<denied-env-variable1>}\",",
			"      \"${9:<denied-env-variable2>}\",",
			"      \"${10:<denied-env-variableN>}\"",
			"    ]",
			"  }",
			"$0"
		],
		"description": "envconsul full 'env' parameter of configuration 'exec'"
	},
	"envconsul configuration 'exec' parameter 'env' - common": {
		"prefix": ["envconsul-configuration-exec-parameter-env-common"],
		"body": [
			"  env {",
			"    // pristine",
			"    // this specifies if the child process should not inherit the parent process's environment.",
			"    // by default, the child will have full access to the environment variables of the parent.",
			"    // setting this to true will send only the values specified in 'custom' to the child process.",
			"    pristine = ${1|true,false|}",
			"  }",
			"$0"
		],
		"description": "envconsul common 'env' parameter of configuration 'exec'"
	},
	"envconsul configuration 'exec' parameter 'env' parameter 'pristine'": {
		"prefix": ["envconsul-configuration-exec-parameter-env-parameter-pristine"],
		"body": [
			"    // pristine",
			"    // this specifies if the child process should not inherit the parent process's environment.",
			"    // by default, the child will have full access to the environment variables of the parent.",
			"    // setting this to true will send only the values specified in 'custom_env' to the child process.",
			"    pristine = ${1|true,false|}",
			"$0"
		],
		"description": "envconsul templated 'pristine' parameter of parameter 'env' of configuration 'exec'"
	},
	"envconsul configuration 'exec' parameter 'env' parameter 'custom'": {
		"prefix": ["envconsul-configuration-exec-parameter-env-parameter-custom"],
		"body": [
			"    // custom",
			"    // this specifies additional custom environment variables in the form shown below to inject into the child's runtime environment.",
			"    // if a custom environment variable shares its name with a system environment variable, the custom environment variable takes precedence.",
			"    // even if pristine, allowlist, or denylist is specified, all values in this option are given to the child process.",
			"    custom = [",
			"      \"${1:<custom-env-variable1>}\",",
			"      \"${2:<custom-env-variable2>}\",",
			"      \"${3:<custom-env-variableN>}\"",
			"    ]",
			"$0"
		],
		"description": "envconsul templated 'custom' parameter of parameter 'env' of configuration 'exec'"
	},
	"envconsul configuration 'exec' parameter 'env' parameter 'allowlist'": {
		"prefix": ["envconsul-configuration-exec-parameter-env-parameter-allowlist"],
		"body": [
			"    // allowlist",
			"    // this specifies a list of environment variables to exclusively include in the list of environment variables exposed to the child process.",
			"    // if specified, only those environment variables matching the given patterns are exposed to the child process.",
			"    // these strings are matched using Go's glob function, so wildcards are permitted.",
			"    allowlist = [",
			"      \"${1:<allowed-env-variable1>}\",",
			"      \"${2:<allowed-env-variable2>}\",",
			"      \"${3:<allowed-env-variableN>}\"",
			"    ]",
			"$0"
		],
		"description": "envconsul templated 'allowlist' parameter of parameter 'env' of configuration 'exec'"
	},
	"envconsul configuration 'exec' parameter 'env' parameter 'denylist'": {
		"prefix": ["envconsul-configuration-exec-parameter-env-parameter-denylist"],
		"body": [
			"    // denylist",
			"    // this specifies a list of environment variables to exclusively prohibit in the list of environment variables exposed to the child process.",
			"    // if specified, any environment variables matching the given patterns will not be exposed to the child process, even if they are in the allowlist.",
			"    // the values in this option take precedence over the values in the allowlist.",
			"    // these strings are matched using Go's glob function, so wildcards are permitted.",
			"    denylist = [",
			"      \"${1:<denied-env-variable1>}\",",
			"      \"${2:<denied-env-variable2>}\",",
			"      \"${3:<denied-env-variableN>}\"",
			"    ]",
			"$0"
		],
		"description": "envconsul templated 'denylist' parameter of parameter 'env' of configuration 'exec'"
	},
	"envconsul configuration 'exec' parameter 'kill_signal'": {
		"prefix": ["envconsul-configuration-exec-parameter-kill-signal"],
		"body": [
			"  // kill_signal",
			"  // this defines the signal sent to the child process when Envconsul is gracefully shutting down.",
			"  // the application should begin a graceful cleanup.",
			"  // if the application does not terminate before the `kill_timeout`, it will be terminated (effectively \"kill -9\").",
			"  // the default value is \"SIGTERM\".",
			"  kill_signal = \"${1:<kill-signal>}\"",
			"$0"
		],
		"description": "envconsul templated 'kill_signal' parameter of configuration 'exec'"
	},
	"envconsul configuration 'exec' parameter 'kill_timeout'": {
		"prefix": ["envconsul-configuration-exec-parameter-kill-timeout"],
		"body": [
			"  // kill_timeout",
			"  // this defines the amount of time to wait for the child process to gracefully terminate when Envconsul exits.",
			"  // after this specified time, the child process will be force-killed (effectively \"kill -9\").",
			"  // the default value is \"30s\".",
			"  kill_timeout = \"${1:<kill-timeout>}\"",
			"$0"
		],
		"description": "envconsul templated 'kill_timeout' parameter of configuration 'exec'"
	},
	"envconsul configuration 'kill_signal'": {
		"prefix": ["envconsul-configuration-kill-signal"],
		"body": [
			"// kill_signal",
			"// this is the signal to listen for to trigger a graceful stop.",
			"// setting this value to the empty string will cause it to not listen for any graceful stop signals.",
			"// the default value is \"SIGINT\".",
			"kill_signal = \"${1:<kill-signal>}\"",
			"$0"
		],
		"description": "envconsul templated 'kill_signal' configuration"
	},
	"envconsul configuration 'log_level'": {
		"prefix": ["envconsul-configuration-log-level"],
		"body": [
			"// log_level",
			"// this is the log level. If you find a bug in Envconsul, please enable debug or trace logs so we can help identify the issue.",
			"// this is also available as a command line flag.",
			"// defaults to \"warn\"",
			"log_level = \"${1:<log-level>}\"",
			"$0"
		],
		"description": "envconsul templated 'log_level' configuration"
	},
	"envconsul configuration 'max_stale'": {
		"prefix": ["envconsul-configuration-max-stale"],
		"body": [
			"// max_stale",
			"// Consul leader will respond to queries; any requests to a follower will forward to the leader.",
			"// in large clusters with many requests, this is not as scalable, so this option allows any follower to respond to a query,",
			"// so long as the last-replicated data is within these bounds.",
			"// higher values result in less cluster load, but are more likely to have outdated data.",
			"max_stale = \"${1:<max-stale>}\"",
			"$0"
		],
		"description": "envconsul templated 'max_stale' configuration"
	},
	"envconsul configuration 'pid_file'": {
		"prefix": ["envconsul-configuration-pid-file"],
		"body": [
			"// pid_file",
			"// this is the path to store a PID file which will contain the process ID of the Envconsul process.",
			"// this is useful if you plan to send custom signals to the process.",
			"pid_file = \"${1:<path-to-pid-file>}\"",
			"$0"
		],
		"description": "envconsul templated 'pid_file' configuration"
	},
	"envconsul configuration 'prefix' - empty": {
		"prefix": ["envconsul-configuration-prefix-empty"],
		"body": [
			"prefix {",
			"  $0",
			"}",
			""
		],
		"description": "envconsul empty 'prefix' configuration"
	},
	"envconsul configuration 'prefix' - full": {
		"prefix": ["envconsul-configuration-prefix-full"],
		"body": [
			"prefix {",
			"  // format",
			"  // this tells Envconsul to use a custom formatter when printing the key.",
			"  //",
			"  // the value between `{{ key }}` will be replaced with the key.",
			"  //   format = \"custom_{{ key }}\"",
			"  //",
			"  // the value after \"replaceKey\" in  `{{ key | replaceKey `actualKey` `expectedKey` }}` will be replaced with the next value.",
			"  // you could replace more then one key.",
			"  //   format = \"custom_{{ key | replaceKey `actualKey1` `expectedKey1` | replaceKey `actualKey2` `expectedKey2` }}\"",
			"  format = \"${1:<custom-formatter>}\"",
			"",
			"  // no_prefix",
			"  // this tells Envconsul to not prefix the keys with their parent \"folder\".",
			"  // the default for `prefix` (consul) is true, the default for `secret` (vault) is false.",
			"  // the differing defaults is to maintain backward compatibility.",
			"  no_prefix = ${2|true,false|}",
			"",
			"  // path",
			"  // this is the path of the key in Consul or Vault from which to read data.",
			"  // the path field is required or the config block will be ignored.",
			"  //   path = \"foo/bar\"",
			"  //",
			"  // this tells Envconsul to use a custom formatter when building the path for the key from which to read data,",
			"  // in this case reading an environment variable and putting it into the path.",
			"  //   path = \"foo/{{ env \"BAR\" }}\"",
			"  path = \"${3:<path-of-the key-in-consul-or-vault>}\"",
			"}",
			"$0"
		],
		"description": "envconsul full 'prefix' configuration"
	},
	"envconsul configuration 'prefix' - common": {
		"prefix": ["envconsul-configuration-prefix-common"],
		"body": [
			"prefix {",
			"  // path",
			"  // this is the path of the key in Consul or Vault from which to read data.",
			"  // the path field is required or the config block will be ignored.",
			"  //   path = \"foo/bar\"",
			"  //",
			"  // this tells Envconsul to use a custom formatter when building the path for the key from which to read data,",
			"  // in this case reading an environment variable and putting it into the path.",
			"  //   path = \"foo/{{ env \"BAR\" }}\"",
			"  path = \"${1:<path-of-the key-in-consul-or-vault>}\"",
			"}",
			"$0"
		],
		"description": "envconsul common 'prefix' configuration"
	},
	"envconsul configuration 'prefix' parameter 'format'": {
		"prefix": ["envconsul-configuration-prefix-parameter-format"],
		"body": [
			"  // format",
			"  // this tells Envconsul to use a custom formatter when printing the key.",
			"  //",
			"  // the value between `{{ key }}` will be replaced with the key.",
			"  //   format = \"custom_{{ key }}\"",
			"  //",
			"  // the value after \"replaceKey\" in  `{{ key | replaceKey `actualKey` `expectedKey` }}` will be replaced with the next value.",
			"  // you could replace more then one key.",
			"  //   format = \"custom_{{ key | replaceKey `actualKey1` `expectedKey1` | replaceKey `actualKey2` `expectedKey2` }}\"",
			"  format = \"${1:<custom-formatter>}\"",
			"$0"
		],
		"description": "envconsul templated 'format' parameter of configuration 'prefix'"
	},
	"envconsul configuration 'prefix' parameter 'no_prefix'": {
		"prefix": ["envconsul-configuration-prefix-parameter-no_prefix"],
		"body": [
			"  // no_prefix",
			"  // this tells Envconsul to not prefix the keys with their parent \"folder\".",
			"  // the default for `prefix` (consul) is true, the default for `secret` (vault) is false.",
			"  // the differing defaults is to maintain backward compatibility.",
			"  no_prefix = ${1|true,false|}",
			"$0"
		],
		"description": "envconsul templated 'no_prefix' parameter of configuration 'prefix'"
	},
	"envconsul configuration 'prefix' parameter 'path'": {
		"prefix": ["envconsul-configuration-prefix-parameter-path"],
		"body": [
			"  // path",
			"  // this is the path of the key in Consul or Vault from which to read data.",
			"  // the path field is required or the config block will be ignored.",
			"  //   path = \"foo/bar\"",
			"  //",
			"  // this tells Envconsul to use a custom formatter when building the path for the key from which to read data,",
			"  // in this case reading an environment variable and putting it into the path.",
			"  //   path = \"foo/{{ env \"BAR\" }}\"",
			"  path = \"${1:<path-of-the key-in-consul-or-vault>}\"",
			"$0"
		],
		"description": "envconsul templated 'path' parameter of configuration 'prefix'"
	},
	"envconsul configuration 'pristine'": {
		"prefix": ["envconsul-configuration-pristine"],
		"body": [
			"// pristine",
			"// this tells Envconsul to not include the parent processes' environment when launching the child process.",
			"pristine = ${1|true,false|}",
			"$0"
		],
		"description": "envconsul templated 'pristine' configuration"
	},
	"envconsul configuration 'reload_signal'": {
		"prefix": ["envconsul-configuration-reload-signal"],
		"body": [
			"// reload_signal",
			"// this is the signal to listen for to trigger a reload event.",
			"// the default value is \"SIGHUP\".",
			"// setting this value to the empty string will cause it to not listen for any reload signals.",
			"reload_signal = \"${1:<reload-signal>}\"",
			"$0"
		],
		"description": "envconsul templated 'reload_signal' configuration"
	},
	"envconsul configuration 'sanitize'": {
		"prefix": ["envconsul-configuration-sanitize"],
		"body": [
			"// sanitize",
			"// this tell Envconsul to remove any non-standard values from environment variable keys and replace them with underscores.",
			"sanitize = ${1|true,false|}",
			"$0"
		],
		"description": "envconsul templated 'sanitize' configuration"
	},
	"envconsul configuration 'secret' - empty": {
		"prefix": ["envconsul-configuration-secret-empty"],
		"body": [
			"secret {",
			"  $0",
			"}",
			""
		],
		"description": "envconsul empty 'secret' configuration"
	},
	"envconsul configuration 'secret' - full": {
		"prefix": ["envconsul-configuration-secret-full"],
		"body": [
			"secret {",
			"  // format",
			"  // this tells Envconsul to use a custom formatter when printing the key.",
			"  //",
			"  // the value between `{{ key }}` will be replaced with the key.",
			"  //   format = \"custom_{{ key }}\"",
			"  //",
			"  // the value after \"replaceKey\" in  `{{ key | replaceKey `actualKey` `expectedKey` }}` will be replaced with the next value.",
			"  // you could replace more then one key.",
			"  //   format = \"custom_{{ key | replaceKey `actualKey1` `expectedKey1` | replaceKey `actualKey2` `expectedKey2` }}\"",
			"  format = \"${1:<custom-formatter>}\"",
			"",
			"  // no_prefix",
			"  // this tells Envconsul to not prefix the keys with their parent \"folder\".",
			"  // the default for `prefix` (consul) is true, the default for `secret` (vault) is false.",
			"  // the differing defaults is to maintain backward compatibility.",
			"  no_prefix = ${2|true,false|}",
			"",
			"  // path",
			"  // this is the path of the key in Consul or Vault from which to read data.",
			"  // the path field is required or the config block will be ignored.",
			"  //   path = \"foo/bar\"",
			"  //",
			"  // this tells Envconsul to use a custom formatter when building the path for the key from which to read data,",
			"  // in this case reading an environment variable and putting it into the path.",
			"  //   path = \"foo/{{ env \"BAR\" }}\"",
			"  path = \"${3:<path-of-the key-in-consul-or-vault>}\"",
			"}",
			"$0"
		],
		"description": "envconsul full 'secret' configuration"
	},
	"envconsul configuration 'secret' - common": {
		"prefix": ["envconsul-configuration-secret-common"],
		"body": [
			"secret {",
			"  // path",
			"  // this is the path of the key in Consul or Vault from which to read data.",
			"  // the path field is required or the config block will be ignored.",
			"  //   path = \"foo/bar\"",
			"  //",
			"  // this tells Envconsul to use a custom formatter when building the path for the key from which to read data,",
			"  // in this case reading an environment variable and putting it into the path.",
			"  //   path = \"foo/{{ env \"BAR\" }}\"",
			"  path = \"${1:<path-of-the key-in-consul-or-vault>}\"",
			"}",
			"$0"
		],
		"description": "envconsul common 'secret' configuration"
	},
	"envconsul configuration 'secret' parameter 'format'": {
		"prefix": ["envconsul-configuration-secret-parameter-format"],
		"body": [
			"  // format",
			"  // this tells Envconsul to use a custom formatter when printing the key.",
			"  //",
			"  // the value between `{{ key }}` will be replaced with the key.",
			"  //   format = \"custom_{{ key }}\"",
			"  //",
			"  // the value after \"replaceKey\" in  `{{ key | replaceKey `actualKey` `expectedKey` }}` will be replaced with the next value.",
			"  // you could replace more then one key.",
			"  //   format = \"custom_{{ key | replaceKey `actualKey1` `expectedKey1` | replaceKey `actualKey2` `expectedKey2` }}\"",
			"  format = \"${1:<custom-formatter>}\"",
			"$0"
		],
		"description": "envconsul templated 'format' parameter of configuration 'secret'"
	},
	"envconsul configuration 'secret' parameter 'no_prefix'": {
		"prefix": ["envconsul-configuration-secret-parameter-no_prefix"],
		"body": [
			"  // no_prefix",
			"  // this tells Envconsul to not prefix the keys with their parent \"folder\".",
			"  // the default for `prefix` (consul) is true, the default for `secret` (vault) is false.",
			"  // the differing defaults is to maintain backward compatibility.",
			"  no_prefix = ${1|true,false|}",
			"$0"
		],
		"description": "envconsul templated 'no_prefix' parameter of configuration 'secret'"
	},
	"envconsul configuration 'secret' parameter 'path'": {
		"prefix": ["envconsul-configuration-secret-parameter-path"],
		"body": [
			"  // path",
			"  // this is the path of the key in Consul or Vault from which to read data.",
			"  // the path field is required or the config block will be ignored.",
			"  //   path = \"foo/bar\"",
			"  //",
			"  // this tells Envconsul to use a custom formatter when building the path for the key from which to read data,",
			"  // in this case reading an environment variable and putting it into the path.",
			"  //   path = \"foo/{{ env \"BAR\" }}\"",
			"  path = \"${1:<path-of-the key-in-consul-or-vault>}\"",
			"$0"
		],
		"description": "envconsul templated 'path' parameter of configuration 'secret'"
	},
	"envconsul configuration 'syslog' - empty": {
		"prefix": ["envconsul-configuration-syslog-empty"],
		"body": [
			"// this block defines the configuration for connecting to a syslog server for logging.",
			"syslog {",
			"  $0",
			"}",
			""
		],
		"description": "envconsul empty 'syslog' configuration"
	},
	"envconsul configuration 'syslog' - full": {
		"prefix": ["envconsul-configuration-syslog-full"],
		"body": [
			"// this block defines the configuration for connecting to a syslog server for logging.",
			"syslog {",
			"  // enabled",
			"  // this enables syslog logging.",
			"  // specifying any other option also enables syslog logging.",
			"  enabled = \"${1:<syslog-enabled>}\"",
			"",
			"  // facility",
			"  // this is the name of the syslog facility to log to.",
			"  facility = \"${2:<syslog-facility>}\"",
			"}",
			"$0"
		],
		"description": "envconsul full 'syslog' configuration"
	},
	"envconsul configuration 'syslog' - common": {
		"prefix": ["envconsul-configuration-syslog-common"],
		"body": [
			"// this block defines the configuration for connecting to a syslog server for logging.",
			"syslog {",
			"  // enabled",
			"  // this enables syslog logging.",
			"  // specifying any other option also enables syslog logging.",
			"  enabled = \"${1:<syslog-enabled>}\"",
			"",
			"  // facility",
			"  // this is the name of the syslog facility to log to.",
			"  facility = \"${2:<syslog-facility>}\"",
			"}",
			"$0"
		],
		"description": "envconsul common 'syslog' configuration"
	},
	"envconsul configuration 'syslog' parameter 'enabled'": {
		"prefix": ["envconsul-configuration-syslog-parameter-enabled"],
		"body": [
			"  // enabled",
			"  // this enables syslog logging.",
			"  // specifying any other option also enables syslog logging.",
			"  enabled = \"${1:<syslog-enabled>}\"",
			"$0"
		],
		"description": "envconsul templated 'enabled' parameter of configuration 'syslog'"
	},
	"envconsul configuration 'syslog' parameter 'facility'": {
		"prefix": ["envconsul-configuration-syslog-parameter-facility"],
		"body": [
			"  // facility",
			"  // this is the name of the syslog facility to log to.",
			"  facility = \"${1:<syslog-facility>}\"",
			"$0"
		],
		"description": "envconsul templated 'facility' parameter of configuration 'syslog'"
	},
	"envconsul configuration 'upcase'": {
		"prefix": ["envconsul-configuration-upcase"],
		"body": [
			"// upcase",
			"// this tells Envconsul to convert environment variable keys to uppercase (which is more common and a bit more standard).",
			"upcase = ${1|true,false|}",
			"$0"
		],
		"description": "envconsul templated 'upcase' configuration"
	},
	"envconsul configuration 'vault' - empty": {
		"prefix": ["envconsul-configuration-vault-empty"],
		"body": [
			"vault {",
			"  $0",
			"}",
			""
		],
		"description": "envconsul empty 'vault' configuration"
	},
	"envconsul configuration 'vault' - full": {
		"prefix": ["envconsul-configuration-vault-full"],
		"body": [
			"vault {",
			"  // address",
			"  // this is the address of the Vault leader.",
			"  // the protocol (http(s)) portion of the address is required.",
			"  address = \"${1:<vault-address>}\"",
			"",
			"  // namespace",
			"  // this is a Vault Enterprise namespace to use for reading/writing secrets.",
			"  // this value can also be specified via the environment variable 'VAULT_NAMESPACE'.",
			"  namespace = \"${2:<vault-namespace>}\"",
			"",
			"  // token",
			"  // this is the token to use when communicating with the Vault server.",
			"  // like other tools that integrate with Vault, Envconsul makes the assumption that you provide it with a Vault token;",
			"  // it does not have the incorporated logic to generate tokens via Vault's auth methods.",
			"  // this value can also be specified via the environment variable 'VAULT_TOKEN'.",
			"  // it is highly recommended that you do not put your token in plain-text in a configuration file.",
			"  // when using a token from Vault Agent, the vault_agent_token_file setting should be used instead, as that will take precedence over this field.",
			"  token = \"${3:<vault-token>}\"",
			"",
			"  // vault_agent_token_file",
			"  // this tells Envconsul to load the Vault token from the contents of a file.",
			"  // if this field is specified:",
			"  //   - by default Envconsul will not try to renew the Vault token, if you want it",
			"  // to renew you will need to specify renew_token = true as below.",
			"  //   - Envconsul will periodically stat the file and update the token if it has changed.",
			"  vault_agent_token_file = \"${4:<vault-agent-token-file>}\"",
			"",
			"  // unwrap_token",
			"  // this tells Envconsul that the provided token is actually a wrapped",
			"  // token that should be unwrapped using Vault's cubbyhole response wrapping before being used.",
			"  // please see Vault's cubbyhole response wrapping documentation for more information.",
			"  unwrap_token = \"${5:<vault-unwrap-token>}\"",
			"",
			"  // renew_token",
			"  // this option tells Envconsul to automatically renew the Vault token given.",
			"  // if you are unfamiliar with Vault's architecture, Vault requires tokens be renewed at some regular interval or they will be revoked.",
			"  // Envconsul will automatically renew the token at half the lease duration of the token.",
			"  // the default value is true, but this option can be disabled if you want to renew the Vault token using an out-of-band process.",
			"  // note that secrets specified in a template (using {{secret}} for example) are always renewed, even if this option is set to false.",
			"  // this option only applies to the top-level Vault token itself.",
			"  renew_token = ${7|true,false|}",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Envconsul is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${8|true,false|}",
			"",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${9:<retry-attempts>}",
			"",
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff     = \"${10:<sleep-time-between-retry-attempts>}\"",
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${11:<max-sleep-time-between-retry-attempts>}\"",
			"  }",
			"",
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${12|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${13|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    cert = \"${14:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    key  = \"${15:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${16:<path-to-ca-cert-file>}\"",
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${17:<path-to-ca-cert-directory>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${18:<sni-server-name>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "envconsul full 'vault' configuration"
	},
	"envconsul configuration 'vault' - common": {
		"prefix": ["envconsul-configuration-vault-common"],
		"body": [
			"vault {",
			"  // address",
			"  // this is the address of the Vault leader.",
			"  // the protocol (http(s)) portion of the address is required.",
			"  address = \"${1:<vault-address>}\"",
			"",
			"  // namespace",
			"  // this is a Vault Enterprise namespace to use for reading/writing secrets.",
			"  // this value can also be specified via the environment variable 'VAULT_NAMESPACE'.",
			"  namespace = \"${2:<vault-namespace>}\"",
			"",
			"  // token",
			"  // this is the token to use when communicating with the Vault server.",
			"  // like other tools that integrate with Vault, Envconsul makes the assumption that you provide it with a Vault token;",
			"  // it does not have the incorporated logic to generate tokens via Vault's auth methods.",
			"  // this value can also be specified via the environment variable 'VAULT_TOKEN'.",
			"  // it is highly recommended that you do not put your token in plain-text in a configuration file.",
			"  // when using a token from Vault Agent, the vault_agent_token_file setting should be used instead, as that will take precedence over this field.",
			"  token = \"${3:<vault-token>}\"",
			"",
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Envconsul is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${4:<retry-attempts>}",
			"  }",
			"",
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${5|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${6|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    cert = \"${7:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    key  = \"${8:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${9:<path-to-ca-cert-file>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${10:<sni-server-name>}\"",
			"  }",
			"}",
			"$0"
		],
		"description": "envconsul common 'vault' configuration"
	},
	"envconsul configuration 'vault' parameter 'address'": {
		"prefix": ["envconsul-configuration-vault-parameter-address"],
		"body": [
			"  // address",
			"  // this is the address of the Vault leader.",
			"  // the protocol (http(s)) portion of the address is required.",
			"  address = \"${1:<vault-address>}\"",
			"$0"
		],
		"description": "envconsul templated 'address' parameter of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'namespace'": {
		"prefix": ["envconsul-configuration-vault-parameter-namespace"],
		"body": [
			"  // namespace",
			"  // this is a Vault Enterprise namespace to use for reading/writing secrets.",
			"  // this value can also be specified via the environment variable 'VAULT_NAMESPACE'.",
			"  namespace = \"${1:<vault-namespace>}\"",
			"$0"
		],
		"description": "envconsul templated 'namespace' parameter of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'token'": {
		"prefix": ["envconsul-configuration-vault-parameter-token"],
		"body": [
			"  // token",
			"  // this is the token to use when communicating with the Vault server.",
			"  // like other tools that integrate with Vault, Envconsul makes the assumption that you provide it with a Vault token;",
			"  // it does not have the incorporated logic to generate tokens via Vault's auth methods.",
			"  // this value can also be specified via the environment variable 'VAULT_TOKEN'.",
			"  // it is highly recommended that you do not put your token in plain-text in a configuration file.",
			"  // when using a token from Vault Agent, the vault_agent_token_file setting should be used instead, as that will take precedence over this field.",
			"  token = \"${1:<vault-token>}\"",
			"$0"
		],
		"description": "envconsul templated 'token' parameter of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'vault_agent_token_file'": {
		"prefix": ["envconsul-configuration-vault-parameter-vault-agent-token-file"],
		"body": [
			"  // vault_agent_token_file",
			"  // this tells Envconsul to load the Vault token from the contents of a file.",
			"  // if this field is specified:",
			"  //   - by default Envconsul will not try to renew the Vault token, if you want it",
			"  // to renew you will need to specify renew_token = true as below.",
			"  //   - Envconsul will periodically stat the file and update the token if it has changed.",
			"  vault_agent_token_file = \"${1:<vault-agent-token-file>}\"",
			"$0"
		],
		"description": "envconsul templated 'vault_agent_token_file' parameter of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'unwrap_token'": {
		"prefix": ["envconsul-configuration-vault-parameter-unwrap-token"],
		"body": [
			"  // unwrap_token",
			"  // this tells Envconsul that the provided token is actually a wrapped",
			"  // token that should be unwrapped using Vault's cubbyhole response wrapping before being used.",
			"  // please see Vault's cubbyhole response wrapping documentation for more information.",
			"  unwrap_token = \"${1:<vault-unwrap-token>}\"",
			"$0"
		],
		"description": "envconsul templated 'unwrap_token' parameter of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'renew_token'": {
		"prefix": ["envconsul-configuration-vault-parameter-renew-token"],
		"body": [
			"  // renew_token",
			"  // this option tells Envconsul to automatically renew the Vault token given.",
			"  // if you are unfamiliar with Vault's architecture, Vault requires tokens be renewed at some regular interval or they will be revoked.",
			"  // Envconsul will automatically renew the token at half the lease duration of the token.",
			"  // the default value is true, but this option can be disabled if you want to renew the Vault token using an out-of-band process.",
			"  // note that secrets specified in a template (using {{secret}} for example) are always renewed, even if this option is set to false.",
			"  // this option only applies to the top-level Vault token itself.",
			"  renew_token = ${1|true,false|}",
			"$0"
		],
		"description": "envconsul templated 'renew_token' parameter of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'retry' - empty": {
		"prefix": ["envconsul-configuration-vault-parameter-retry-empty"],
		"body": [
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Envconsul is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    $0",
			"  }",
			""
		],
		"description": "envconsul empty 'retry' parameter of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'retry' - full": {
		"prefix": ["envconsul-configuration-vault-parameter-retry-full"],
		"body": [
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Envconsul is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${1|true,false|}",
			"",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${2:<retry-attempts>}",
			"",
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff     = \"${3:<sleep-time-between-retry-attempts>}\"",
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${4:<max-sleep-time-between-retry-attempts>}\"",
			"  }",
			"$0"
		],
		"description": "envconsul full 'retry' parameter of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'retry' - common": {
		"prefix": ["envconsul-configuration-vault-parameter-retry-common"],
		"body": [
			"  // this controls the retry behavior when an error is returned from Consul.",
			"  // Envconsul is highly fault tolerant, meaning it does not exit in the face of failure.",
			"  // instead, it uses exponential back-off and retry functions to wait for the cluster to become available,",
			"  // as is customary in distributed systems.",
			"  retry {",
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${1:<retry-attempts>}",
			"  }",
			"$0"
		],
		"description": "envconsul common 'retry' parameter of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'retry' parameter 'enabled'": {
		"prefix": ["envconsul-configuration-vault-parameter-retry-parameter-enabled"],
		"body": [
			"    // enabled",
			"    // retries are enabled by default, so this is redundant.",
			"    enabled = ${1|true,false|}",
			"$0"
		],
		"description": "envconsul templated 'enabled' parameter of parameter 'retry' of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'retry' parameter 'attempts'": {
		"prefix": ["envconsul-configuration-vault-parameter-retry-parameter-attempts"],
		"body": [
			"    // attempts",
			"    // this specifies the number of attempts to make before giving up.",
			"    // each attempt adds the exponential backoff sleep time.",
			"    // setting this to zero will implement an unlimited number of retries.",
			"    attempts = ${1:<retry-attempts>}",
			"$0"
		],
		"description": "envconsul templated 'attempts' parameter of parameter 'retry' of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'retry' parameter 'backoff'": {
		"prefix": ["envconsul-configuration-vault-parameter-retry-parameter-backoff"],
		"body": [
			"    // backoff",
			"    // this is the base amount of time to sleep between retry attempts.",
			"    // each retry sleeps for an exponent of 2 longer than this base.",
			"    // for 5 retries, the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.",
			"    backoff = \"${1:<sleep-time-between-retry-attempts>}\"",
			"$0"
		],
		"description": "envconsul templated 'backoff' parameter of parameter 'retry' of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'retry' parameter 'max_backoff'": {
		"prefix": ["envconsul-configuration-vault-parameter-retry-parameter-max-backoff"],
		"body": [
			"    // max_backoff",
			"    // this is the maximum amount of time to sleep between retry attempts.",
			"    // when max_backoff is set to zero, there is no upper limit to the exponential sleep between retry attempts.",
			"    // if max_backoff is set to 10s and backoff is set to 1s,",
			"    // sleep times would be: 1s, 2s, 4s, 8s, 10s, 10s, ...",
			"    max_backoff = \"${1:<max-sleep-time-between-retry-attempts>}\"",
			"$0"
		],
		"description": "envconsul templated 'max_backoff' parameter of parameter 'retry' of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'ssl' - empty": {
		"prefix": ["envconsul-configuration-vault-parameter-ssl-empty"],
		"body": [
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    $0",
			"  }",
			""
		],
		"description": "envconsul empty 'ssl' parameter of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'ssl' - full": {
		"prefix": ["envconsul-configuration-vault-parameter-ssl-full"],
		"body": [
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${1|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${2|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    cert = \"${3:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    key  = \"${4:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${5:<path-to-ca-cert-file>}\"",
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${6:<path-to-ca-cert-directory>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${7:<sni-server-name>}\"",
			"  }",
			"$0"
		],
		"description": "envconsul full 'ssl' parameter of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'ssl' - common": {
		"prefix": ["envconsul-configuration-vault-parameter-ssl-common"],
		"body": [
			"  // this block configures the SSL options for connecting to the Consul server.",
			"  ssl {",
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${1|true,false|}",
			"",
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${2|true,false|}",
			"",
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    cert = \"${3:<path-to-client-cert-file>}\"",
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    key  = \"${4:<path-to-client-key-file>}\"",
			"",
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${5:<path-to-ca-cert-file>}\"",
			"",
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${6:<sni-server-name>}\"",
			"  }",
			"$0"
		],
		"description": "envconsul common 'ssl' parameter of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'ssl' parameter 'enabled'": {
		"prefix": ["envconsul-configuration-vault-parameter-ssl-parameter-enabled"],
		"body": [
			"    // enabled",
			"    // this enables SSL.",
			"    // specifying any option for SSL will also enable it.",
			"    enabled = ${1|true,false|}",
			"$0"
		],
		"description": "envconsul templated 'enabled' parameter of parameter 'ssl' of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'ssl' parameter 'verify'": {
		"prefix": ["envconsul-configuration-vault-parameter-ssl-parameter-verify"],
		"body": [
			"    // verify",
			"    // this enables SSL peer verification.",
			"    // the default value is 'true', which will check the global CA chain to make sure the given certificates are valid.",
			"    // if you are using a self-signed certificate that you have not added to the CA chain, you may want to disable SSL verification.",
			"    // However, please understand this is a potential security vulnerability.",
			"    verify = ${1|true,false|}",
			"$0"
		],
		"description": "envconsul templated 'verify' parameter of parameter 'ssl' of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'ssl' parameter 'cert'": {
		"prefix": ["envconsul-configuration-vault-parameter-ssl-parameter-cert"],
		"body": [
			"    // cert",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    cert = \"${1:<path-to-client-cert>}\"",
			"$0"
		],
		"description": "envconsul templated 'cert' parameter of parameter 'ssl' of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'ssl' parameter 'key'": {
		"prefix": ["envconsul-configuration-vault-parameter-ssl-parameter-key"],
		"body": [
			"    // key",
			"    // this is the path to the certificate to use to authenticate.",
			"    // if just a certificate is provided, it is assumed to contain both the certificate and the key to convert to an X509 certificate.",
			"    // if both the certificate and key are specified, Envconsul will automatically combine them into an X509 certificate for you.",
			"    key = \"${1:<path-to-client-key>}\"",
			"$0"
		],
		"description": "envconsul templated 'key' parameter of parameter 'ssl' of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'ssl' parameter 'ca_cert'": {
		"prefix": ["envconsul-configuration-vault-parameter-ssl-parameter-ca-cert"],
		"body": [
			"    // ca_cert",
			"    // this is the path to the certificate authority to use as a CA.",
			"    // this is useful for self-signed certificates or for organizations using their own internal certificate authority.",
			"    ca_cert = \"${1:<path-to-ca-cert-file>}\"",
			"$0"
		],
		"description": "envconsul templated 'ca_cert' parameter of parameter 'ssl' of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'ssl' parameter 'ca_path'": {
		"prefix": ["envconsul-configuration-vault-parameter-ssl-parameter-ca-path"],
		"body": [
			"    // ca_path",
			"    // this is the path to a directory of PEM-encoded CA cert files.",
			"    // if both 'ca_cert' and 'ca_path' is specified, 'ca_cert' is preferred.",
			"    ca_path = \"${1:<path-to-ca-cert-directory>}\"",
			"$0"
		],
		"description": "envconsul templated 'ca_path' parameter of parameter 'ssl' of configuration 'vault'"
	},
	"envconsul configuration 'vault' parameter 'ssl' parameter 'server_name'": {
		"prefix": ["envconsul-configuration-vault-parameter-ssl-parameter-server-name"],
		"body": [
			"    // server_name",
			"    // this sets the SNI server name to use for validation.",
			"    server_name = \"${1:<sni-server-name>}\"",
			"$0"
		],
		"description": "envconsul templated 'server_name' parameter of parameter 'ssl' of configuration 'vault'"
	},
	"envconsul configuration 'service' - empty": {
		"prefix": ["envconsul-configuration-service-empty"],
		"body": [
			"// this specifies a service in Consul to watch. This may be specified multiple times to watch multiple prefixes,",
			"// and the bottom-most service takes precedence, should any values overlap.",
			"service {",
			"  $0",
			"}",
			""
		],
		"description": "envconsul empty 'service' configuration"
	},
	"envconsul configuration 'service' - full": {
		"prefix": ["envconsul-configuration-service-full"],
		"body": [
			"// this specifies a service in Consul to watch. This may be specified multiple times to watch multiple prefixes,",
			"// and the bottom-most service takes precedence, should any values overlap.",
			"service {",
			"  // query",
			"  // this is the query of the service in Consul from which to read data.",
			"  query = \"${1:<service-to-watch>}\"",
			"",
			"  // formatter",
			"  // this tells Envconsul to use a custom formatter when printing the key.",
			"  // the value between `{{ key }}` and `{{ service }}` will be replaced with the key and service name.",
			"  // default format `{{ service }}/{{ key }}`",
			"  format_id      = \"${2:<custom_id>}\"",
			"  format_name    = \"${3:<custom_name>}\"",
			"  format_address = \"${4:<custom_address>}\"",
			"  format_tag     = \"${5:<custom_tag>}\"",
			"  format_port    = \"${6:<custom_port>}\"",
			"}",
			"$0"
		],
		"description": "envconsul full 'service' configuration"
	},
	"envconsul configuration 'service' - common": {
		"prefix": ["envconsul-configuration-service-common"],
		"body": [
			"// this specifies a service in Consul to watch. This may be specified multiple times to watch multiple prefixes,",
			"// and the bottom-most service takes precedence, should any values overlap.",
			"service {",
			"  // query",
			"  // this is the query of the service in Consul from which to read data.",
			"  query = \"${1:<service-to-watch>}\"",
			"}",
			"$0"
		],
		"description": "envconsul common 'service' configuration"
	},
	"envconsul configuration 'service' parameter 'query'": {
		"prefix": ["envconsul-configuration-service-parameter-query"],
		"body": [
			"  // query",
			"  // this is the query of the service in Consul from which to read data.",
			"  query = \"${1:<service-to-watch>}\"",
			"$0"
		],
		"description": "envconsul templated 'query' parameter of configuration 'service'"
	},
	"envconsul configuration 'service' parameter 'formatter'": {
		"prefix": ["envconsul-configuration-service-parameter-formatter"],
		"body": [
			"  // formatter",
			"  // this tells Envconsul to use a custom formatter when printing the key.",
			"  // the value between `{{ key }}` and `{{ service }}` will be replaced with the key and service name.",
			"  // default format `{{ service }}/{{ key }}`",
			"  format_id      = \"${1:<custom_id>}\"",
			"  format_name    = \"${2:<custom_name>}\"",
			"  format_address = \"${3:<custom_address>}\"",
			"  format_tag     = \"${4:<custom_tag>}\"",
			"  format_port    = \"${5:<custom_port>}\"",
			"$0"
		],
		"description": "envconsul templated 'formatter' parameter of configuration 'service'"
	},
	"envconsul configuration 'wait'": {
		"prefix": ["envconsul-configuration-wait"],
		"body": [
			"// wait",
			"// this is the quiescence timers; it defines the minimum and maximum amount of time to wait for the cluster to reach a consistent state",
			"// before relaunching the app.",
			"// this is useful to enable in systems that have a lot of flapping, because it will reduce the the number of times the app is restarted.",
			"wait {",
			"  min = \"${1:<minimum-wait-for-consistent-cluster-state>}\"",
			"  max = \"${2:<maximum-wait-for-consistent-cluster-state>}\"",
			"}",
			"$0"
		],
		"description": "envconsul templated 'wait' configuration"
	},

	//
	// consul-terraform-sync (https://www.consul.io/docs/nia)
	//

	//
	// nomad (https://www.nomadproject.io/)
	//

	//
	// packer (https://www.packer.io/)
	//

	//
	// vagrant (https://www.vagrantup.com/)
	//

	//
	// vault (https://www.vaultproject.io/)
	//
	"vault configuration - full": {
		"prefix": ["vault-configuration-full"],
		"body": [
			"listener \"tcp\" {",
			"  // listener address",
			"  address = \"${2:<listener-address>}\"",
			"",
			"  // listener cluster address",
			"  cluster_address = \"${3:<listener-cluster-address>}\"",
			"",
			"  // listener http_idle_timeout",
			"  // if http_idle_timeout is zero, the value of http_read_timeout is used.",
			"  // if both are zero, the value of http_read_header_timeout is used.",
			"  http_idle_timeout        = \"${4:<listener-http-timeout>}\"",
			"  // listener http_read_header_timeout",
			"  http_read_header_timeout = \"${5:<listener-http-read-header-timeout>}\"",
			"  // listener http_read_timeout",
			"  http_read_timeout        = \"${6:<listener-http-read-timeout>}\"",
			"  // listener http_write_timeout",
			"  http_write_timeout       = \"${7:<listener-http-write-timeout>}\"",
			"",
			"  // listener max_request_site",
			"  max_request_site     = \"${8:<listener-max-request-size>}\"",
			"  // listener max_request_duration",
			"  max_request_duration = \"${9:<listener-max-request-duration>}\"",
			"",
			"  // listener proxy_protocol_behavior",
			"  // when specified, enables a PROXY protocol version 1 behavior for the listener.",
			"  // accepted values:",
			"  // use_always        - the client's IP address will always be used.",
			"  // allow_authorized  - if the source IP address is in the proxy_protocol_authorized_addrs list,",
			"  //                    the client's IP address will be used. If the source IP is not in the list, the source IP address will be used.",
			"  // deny_unauthorized - The traffic will be rejected if the source IP address is not in the proxy_protocol_authorized_addrs list.",
			"  proxy_protocol_behavior         = \"${10:<listener-proxy-protocol-behavior>}\"",
			"  // listener proxy_protocol_authorized_addrs",
			"  // not required if proxy_protocol_behavior is set to use_always.",
			"  // source IPs should be comma-delimited if provided as a string.",
			"  // At least one source IP must be provided, 'proxy_protocol_authorized_addrs' cannot be an empty array or string.",
			"  proxy_protocol_authorized_addrs = \"${11:<listener-proxy-protocol-authorized-addrs>}\"",
			"",
			"  // listener tls_disable",
			"  tls_disable                        = \"${12:<listener-tls-disable>}\"",
			"  // listener tls_cert_file",
			"  tls_cert_file                      = \"${13:<path-to-tls-cert-file>}\"",
			"  // listener tls_key_file",
			"  tls_key_file                       = \"${14:<path-to-tls-key-file>}\"",
			"  // listener tls_min_version",
			"  // accepted values are \"tls10\", \"tls11\", \"tls12\" or \"tls13\".",
			"  tls_min_version                    = \"${15:<listener-tls-min-version>}\"",
			"  // listener tls_cipher_suites",
			"  tls_cipher_suites                  = \"${16:<listener-tls-cipher-suites-comma-separated>}\"",
			"  // listener tls_prefer_server_cipher_suites",
			"  tls_prefer_server_cipher_suites    = \"${17|true,false|}",
			"  // listener tls_require_and_verify_client_cert",
			"  tls_require_and_verify_client_cert = \"${18|true,false|}",
			"  // listener tls_client_ca_file",
			"  // PEM-encoded certificate authority file used for checking the authenticity of client.",
			"  tls_client_ca_file                 = \"${19:<path-to-tls-client-ca-file>}\"",
			"  // listener tls_disable_client_certs",
			"  tls_disable_client_certs           = \"${20|true,false|}",
			"",
			"  // listener x_forwarded_for_authorized_addrs",
			"  // specifies the list of source IP CIDRs for which an X-Forwarded-For header will be trusted.",
			"  // comma-separated list or JSON array.",
			"  // this turns on X-Forwarded-For support.",
			"  x_forwarded_for_authorized_addrs      = \"${21:<listener-x-forwarded-for-authorized-addrs>}\"",
			"  // listener x_forwarded_for_hop_skips",
			"  // the number of addresses that will be skipped from the rear of the set of hops.",
			"  // for instance, for a header value of 1.2.3.4, 2.3.4.5, 3.4.5.6,",
			"  // if this value is set to \"1\", the address that will be used as the originating client IP is 2.3.4.5",
			"  x_forwarded_for_hop_skips             = \"${22:<listener-x-forwarded-for-hop-skips>}\"",
			"  // listener x_forwarded_for_reject_not_authorized",
			"  // if set false, if there is an X-Forwarded-For header in a connection from an unauthorized address,",
			"  // the header will be ignored and the client connection used as-is, rather than the client connection rejected.",
			"  x_forwarded_for_reject_not_authorized = \"${23|true,false|}",
			"  // listener x_forwarded_for_reject_not_present",
			"  // if set false, if there is no X-Forwarded-For header or it is empty, the client address will be used as-is,",
			"  // rather than the client connection rejected.",
			"  x_forwarded_for_reject_not_present    = \"${24|true,false|}",
			"",
			"  // listener telemetry",
			"  telemetry {",
			"    unauthenticated_metrics_access = \"${25|true,false|}",
			"  }",
			"",
			"  // listener profiling",
			"  profiling {",
			"    unauthenticated_pprof_access = \"${26|true,false|}",
			"  }",
			"",
			"  // listener custom_response_headers",
			"  custom_response_headers {",
			"    \"default\" = {",
			"      \"${27:<header-type1>}\" = [\"${28:<header-type1-value1>}\",\"${29:<header-type1-value2>}\",\"${30:<header-type1-valueN>}\"]",
			"      \"${31:<header-type2>}\" = [\"${32:<header-type2-value1>}\",\"${33:<header-type2-value2>}\",\"${34:<header-type2-valueN>}\"]",
			"      \"${35:<header-typeN>}\" = [\"${36:<header-typeN-value1>}\",\"${37:<header-typeN-value2>}\",\"${38:<header-typeN-valueN>}\"]",
			"    },",
			"    \"${39:<specific-status-code>}\" = {",
			"      \"${40:<header-type1>}\" = [\"${41:<header-type1-value1>}\",\"${42:<header-type1-value2>}\",\"${43:<header-type1-valueN>}\"]",
			"      \"${44:<header-type2>}\" = [\"${45:<header-type2-value1>}\",\"${46:<header-type2-value2>}\",\"${47:<header-type2-valueN>}\"]",
			"      \"${48:<header-typeN>}\" = [\"${49:<header-typeN-value1>}\",\"${50:<header-typeN-value2>}\",\"${51:<header-typeN-valueN>}\"]",
			"    },",
			"    \"${52:<collective-status-code>}\" = {",
			"      \"${53:<header-type1>}\" = [\"${54:<header-type1-value1>}\",\"${55:<header-type1-value2>}\",\"${56:<header-type1-valueN>}\"]",
			"      \"${57:<header-type2>}\" = [\"${58:<header-type2-value1>}\",\"${59:<header-type2-value2>}\",\"${60:<header-type2-valueN>}\"]",
			"      \"${61:<header-typeN>}\" = [\"${62:<header-typeN-value1>}\",\"${63:<header-typeN-value2>}\",\"${64:<header-typeN-valueN>}\"]",
			"    },",
			"  }",
			"}",
			"",
			"replication {",
			"  // replication resolver_discover_servers",
			"  // this feature should probably always be turned on.",
			"  // it enables secondary cluster nodes to reach out to nodes in the primary cluster to request information on who the active node is.",
			"  // this fixes an issue where a secondary cluster may only know about a single node in the primary cluster,",
			"  // and if that node isn't the active node, the replication connection will not succeed.",
			"  // with resolving disabled, the only way around this is to go through an onerous UpdatePrimary workflow,",
			"  // or do step-downs on the primary cluster until the one node known by the secondary cluster is active.",
			"  resolver_discover_servers     = ${65|true,false|}",
			"  // replication logshipper_buffer_length",
			"  // the maximum number of entries that the log shipper buffer can hold.",
			"  // if this is not specified, a default of 16K will be used.",
			"  logshipper_buffer_length      = ${66:<logshipper-buffer-length>}",
			"  // replication logshipper_buffer_size",
			"  // the maximum size that the log shipper buffer can be.",
			"  logshipper_buffer_size        = \"${67:<logshipper-buffer-size>}\"",
			"  // replication allow_forwarding_via_header",
			"  // enable forwarding options for client controlled consistency,",
			"  // i.e. X-Vault-Inconsistent: forward-active-node and X-Vault-Forward: active-node.",
			"  allow_forwarding_via_header   = ${68|true,false|}",
			"  // replication best_effort_wal_wait_duration",
			"  // legacy mitigation to try to prevent stale reads: when a write is made via RPC,",
			"  // i.e. the node handling the request didn't do the write itself,",
			"  // wait up to this much time to see the resulting WAL present locally before returning a response to the client.",
			"  best_effort_wal_wait_duration = \"${69:<best-effort-wal-wait-duration>}\"",
			"}",
			"",
			"seal \"${70:<seal-type>}\" {${71:<insert-your-seal-configuration-here>}}",
			"",
			"sentinel {",
			"  // sentinel additional_enabled_modules",
			"  // a valid Vault Enterprise license is required for use of Sentinel policies.",
			"  additional_enabled_modules = [\"${72:<module1>}\",\"${73:<module2>}\",\"${74:<moduleN>}\"]",
			"}",
			"",
			"service_registration \"consul\" {",
			"  // consul address",
			"  address = \"${75:<consul-agent-address>}\"",
			"",
			"  // consul check_timeout",
			"  // specifies the check interval used to send health check information back to Consul.",
			"  check_timeout = \"${76:<check-timeout>}\"",
			"",
			"  // consul disable_registration",
			"  disable_registration = ${77|true,false|}",
			"",
			"  // consul scheme",
			"  scheme = \"${78:<scheme>}\" # (http|https)",
			"",
			"  // consul service",
			"  // specifies the name of the service to register in Consul.",
			"  service         = \"${79:<service>}\"",
			"  // consul service_tags",
			"  // specifies a comma-separated list of tags to attach to the service registration in Consul.",
			"  service_tags    = \"${80:<service-tags>}\"",
			"  // consul service_address",
			"  // specifies a service-specific address to set on the service registration in Consul.",
			"  // if unset, Vault will use what it knows to be the HA redirect address - which is usually desirable.",
			"  // setting this parameter to \"\" will tell Consul to leverage the configuration of the node the service is registered on dynamically.",
			"  // this could be beneficial if you intend to leverage Consul's translate_wan_addrs parameter.",
			"  service_address = \"${81:<service-address>}\"",
			"",
			"  // consul token",
			"  // specifies the Consul ACL token with permission to register the Vault service into Consul's service catalog.",
			"  // this is _not_ a Vault token.",
			"  token = \"${82:<consul-token>}\"",
			"",
			"  // consul tls_ca_file",
			"  tls_ca_file     = \"${83:<path-to-ca-file>}\"",
			"  // consul tls_cert_file",
			"  tls_cert_file   = \"${84:<path-to-cert-file>}\"",
			"  // consul tls_key_file",
			"  tls_key_file    = \"${85:<path-to-key-file>}\"",
			"  // consul tls_min_version",
			"  tls_min_version = \"${86:<consul-tls-min-version>}\"",
			"  // consul tls_skip_verify",
			"  tls_skip_verify = \"${87|true,false|}",
			"}",
			"",
			"storage \"${88:<storage-type>}\" {${89:<insert-your-storage-configuration-here>}}",
			"",
			"telemetry {",
			"  // telemetry usage_gauge_period",
			"  usage_gauge_period        = \"${90:<usage-gauge-period>}\"",
			"  // telemetry maximum_gauge_cardinality",
			"  maximum_gauge_cardinality = ${91:<maximum-gauge-cardinality>}",
			"",
			"  // telemetry disable_hostname",
			"  disable_hostname      = ${92|true,false|}",
			"  // telemetry enable_hostname_label",
			"  enable_hostname_label = ${93|true,false|}",
			"",
			"  // telemetry lease_metrics_epsilon",
			"  lease_metrics_epsilon              = \"${93:<lease-metrics-epsilon>}\"",
			"  // telemetry num_lease_metrics_buckets",
			"  num_lease_metrics_buckets          = ${94:<num-lease-metrics-buckets>}",
			"  // telemetry add_lease_metrics_namespace_labels",
			"  add_lease_metrics_namespace_labels = ${95|true,false|}",
			"",
			"  // telemetry filter_default",
			"  filter_default = ${96|true,false|}",
			"  // telemetry prefix_filter",
			"  prefix_filter  = [\"${97:+<prefix-filter1>}\",\"${98:-<prefix-filter1>}\",\"${99:+<prefix-filterN>}\"]",
			"",
			"  // telemetry statsite_address",
			"  statsite_address = \"${101:<statsite-address>}\"",
			"",
			"  // telemetry statsd_address",
			"  statsd_address = \"${102:<statsd-address>}\"",
			"",
			"  // telemetry dogstatsd_addr",
			"  dogstatsd_addr = \"${103:<dogstatsd-address>}\"",
			"  // telemetry dogstatsd_tags",
			"  dogstatsd_tags = [\"${104:<dogstatsd-tag-name1:dogstatsd-tag-value1>}\",\"${105:<dogstatsd-tag-name2:dogstatsd-tag-value2>}\",\"${106:<dogstatsd-tag-nameN:dogstatsd-tag-valueN>}\"]",
			"",
			"  // telemetry prometheus_retention_time",
			"  prometheus_retention_time = \"${107:<prometheus-retention-time>}\"",
			"",
			"  // telemetry stackdriver_project_id",
			"  stackdriver_project_id = \"${108:<stackdriver-project-id>}\"",
			"  // telemetry stackdriver_location",
			"  stackdriver_location   = \"${109:<stackdriver-location>}\"",
			"  // telemetry stackdriver_namespace",
			"  stackdriver_namespace  = \"${110:<stackdriver-namespace>}\"",
			"  // telemetry stackdriver_debug_logs",
			"  stackdriver_debug_logs = ${111|true,false|}",
			"}",
			"",
			"ui = ${112|true,false|}",
			"$0"
		],
		"description": "full vault configuration"
	},
	"vault configuration - common": {
		"prefix": ["vault-configuration-common"],
		"body": [
			"listener \"tcp\" {",
			"  // listener address",
			"  address = \"${2:<listener-address>}\"",
			"",
			"  // listener cluster address",
			"  cluster_address = \"${3:<listener-cluster-address>}\"",
			"",
			"  // listener tls_disable",
			"  tls_disable              = \"${4:<listener-tls-disable>}\"",
			"  // listener tls_cert_file",
			"  tls_cert_file            = \"${5:<path-to-tls-cert-file>}\"",
			"  // listener tls_key_file",
			"  tls_key_file             = \"${6:<path-to-tls-key-file>}\"",
			"  // listener tls_client_ca_file",
			"  // PEM-encoded certificate authority file used for checking the authenticity of client.",
			"  tls_client_ca_file       = \"${7:<path-to-tls-client-ca-file>}\"",
			"  // listener tls_disable_client_certs",
			"  tls_disable_client_certs = \"${8|true,false|}",
			"}",
			"",
			"service_registration \"consul\" {",
			"  // consul address",
			"  address = \"${9:<consul-agent-address>}\"",
			"",
			"  // consul check_timeout",
			"  // specifies the check interval used to send health check information back to Consul.",
			"  check_timeout = \"${10:<check-timeout>}\"",
			"",
			"  // consul disable_registration",
			"  disable_registration = ${11|true,false|}",
			"",
			"  // consul scheme",
			"  scheme = \"${12:<scheme>}\" # (http|https)",
			"",
			"  // consul service",
			"  // specifies the name of the service to register in Consul.",
			"  service         = \"${13:<service>}\"",
			"  // consul service_tags",
			"  // specifies a comma-separated list of tags to attach to the service registration in Consul.",
			"  service_tags    = \"${14:<service-tags>}\"",
			"  // consul service_address",
			"  // specifies a service-specific address to set on the service registration in Consul.",
			"  // if unset, Vault will use what it knows to be the HA redirect address - which is usually desirable.",
			"  // setting this parameter to \"\" will tell Consul to leverage the configuration of the node the service is registered on dynamically.",
			"  // this could be beneficial if you intend to leverage Consul's translate_wan_addrs parameter.",
			"  service_address = \"${15:<service-address>}\"",
			"",
			"  // consul token",
			"  // specifies the Consul ACL token with permission to register the Vault service into Consul's service catalog.",
			"  // this is _not_ a Vault token.",
			"  token = \"${16:<consul-token>}\"",
			"",
			"  // consul tls_ca_file",
			"  tls_ca_file     = \"${17:<path-to-ca-file>}\"",
			"  // consul tls_cert_file",
			"  tls_cert_file   = \"${18:<path-to-cert-file>}\"",
			"  // consul tls_key_file",
			"  tls_key_file    = \"${19:<path-to-key-file>}\"",
			"  // consul tls_min_version",
			"  tls_min_version = \"${20:<consul-tls-min-version>}\"",
			"  // consul tls_skip_verify",
			"  tls_skip_verify = \"${21:false}\"",
			"}",
			"",
			"storage \"${22:<storage-type>}\" {${23:<insert-your-storage-configuration-here>}}",
			"",
			"ui = ${25|true,false|}",
			"$0"
		],
		"description": "common vault configuration"
	},
	"vault configuration 'listener' - empty": {
		"prefix": ["vault-configuration-listener-empty"],
		"body": [
			"listener \"tcp\" {",
			"  $0",
			"}",
			""
		],
		"description": "vault empty 'listener' configuration"
	},
	"vault configuration 'listener' - full": {
		"prefix": ["vault-configuration-listener-full"],
		"body": [
			"listener \"tcp\" {",
			"  // listener address",
			"  address = \"${1:<listener-address>}\"",
			"",
			"  // listener cluster address",
			"  cluster_address = \"${2:<listener-cluster-address>}\"",
			"",
			"  // listener http_idle_timeout",
			"  // if http_idle_timeout is zero, the value of http_read_timeout is used.",
			"  // if both are zero, the value of http_read_header_timeout is used.",
			"  http_idle_timeout        = \"${3:<listener-http-timeout>}\"",
			"  // listener http_read_header_timeout",
			"  http_read_header_timeout = \"${4:<listener-http-read-header-timeout>}\"",
			"  // listener http_read_timeout",
			"  http_read_timeout        = \"${5:<listener-http-read-timeout>}\"",
			"  // listener http_write_timeout",
			"  http_write_timeout       = \"${6:<listener-http-write-timeout>}\"",
			"",
			"  // listener max_request_site",
			"  max_request_site     = \"${7:<listener-max-request-size>}\"",
			"  // listener max_request_duration",
			"  max_request_duration = \"${8:<listener-max-request-duration>}\"",
			"",
			"  // listener proxy_protocol_behavior",
			"  // when specified, enables a PROXY protocol version 1 behavior for the listener.",
			"  // accepted values:",
			"  // use_always        - the client's IP address will always be used.",
			"  // allow_authorized  - if the source IP address is in the proxy_protocol_authorized_addrs list,",
			"  //                    the client's IP address will be used. If the source IP is not in the list, the source IP address will be used.",
			"  // deny_unauthorized - The traffic will be rejected if the source IP address is not in the proxy_protocol_authorized_addrs list.",
			"  proxy_protocol_behavior         = \"${9:<listener-proxy-protocol-behavior>}\"",
			"  // listener proxy_protocol_authorized_addrs",
			"  // not required if proxy_protocol_behavior is set to use_always.",
			"  // source IPs should be comma-delimited if provided as a string.",
			"  // At least one source IP must be provided, 'proxy_protocol_authorized_addrs' cannot be an empty array or string.",
			"  proxy_protocol_authorized_addrs = \"${10:<listener-proxy-protocol-authorized-addrs>}\"",
			"",
			"  // listener tls_disable",
			"  tls_disable                        = \"${11:<listener-tls-disable>}\"",
			"  // listener tls_cert_file",
			"  tls_cert_file                      = \"${12:<path-to-tls-cert-file>}\"",
			"  // listener tls_key_file",
			"  tls_key_file                       = \"${13:<path-to-tls-key-file>}\"",
			"  // listener tls_min_version",
			"  // accepted values are \"tls10\", \"tls11\", \"tls12\" or \"tls13\".",
			"  tls_min_version                    = \"${14:<listener-tls-min-version>}\"",
			"  // listener tls_cipher_suites",
			"  tls_cipher_suites                  = \"${15:<listener-tls-cipher-suites-comma-separated>}\"",
			"  // listener tls_prefer_server_cipher_suites",
			"  tls_prefer_server_cipher_suites    = \"${16|true,false|}",
			"  // listener tls_require_and_verify_client_cert",
			"  tls_require_and_verify_client_cert = \"${17|true,false|}",
			"  // listener tls_client_ca_file",
			"  // PEM-encoded certificate authority file used for checking the authenticity of client.",
			"  tls_client_ca_file                 = \"${18:<path-to-tls-client-ca-file>}\"",
			"  // listener tls_disable_client_certs",
			"  tls_disable_client_certs           = \"${19|true,false|}",
			"",
			"  // listener x_forwarded_for_authorized_addrs",
			"  // specifies the list of source IP CIDRs for which an X-Forwarded-For header will be trusted.",
			"  // comma-separated list or JSON array.",
			"  // this turns on X-Forwarded-For support.",
			"  x_forwarded_for_authorized_addrs      = \"${20:<listener-x-forwarded-for-authorized-addrs>}\"",
			"  // listener x_forwarded_for_hop_skips",
			"  // the number of addresses that will be skipped from the rear of the set of hops.",
			"  // for instance, for a header value of 1.2.3.4, 2.3.4.5, 3.4.5.6,",
			"  // if this value is set to \"1\", the address that will be used as the originating client IP is 2.3.4.5",
			"  x_forwarded_for_hop_skips             = \"${21:<listener-x-forwarded-for-hop-skips>}\"",
			"  // listener x_forwarded_for_reject_not_authorized",
			"  // if set false, if there is an X-Forwarded-For header in a connection from an unauthorized address,",
			"  // the header will be ignored and the client connection used as-is, rather than the client connection rejected.",
			"  x_forwarded_for_reject_not_authorized = \"${22|true,false|}",
			"  // listener x_forwarded_for_reject_not_present",
			"  // if set false, if there is no X-Forwarded-For header or it is empty, the client address will be used as-is,",
			"  // rather than the client connection rejected.",
			"  x_forwarded_for_reject_not_present    = \"${23|true,false|}",
			"",
			"  // listener telemetry",
			"  telemetry {",
			"    unauthenticated_metrics_access = \"${24|true,false|}",
			"  }",
			"",
			"  // listener profiling",
			"  profiling {",
			"    unauthenticated_pprof_access = \"${25|true,false|}",
			"  }",
			"",
			"  // listener custom_response_headers",
			"  custom_response_headers {",
			"    \"default\" = {",
			"      \"${26:<header-type1>}\" = [\"${27:<header-type1-value1>}\",\"${28:<header-type1-value2>}\",\"${29:<header-type1-valueN>}\"]",
			"      \"${30:<header-type2>}\" = [\"${31:<header-type2-value1>}\",\"${32:<header-type2-value2>}\",\"${33:<header-type2-valueN>}\"]",
			"      \"${34:<header-typeN>}\" = [\"${35:<header-typeN-value1>}\",\"${36:<header-typeN-value2>}\",\"${37:<header-typeN-valueN>}\"]",
			"    },",
			"    \"${38:<specific-status-code>}\" = {",
			"      \"${39:<header-type1>}\" = [\"${40:<header-type1-value1>}\",\"${41:<header-type1-value2>}\",\"${42:<header-type1-valueN>}\"]",
			"      \"${43:<header-type2>}\" = [\"${44:<header-type2-value1>}\",\"${45:<header-type2-value2>}\",\"${46:<header-type2-valueN>}\"]",
			"      \"${47:<header-typeN>}\" = [\"${48:<header-typeN-value1>}\",\"${49:<header-typeN-value2>}\",\"${50:<header-typeN-valueN>}\"]",
			"    },",
			"    \"${51:<collective-status-code>}\" = {",
			"      \"${52:<header-type1>}\" = [\"${53:<header-type1-value1>}\",\"${54:<header-type1-value2>}\",\"${55:<header-type1-valueN>}\"]",
			"      \"${56:<header-type2>}\" = [\"${57:<header-type2-value1>}\",\"${58:<header-type2-value2>}\",\"${59:<header-type2-valueN>}\"]",
			"      \"${60:<header-typeN>}\" = [\"${61:<header-typeN-value1>}\",\"${62:<header-typeN-value2>}\",\"${63:<header-typeN-valueN>}\"]",
			"    },",
			"  }",
			"}",
			"$0"
		],
		"description": "vault full 'listener' configuration"
	},
	"vault configuration 'listener' - common": {
		"prefix": ["vault-configuration-listener-common"],
		"body": [
			"listener \"tcp\" {",
			"  // listener address",
			"  address = \"${1:<listener-address>}\"",
			"",
			"  // listener cluster address",
			"  cluster_address = \"${2:<listener-cluster-address>}\"",
			"",
			"  // listener tls_disable",
			"  tls_disable              = \"${3:<listener-tls-disable>}\"",
			"  // listener tls_cert_file",
			"  tls_cert_file            = \"${4:<path-to-tls-cert-file>}\"",
			"  // listener tls_key_file",
			"  tls_key_file             = \"${5:<path-to-tls-key-file>}\"",
			"  // listener tls_client_ca_file",
			"  // PEM-encoded certificate authority file used for checking the authenticity of client.",
			"  tls_client_ca_file       = \"${6:<path-to-tls-client-ca-file>}\"",
			"  // listener tls_disable_client_certs",
			"  tls_disable_client_certs = \"${7|true,false|}",
			"}",
			"$0"
		],
		"description": "vault common 'listener' configuration"
	},
	"vault configuration 'listener' parameter 'address'": {
		"prefix": ["vault-configuration-listener-parameter-address"],
		"body": [
			"  // listener address",
			"  address = \"${1:<listener-address>}\"",
			"$0"
		],
		"description": "vault templated 'address' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'cluster_address'": {
		"prefix": ["vault-configuration-listener-parameter-cluster-address"],
		"body": [
			"  // listener cluster address",
			"  cluster_address = \"${2:<listener-cluster-address>}\"",
			"$0"
		],
		"description": "vault templated 'cluster_address' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'http_idle_timeout'": {
		"prefix": ["vault-configuration-listener-parameter-http-idle-timeout"],
		"body": [
			"  // listener http_idle_timeout",
			"  // if http_idle_timeout is zero, the value of http_read_timeout is used.",
			"  // if both are zero, the value of http_read_header_timeout is used.",
			"  http_idle_timeout = \"${2:<listener-http-timeout>}\"",
			"$0"
		],
		"description": "vault templated 'http_idle_timeout' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'http_read_header_timeout'": {
		"prefix": ["vault-configuration-listener-parameter-http-read-header-timeout"],
		"body": [
			"  // listener http_read_header_timeout",
			"  http_read_header_timeout = \"${2:<listener-http-read-header-timeout>}\"",
			"$0"
		],
		"description": "vault templated 'http_read_header_timeout' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'http_read_timeout'": {
		"prefix": ["vault-configuration-listener-parameter-http-read-timeout"],
		"body": [
			"  // listener http_read_timeout",
			"  http_read_timeout = \"${2:<listener-http-read-timeout>}\"",
			"$0"
		],
		"description": "vault templated 'http_read_timeout' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'http_write_timeout'": {
		"prefix": ["vault-configuration-listener-parameter-http-write-timeout"],
		"body": [
			"  // listener http_write_timeout",
			"  http_write_timeout = \"${2:<listener-http-write-timeout>}\"",
			"$0"
		],
		"description": "vault templated 'http_write_timeout' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'max_request_site'": {
		"prefix": ["vault-configuration-listener-parameter-max-request-size"],
		"body": [
			"  // listener max_request_site",
			"  max_request_site = \"${2:<listener-max-request-size>}\"",
			"$0"
		],
		"description": "vault templated 'max_request_site' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'max_request_duration'": {
		"prefix": ["vault-configuration-listener-parameter-max-request-duration"],
		"body": [
			"  // listener max_request_duration",
			"  max_request_duration = \"${2:<listener-max-request-duration>}\"",
			"$0"
		],
		"description": "vault templated 'max_request_duration' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'proxy_protocol_behavior'": {
		"prefix": ["vault-configuration-listener-parameter-proxy-protocol-behavior"],
		"body": [
			"  // listener proxy_protocol_behavior",
			"  // when specified, enables a PROXY protocol version 1 behavior for the listener.",
			"  // accepted values:",
			"  // use_always        - the client's IP address will always be used.",
			"  // allow_authorized  - if the source IP address is in the proxy_protocol_authorized_addrs list,",
			"  //                    the client's IP address will be used. If the source IP is not in the list, the source IP address will be used.",
			"  // deny_unauthorized - The traffic will be rejected if the source IP address is not in the proxy_protocol_authorized_addrs list.",
			"  proxy_protocol_behavior = \"${2:<listener-proxy-protocol-behavior>}\"",
			"$0"
		],
		"description": "vault templated 'proxy_protocol_behavior' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'proxy_protocol_authorized_addrs'": {
		"prefix": ["vault-configuration-listener-parameter-proxy-protocol-authorized-addrs"],
		"body": [
			"  // listener proxy_protocol_authorized_addrs",
			"  // not required if proxy_protocol_behavior is set to use_always.",
			"  // source IPs should be comma-delimited if provided as a string.",
			"  // At least one source IP must be provided, 'proxy_protocol_authorized_addrs' cannot be an empty array or string.",
			"  proxy_protocol_authorized_addrs = \"${2:<listener-proxy-protocol-authorized-addrs>}\"",
			"$0"
		],
		"description": "vault templated 'proxy_protocol_authorized_addrs' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'tls_disable'": {
		"prefix": ["vault-configuration-listener-parameter-tls-disable"],
		"body": [
			"  // listener tls_disable",
			"  tls_disable = \"${2:<listener-tls-disable>}\"",
			"$0"
		],
		"description": "vault templated 'tls_disable' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'tls_cert_file'": {
		"prefix": ["vault-configuration-listener-parameter-tls-cert-file"],
		"body": [
			"  // listener tls_cert_file",
			"  tls_cert_file = \"${2:<path-to-tls-cert-file>}\"",
			"$0"
		],
		"description": "vault templated 'tls_cert_file' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'tls_key_file'": {
		"prefix": ["vault-configuration-listener-parameter-tls-key-file"],
		"body": [
			"  // listener tls_key_file",
			"  tls_key_file = \"${2:<path-to-tls-key-file>}\"",
			"$0"
		],
		"description": "vault templated 'tls_key_file' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'tls_min_version'": {
		"prefix": ["vault-configuration-listener-parameter-tls-min-version"],
		"body": [
			"  // listener tls_min_version",
			"  // accepted values are \"tls10\", \"tls11\", \"tls12\" or \"tls13\".",
			"  tls_min_version = \"${2:<listener-tls-min-version>}\"",
			"$0"
		],
		"description": "vault templated 'tls_min_version' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'tls_cipher_suites'": {
		"prefix": ["vault-configuration-listener-parameter-tls-cipher-suites"],
		"body": [
			"  // listener tls_cipher_suites",
			"  tls_cipher_suites = \"${2:<listener-tls-cipher-suites-comma-separated>}\"",
			"$0"
		],
		"description": "vault templated 'tls_cipher_suites' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'tls_prefer_server_cipher_suites'": {
		"prefix": ["vault-configuration-listener-parameter-tls-prefer-server-cipher-suites"],
		"body": [
			"  // listener tls_prefer_server_cipher_suites",
			"  tls_prefer_server_cipher_suites = \"${2|true,false|}",
			"$0"
		],
		"description": "vault templated 'tls_prefer_server_cipher_suites' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'tls_require_and_verify_client_cert'": {
		"prefix": ["vault-configuration-listener-parameter-tls-require-and-verify-client-cert"],
		"body": [
			"  // listener tls_require_and_verify_client_cert",
			"  tls_require_and_verify_client_cert = \"${2|true,false|}",
			"$0"
		],
		"description": "vault templated 'tls_require_and_verify_client_cert' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'tls_client_ca_file'": {
		"prefix": ["vault-configuration-listener-parameter-tls-client-ca-file"],
		"body": [
			"  // listener tls_client_ca_file",
			"  // PEM-encoded certificate authority file used for checking the authenticity of client.",
			"  tls_client_ca_file = \"${2:<path-to-tls-client-ca-file>}\"",
			"$0"
		],
		"description": "vault templated 'tls_client_ca_file' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'tls_disable_client_certs'": {
		"prefix": ["vault-configuration-listener-parameter-tls-client-ca-file"],
		"body": [
			"  // listener tls_disable_client_certs",
			"  tls_disable_client_certs = \"${2|true,false|}",
			"$0"
		],
		"description": "vault templated 'tls_disable_client_certs' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'x_forwarded_for_authorized_addrs'": {
		"prefix": ["vault-configuration-listener-parameter-x-forwarded-for-authorized-addrs"],
		"body": [
			"  // listener x_forwarded_for_authorized_addrs",
			"  // specifies the list of source IP CIDRs for which an X-Forwarded-For header will be trusted.",
			"  // comma-separated list or JSON array.",
			"  // this turns on X-Forwarded-For support.",
			"  x_forwarded_for_authorized_addrs = \"${2:<listener-x-forwarded-for-authorized-addrs>}\"",
			"$0"
		],
		"description": "vault templated 'x_forwarded_for_authorized_addrs' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'x_forwarded_for_hop_skips'": {
		"prefix": ["vault-configuration-listener-parameter-x-forwarded-for-hop-skips"],
		"body": [
			"  // listener x_forwarded_for_hop_skips",
			"  // the number of addresses that will be skipped from the rear of the set of hops.",
			"  // for instance, for a header value of 1.2.3.4, 2.3.4.5, 3.4.5.6,",
			"  // if this value is set to \"1\", the address that will be used as the originating client IP is 2.3.4.5",
			"  x_forwarded_for_hop_skips = \"${2:<listener-x-forwarded-for-hop-skips>}\"",
			"$0"
		],
		"description": "vault templated 'x_forwarded_for_hop_skips' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'x_forwarded_for_reject_not_authorized'": {
		"prefix": ["vault-configuration-listener-parameter-x-forwarded-for-reject-not-authorized"],
		"body": [
			"  // listener x_forwarded_for_reject_not_authorized",
			"  // if set false, if there is an X-Forwarded-For header in a connection from an unauthorized address,",
			"  // the header will be ignored and the client connection used as-is, rather than the client connection rejected.",
			"  x_forwarded_for_reject_not_authorized = \"${2|true,false|}",
			"$0"
		],
		"description": "vault templated 'x_forwarded_for_reject_not_authorized' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'x_forwarded_for_reject_not_present'": {
		"prefix": ["vault-configuration-listener-parameter-x-forwarded-for-reject-not-present"],
		"body": [
			"  // listener x_forwarded_for_reject_not_present",
			"  // if set false, if there is no X-Forwarded-For header or it is empty, the client address will be used as-is,",
			"  // rather than the client connection rejected.",
			"  x_forwarded_for_reject_not_present = \"${2|true,false|}",
			"$0"
		],
		"description": "vault templated 'x_forwarded_for_reject_not_present' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'telemetry'": {
		"prefix": ["vault-configuration-listener-parameter-telemetry"],
		"body": [
			"  // listener telemetry",
			"  telemetry {",
			"    unauthenticated_metrics_access = \"${2|true,false|}",
			"  }",
			"$0"
		],
		"description": "vault templated 'telemetry' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'profiling'": {
		"prefix": ["vault-configuration-listener-parameter-profiling"],
		"body": [
			"  // listener profiling",
			"  profiling {",
			"    unauthenticated_pprof_access = \"${2|true,false|}",
			"  }",
			"$0"
		],
		"description": "vault templated 'profiling' parameter of configuration 'listener'"
	},
	"vault configuration 'listener' parameter 'custom_response_headers'": {
		"prefix": ["vault-configuration-listener-parameter-custom-response-headers"],
		"body": [
			"  // listener custom_response_headers",
			"  custom_response_headers {",
			"    \"default\" = {",
			"      \"${1:<header-type1>}\" = [\"${2:<header-type1-value1>}\",\"${3:<header-type1-value2>}\",\"${4:<header-type1-valueN>}\"]",
			"      \"${5:<header-type2>}\" = [\"${6:<header-type2-value1>}\",\"${7:<header-type2-value2>}\",\"${8:<header-type2-valueN>}\"]",
			"      \"${9:<header-typeN>}\" = [\"${10:<header-typeN-value1>}\",\"${11:<header-typeN-value2>}\",\"${12:<header-typeN-valueN>}\"]",
			"    },",
			"    \"${13:<specific-status-code>}\" = {",
			"      \"${14:<header-type1>}\" = [\"${15:<header-type1-value1>}\",\"${16:<header-type1-value2>}\",\"${17:<header-type1-valueN>}\"]",
			"      \"${18:<header-type2>}\" = [\"${19:<header-type2-value1>}\",\"${20:<header-type2-value2>}\",\"${21:<header-type2-valueN>}\"]",
			"      \"${22:<header-typeN>}\" = [\"${23:<header-typeN-value1>}\",\"${24:<header-typeN-value2>}\",\"${25:<header-typeN-valueN>}\"]",
			"    },",
			"    \"${26:<collective-status-code>}\" = {",
			"      \"${27:<header-type1>}\" = [\"${28:<header-type1-value1>}\",\"${29:<header-type1-value2>}\",\"${30:<header-type1-valueN>}\"]",
			"      \"${31:<header-type2>}\" = [\"${32:<header-type2-value1>}\",\"${33:<header-type2-value2>}\",\"${34:<header-type2-valueN>}\"]",
			"      \"${35:<header-typeN>}\" = [\"${36:<header-typeN-value1>}\",\"${37:<header-typeN-value2>}\",\"${38:<header-typeN-valueN>}\"]",
			"    },",
			"  }",
			"$0"
		],
		"description": "vault templated 'custom_response_headers' parameter of configuration 'listener'"
	},
	"vault configuration 'replication' - empty": {
		"prefix": ["vault-configuration-replication-empty"],
		"body": [
			"replication {",
			"  $0",
			"}",
			""
		],
		"description": "vault empty 'replication' configuration"
	},
	"vault configuration 'replication' - full": {
		"prefix": ["vault-configuration-replication-full"],
		"body": [
			"replication {",
			"  // replication resolver_discover_servers",
			"  // this feature should probably always be turned on.",
			"  // it enables secondary cluster nodes to reach out to nodes in the primary cluster to request information on who the active node is.",
			"  // this fixes an issue where a secondary cluster may only know about a single node in the primary cluster,",
			"  // and if that node isn't the active node, the replication connection will not succeed.",
			"  // with resolving disabled, the only way around this is to go through an onerous UpdatePrimary workflow,",
			"  // or do step-downs on the primary cluster until the one node known by the secondary cluster is active.",
			"  resolver_discover_servers     = ${1|true,false|}",
			"  // replication logshipper_buffer_length",
			"  // the maximum number of entries that the log shipper buffer can hold.",
			"  // if this is not specified, a default of 16K will be used.",
			"  logshipper_buffer_length      = ${2:<logshipper-buffer-length>}",
			"  // replication logshipper_buffer_size",
			"  // the maximum size that the log shipper buffer can be.",
			"  logshipper_buffer_size        = \"${3:<logshipper-buffer-size>}\"",
			"  // replication allow_forwarding_via_header",
			"  // enable forwarding options for client controlled consistency,",
			"  // i.e. X-Vault-Inconsistent: forward-active-node and X-Vault-Forward: active-node.",
			"  allow_forwarding_via_header   = ${4|true,false|}",
			"  // replication best_effort_wal_wait_duration",
			"  // legacy mitigation to try to prevent stale reads: when a write is made via RPC,",
			"  // i.e. the node handling the request didn't do the write itself,",
			"  // wait up to this much time to see the resulting WAL present locally before returning a response to the client.",
			"  best_effort_wal_wait_duration = \"${5:<best-effort-wal-wait-duration>}\"",
			"}",
			"$0",
		],
		"description": "vault full 'replication' configuration"
	},
	"vault configuration 'replication' - common": {
		"prefix": ["vault-configuration-replication-common"],
		"body": [
			"replication {",
			"  // replication resolver_discover_servers",
			"  // this feature should probably always be turned on.",
			"  // it enables secondary cluster nodes to reach out to nodes in the primary cluster to request information on who the active node is.",
			"  // this fixes an issue where a secondary cluster may only know about a single node in the primary cluster,",
			"  // and if that node isn't the active node, the replication connection will not succeed.",
			"  // with resolving disabled, the only way around this is to go through an onerous UpdatePrimary workflow,",
			"  // or do step-downs on the primary cluster until the one node known by the secondary cluster is active.",
			"  resolver_discover_servers     = ${1|true,false|}",
			"  // replication logshipper_buffer_length",
			"  // the maximum number of entries that the log shipper buffer can hold.",
			"  // if this is not specified, a default of 16K will be used.",
			"  logshipper_buffer_length      = ${2:<logshipper-buffer-length>}",
			"  // replication logshipper_buffer_size",
			"  // the maximum size that the log shipper buffer can be.",
			"  logshipper_buffer_size        = \"${3:<logshipper-buffer-size>}\"",
			"  // replication allow_forwarding_via_header",
			"  // enable forwarding options for client controlled consistency,",
			"  // i.e. X-Vault-Inconsistent: forward-active-node and X-Vault-Forward: active-node.",
			"  allow_forwarding_via_header   = ${4|true,false|}",
			"  // replication best_effort_wal_wait_duration",
			"  // legacy mitigation to try to prevent stale reads: when a write is made via RPC,",
			"  // i.e. the node handling the request didn't do the write itself,",
			"  // wait up to this much time to see the resulting WAL present locally before returning a response to the client.",
			"  best_effort_wal_wait_duration = \"${5:<best-effort-wal-wait-duration>}\"",
			"}",
			"$0",
		],
		"description": "vault common 'replication' configuration"
	},
	"vault configuration 'replication' parameter 'resolver_discover_servers'": {
		"prefix": ["vault-configuration-replication-parameter-resolver_discover_servers"],
		"body": [
			"  // replication resolver_discover_servers",
			"  // this feature should probably always be turned on.",
			"  // it enables secondary cluster nodes to reach out to nodes in the primary cluster to request information on who the active node is.",
			"  // this fixes an issue where a secondary cluster may only know about a single node in the primary cluster,",
			"  // and if that node isn't the active node, the replication connection will not succeed.",
			"  // with resolving disabled, the only way around this is to go through an onerous UpdatePrimary workflow,",
			"  // or do step-downs on the primary cluster until the one node known by the secondary cluster is active.",
			"  resolver_discover_servers = ${1|true,false|}",
			"$0"
		],
		"description": "vault templated 'resolver_discover_servers' parameter of configuration 'replication'"
	},
	"vault configuration 'replication' parameter 'logshipper_buffer_length'": {
		"prefix": ["vault-configuration-replication-parameter-logshipper-buffer-length"],
		"body": [
			"  // replication logshipper_buffer_length",
			"  // the maximum number of entries that the log shipper buffer can hold.",
			"  // if this is not specified, a default of 16K will be used.",
			"  logshipper_buffer_length = ${1:<logshipper-buffer-length>}",
			"$0"
		],
		"description": "vault templated 'logshipper_buffer_length' parameter of configuration 'replication'"
	},
	"vault configuration 'replication' parameter 'logshipper_buffer_size'": {
		"prefix": ["vault-configuration-replication-parameter-logshipper-buffer-size"],
		"body": [
			"  // replication logshipper_buffer_size",
			"  // the maximum size that the log shipper buffer can be.",
			"  logshipper_buffer_size = \"${1:<logshipper-buffer-size>}\"",
			"$0"
		],
		"description": "vault templated 'logshipper_buffer_size' parameter of configuration 'replication'"
	},
	"vault configuration 'replication' parameter 'allow_forwarding_via_header'": {
		"prefix": ["vault-configuration-replication-parameter-allow-forwarding-via-header"],
		"body": [
			"  // replication allow_forwarding_via_header",
			"  // enable forwarding options for client controlled consistency,",
			"  // i.e. X-Vault-Inconsistent: forward-active-node and X-Vault-Forward: active-node.",
			"  allow_forwarding_via_header = ${1|true,false|}",
			"$0"
		],
		"description": "vault templated 'allow_forwarding_via_header' parameter of configuration 'replication'"
	},
	"vault configuration 'replication' parameter 'best_effort_wal_wait_duration'": {
		"prefix": ["vault-configuration-replication-parameter-best-effort-wal-wait-duration"],
		"body": [
			"  // replication best_effort_wal_wait_duration",
			"  // legacy mitigation to try to prevent stale reads: when a write is made via RPC,",
			"  // i.e. the node handling the request didn't do the write itself,",
			"  // wait up to this much time to see the resulting WAL present locally before returning a response to the client.",
			"  best_effort_wal_wait_duration = \"${1:<best-effort-wal-wait-duration>}\"",
			"$0"
		],
		"description": "vault templated 'best_effort_wal_wait_duration' parameter of configuration 'replication'"
	},
	"vault configuration 'seal' alicloudkms - empty": {
		"prefix": ["vault-configuration-seal-alicloudkms-empty"],
		"body": [
			"seal \"alicloudkms\" {",
			"  $0",
			"}",
			""
		],
		"description": "vault empty 'seal' configuration for seal wrapping mechanism 'alicloudkms'"
	},
	"vault configuration 'seal' alicloudkms - full": {
		"prefix": ["vault-configuration-seal-alicloudkms-full"],
		"body": [
			"seal \"alicloudkms\" {",
			"  // alicloud region",
			"  // may also be specified by the ALICLOUD_REGION environment variable.",
			"  region = \"${1:<alicloud-region>}\"",
			"",
			"  // alicloud domain",
			"  // may also be specified by the ALICLOUD_DOMAIN environment variable.",
			"  domain = \"${2:<alicloud-domain>}\"",
			"",
			"  // alicloud access_key",
			"  // may also be specified by the ALICLOUD_ACCESS_KEY environment variable",
			"  // or as part of the AliCloud profile from the AliCloud CLI or instance profile.",
			"  access_key = \"${3:<alicloud-access-key>}\"",
			"",
			"  // alicloud secret_key",
			"  // may also be specified by the ALICLOUD_SECRET_KEY environment variable",
			"  // or as part of the AliCloud profile from the AliCloud CLI or instance profile.",
			"  secret_key = \"${4:<alicloud-secret-key>}\"",
			"",
			"  // alicloud kms_key_id",
			"  // may also be specified by the VAULT_ALICLOUDKMS_SEAL_KEY_ID environment variable.",
			"  kms_key_id = \"${5:<alicloud-kms-key-id>}\"",
			"}",
			"$0"
		],
		"description": "vault full 'seal' configuration for seal wrapping mechanism 'alicloudkms'"
	},
	"vault configuration 'seal' alicloudkms - common": {
		"prefix": ["vault-configuration-seal-alicloudkms-common"],
		"body": [
			"seal \"alicloudkms\" {",
			"  // alicloud region",
			"  // may also be specified by the ALICLOUD_REGION environment variable.",
			"  region = \"${1:<alicloud-region>}\"",
			"",
			"  // alicloud access_key",
			"  // may also be specified by the ALICLOUD_ACCESS_KEY environment variable",
			"  // or as part of the AliCloud profile from the AliCloud CLI or instance profile.",
			"  access_key = \"${2:<alicloud-access-key>}\"",
			"",
			"  // alicloud secret_key",
			"  // may also be specified by the ALICLOUD_SECRET_KEY environment variable",
			"  // or as part of the AliCloud profile from the AliCloud CLI or instance profile.",
			"  secret_key = \"${3:<alicloud-secret-key>}\"",
			"",
			"  // alicloud kms_key_id",
			"  // may also be specified by the VAULT_ALICLOUDKMS_SEAL_KEY_ID environment variable.",
			"  kms_key_id = \"${4:<alicloud-kms-key-id>}\"",
			"}",
			"$0"
		],
		"description": "vault common 'seal' configuration for seal wrapping mechanism 'alicloudkms'"
	},
	"vault configuration 'seal' alicloudkms parameter 'region'": {
		"prefix": ["vault-configuration-seal-alicloudkms-parameter-region"],
		"body": [
			"  // alicloud region",
			"  // may also be specified by the ALICLOUD_REGION environment variable.",
			"  region = \"${1:<alicloud-region>}\"",
			"$0"
		],
		"description": "vault templated 'region' parameter of configuration 'seal' for seal wrapping mechanism 'alicloudkms'"
	},
	"vault configuration 'seal' alicloudkms parameter 'domain'": {
		"prefix": ["vault-configuration-seal-alicloudkms-parameter-domain"],
		"body": [
			"  // alicloud domain",
			"  // may also be specified by the ALICLOUD_DOMAIN environment variable.",
			"  domain = \"${1:<alicloud-domain>}\"",
			"$0"
		],
		"description": "vault templated 'domain' parameter of configuration 'seal' for seal wrapping mechanism 'alicloudkms'"
	},
	"vault configuration 'seal' alicloudkms parameter 'access_key'": {
		"prefix": ["vault-configuration-seal-alicloudkms-parameter-access-key"],
		"body": [
			"  // alicloud access_key",
			"  // may also be specified by the ALICLOUD_ACCESS_KEY environment variable",
			"  // or as part of the AliCloud profile from the AliCloud CLI or instance profile.",
			"  access_key = \"${1:<alicloud-access-key>}\"",
			"$0"
		],
		"description": "vault templated 'access_key' parameter of configuration 'seal' for seal wrapping mechanism 'alicloudkms'"
	},
	"vault configuration 'seal' alicloudkms parameter 'secret_key'": {
		"prefix": ["vault-configuration-seal-alicloudkms-parameter-secret-key"],
		"body": [
			"  // alicloud secret_key",
			"  // may also be specified by the ALICLOUD_SECRET_KEY environment variable",
			"  // or as part of the AliCloud profile from the AliCloud CLI or instance profile.",
			"  secret_key = \"${1:<alicloud-secret-key>}\"",
			"$0"
		],
		"description": "vault templated 'secret_key' parameter of configuration 'seal' for seal wrapping mechanism 'alicloudkms'"
	},
	"vault configuration 'seal' alicloudkms parameter 'kms_key_id'": {
		"prefix": ["vault-configuration-seal-alicloudkms-parameter-kms-key-id"],
		"body": [
			"  // alicloud kms_key_id",
			"  // may also be specified by the VAULT_ALICLOUDKMS_SEAL_KEY_ID environment variable.",
			"  kms_key_id = \"${1:<alicloud-kms-key-id>}\"",
			"$0"
		],
		"description": "vault templated 'kms_key_id' parameter of configuration 'seal' for seal wrapping mechanism 'alicloudkms'"
	},
	"vault configuration 'seal' awskms - empty": {
		"prefix": ["vault-configuration-seal-awskms-empty"],
		"body": [
			"seal \"awskms\" {",
			"  $0",
			"}",
			""
		],
		"description": "vault empty 'seal' configuration for seal wrapping mechanism 'awskms'"
	},
	"vault configuration 'seal' awskms - full": {
		"prefix": ["vault-configuration-seal-awskms-full"],
		"body": [
			"seal \"awskms\" {",
			"  // awskms region",
			"  // the AWS region where the encryption key lives.",
			"  // iff not provided, may be populated from the AWS_REGION or AWS_DEFAULT_REGION environment variables,",
			"  // from your ~/.aws/config file, or from instance metadata.",
			"  region = \"${1:<aws-region>}\"",
			"",
			"  // aws access_key",
			"  // may also be specified by the AWS_ACCESS_KEY_ID environment variable",
			"  // or as part of the AWS profile from the AWS CLI or instance profile.",
			"  access_key = \"${2:<aws-access-key>}\"",
			"",
			"  // aws session_token",
			"  // this can also be provided via the environment variable AWS_SESSION_TOKEN.",
			"  session_token = \"${3:<aws-session-token>}\"",
			"",
			"  // aws secret_key",
			"  // may also be specified by the AWS_SECRET_ACCESS_KEY environment variable",
			"  // or as part of the AWS profile from the AWS CLI or instance profile.",
			"  secret_key = \"${4:<aws-secret-key>}\"",
			"",
			"  // aws kms_key_id",
			"  // the AWS KMS key ID or ARN to use for encryption and decryption.",
			"  // may also be specified by the VAULT_AWSKMS_SEAL_KEY_ID environment variable.",
			"  kms_key_id = \"${5:<aws-kms-key-id>}\"",
			"",
			"  // aws endpoint",
			"  // the KMS API endpoint to be used to make AWS KMS requests.",
			"  // may also be specified by the AWS_KMS_ENDPOINT environment variable.",
			"  // this is useful, for example, when connecting to KMS over a VPC Endpoint.",
			"  // if not set, Vault will use the default API endpoint for your region.",
			"  endpoint = \"${6:<aws-endpoint>}\"",
			"}",
			"$0"
		],
		"description": "vault full 'seal' configuration for seal wrapping mechanism 'awskms'"
	},
	"vault configuration 'seal' awskms - common": {
		"prefix": ["vault-configuration-seal-awskms-common"],
		"body": [
			"seal \"awskms\" {",
			"  // awskms region",
			"  // the AWS region where the encryption key lives.",
			"  // iff not provided, may be populated from the AWS_REGION or AWS_DEFAULT_REGION environment variables,",
			"  // from your ~/.aws/config file, or from instance metadata.",
			"  region = \"${1:<aws-region>}\"",
			"",
			"  // aws access_key",
			"  // may also be specified by the AWS_ACCESS_KEY_ID environment variable",
			"  // or as part of the AWS profile from the AWS CLI or instance profile.",
			"  access_key = \"${2:<aws-access-key>}\"",
			"",
			"  // aws secret_key",
			"  // may also be specified by the AWS_SECRET_ACCESS_KEY environment variable",
			"  // or as part of the AWS profile from the AWS CLI or instance profile.",
			"  secret_key = \"${3:<aws-secret-key>}\"",
			"",
			"  // aws kms_key_id",
			"  // the AWS KMS key ID or ARN to use for encryption and decryption.",
			"  // may also be specified by the VAULT_AWSKMS_SEAL_KEY_ID environment variable.",
			"  kms_key_id = \"${4:<aws-kms-key-id>}\"",
			"}",
			"$0"
		],
		"description": "vault common 'seal' configuration for seal wrapping mechanism 'awskms'"
	},
	"vault configuration 'seal' awskms parameter 'region'": {
		"prefix": ["vault-configuration-seal-awskms-parameter-region"],
		"body": [
			"  // aws region",
			"  // the AWS region where the encryption key lives.",
			"  // iff not provided, may be populated from the AWS_REGION or AWS_DEFAULT_REGION environment variables,",
			"  // from your ~/.aws/config file, or from instance metadata.",
			"  region = \"${1:<aws-region>}\"",
			"$0"
		],
		"description": "vault templated 'region' parameter of configuration 'seal' for seal wrapping mechanism 'awskms'"
	},
	"vault configuration 'seal' awskms parameter 'access_key'": {
		"prefix": ["vault-configuration-seal-awskms-parameter-access-key"],
		"body": [
			"  // aws access_key",
			"  // may also be specified by the AWS_ACCESS_KEY_ID environment variable",
			"  // or as part of the AWS profile from the AWS CLI or instance profile.",
			"  access_key = \"${1:<aws-access-key>}\"",
			"$0"
		],
		"description": "vault templated 'access_key' parameter of configuration 'seal' for seal wrapping mechanism 'awskms'"
	},
	"vault configuration 'seal' awskms parameter 'session_token'": {
		"prefix": ["vault-configuration-seal-awskms-parameter-session-token"],
		"body": [
			"  // aws session_token",
			"  // this can also be provided via the environment variable AWS_SESSION_TOKEN.",
			"  session_token = \"${1:<aws-session-token>}\"",
			"$0"
		],
		"description": "vault templated 'session_token' parameter of configuration 'seal' for seal wrapping mechanism 'awskms'"
	},
	"vault configuration 'seal' awskms parameter 'secret_key'": {
		"prefix": ["vault-configuration-seal-awskms-parameter-secret-key"],
		"body": [
			"  // aws secret_key",
			"  // may also be specified by the AWS_SECRET_ACCESS_KEY environment variable",
			"  // or as part of the AWS profile from the AWS CLI or instance profile.",
			"  secret_key = \"${1:<aws-secret-key>}\"",
			"$0"
		],
		"description": "vault templated 'secret_key' parameter of configuration 'seal' for seal wrapping mechanism 'awskms'"
	},
	"vault configuration 'seal' awskms parameter 'kms_key_id'": {
		"prefix": ["vault-configuration-seal-awskms-parameter-kms-key-id"],
		"body": [
			"  // aws kms_key_id",
			"  // the AWS KMS key ID or ARN to use for encryption and decryption.",
			"  // may also be specified by the VAULT_AWSKMS_SEAL_KEY_ID environment variable.",
			"  kms_key_id = \"${1:<aws-kms-key-id>}\"",
			"$0"
		],
		"description": "vault templated 'kms_key_id' parameter of configuration 'seal' for seal wrapping mechanism 'awskms'"
	},
	"vault configuration 'seal' awskms parameter 'endpoint'": {
		"prefix": ["vault-configuration-seal-awskms-parameter-endpoint"],
		"body": [
			"  // aws endpoint",
			"  // the KMS API endpoint to be used to make AWS KMS requests.",
			"  // may also be specified by the AWS_KMS_ENDPOINT environment variable.",
			"  // this is useful, for example, when connecting to KMS over a VPC Endpoint.",
			"  // if not set, Vault will use the default API endpoint for your region.",
			"  endpoint = \"${1:<aws-endpoint>}\"",
			"$0"
		],
		"description": "vault templated 'endpoint' parameter of configuration 'seal' for seal wrapping mechanism 'awskms'"
	},
	"vault configuration 'seal' azurekeyvault - empty": {
		"prefix": ["vault-configuration-seal-azurekeyvault-empty"],
		"body": [
			"seal \"azurekeyvault\" {",
			"  $0",
			"}",
			""
		],
		"description": "vault empty 'seal' configuration for seal wrapping mechanism 'azurekeyvault'"
	},
	"vault configuration 'seal' azurekeyvault - full": {
		"prefix": ["vault-configuration-seal-azurekeyvault-full"],
		"body": [
			"seal \"azurekeyvault\" {",
			"  // azurekeyvault tenant_id",
			"  // may also be specified by the AZURE_TENANT_ID environment variable.",
			"  tenant_id = \"${1:<azure-tenant-id>}\"",
			"",
			"  // azurekeyvault client_id",
			"  // may also be specified by the AZURE_CLIENT_ID environment variable.",
			"  client_id     = \"${2:<azure-client-id>}\"",
			"  // azurekeyvault client_secret",
			"  // may also be specified by the AZURE_CLIENT_SECRET environment variable.",
			"  client_secret = \"${3:<azure-client-secret>}\"",
			"",
			"  // azurekeyvault environment",
			"  // may also be specified by the AZURE_ENVIRONMENT environment variable.",
			"  environment = \"${4:<azure-environment>}\"",
			"",
			"  // azurekeyvault vault_name",
			"  // the Key Vault vault to use the encryption keys for encryption and decryption.",
			"  // may also be specified by the VAULT_AZUREKEYVAULT_VAULT_NAME environment variable.",
			"  vault_name = \"${5:<azure-vault-name>}\"",
			"  // azurekeyvault key_name",
			"  // the Key Vault key to use for encryption and decryption.",
			"  // may also be specified by the VAULT_AZUREKEYVAULT_KEY_NAME environment variable.",
			"  key_name   = \"${6:<azure-key-name>}\"",
			"}",
			"$0"
		],
		"description": "vault full 'seal' configuration for seal wrapping mechanism 'azurekeyvault'"
	},
	"vault configuration 'seal' azurekeyvault - common": {
		"prefix": ["vault-configuration-seal-azurekeyvault-common"],
		"body": [
			"seal \"azurekeyvault\" {",
			"  // azurekeyvault tenant_id",
			"  // may also be specified by the AZURE_TENANT_ID environment variable.",
			"  tenant_id = \"${1:<azure-tenant-id>}\"",
			"",
			"  // azurekeyvault client_id",
			"  // may also be specified by the AZURE_CLIENT_ID environment variable.",
			"  client_id     = \"${2:<azure-client-id>}\"",
			"  // azurekeyvault client_secret",
			"  // may also be specified by the AZURE_CLIENT_SECRET environment variable.",
			"  client_secret = \"${3:<azure-client-secret>}\"",
			"",
			"  // azurekeyvault vault_name",
			"  // the Key Vault vault to use the encryption keys for encryption and decryption.",
			"  // may also be specified by the VAULT_AZUREKEYVAULT_VAULT_NAME environment variable.",
			"  vault_name = \"${4:<azure-vault-name>}\"",
			"  // azurekeyvault key_name",
			"  // the Key Vault key to use for encryption and decryption.",
			"  // may also be specified by the VAULT_AZUREKEYVAULT_KEY_NAME environment variable.",
			"  key_name   = \"${5:<azure-key-name>}\"",
			"}",
			"$0"
		],
		"description": "vault common 'seal' configuration for seal wrapping mechanism 'azurekeyvault'"
	},
	"vault configuration 'seal' azurekeyvault parameter 'tenant_id'": {
		"prefix": ["vault-configuration-seal-azurekeyvault-parameter-tenant-id"],
		"body": [
			"  // azurekeyvault tenant_id",
			"  // may also be specified by the AZURE_TENANT_ID environment variable.",
			"  tenant_id = \"${1:<azure-tenant-id>}\"",
			"$0"
		],
		"description": "vault templated 'tenant_id' parameter of configuration 'seal' for seal wrapping mechanism 'azurekeyvault'"
	},
	"vault configuration 'seal' azurekeyvault parameter 'client_id'": {
		"prefix": ["vault-configuration-seal-azurekeyvault-parameter-client-id"],
		"body": [
			"  // azurekeyvault client_id",
			"  // may also be specified by the AZURE_CLIENT_ID environment variable.",
			"  client_id = \"${1:<azure-client-id>}\"",
			"$0"
		],
		"description": "vault templated 'client_id' parameter of configuration 'seal' for seal wrapping mechanism 'azurekeyvault'"
	},
	"vault configuration 'seal' azurekeyvault parameter 'client_secret'": {
		"prefix": ["vault-configuration-seal-azurekeyvault-parameter-client-secret"],
		"body": [
			"  // azurekeyvault client_secret",
			"  // may also be specified by the AZURE_CLIENT_SECRET environment variable.",
			"  client_secret = \"${1:<azure-client-secret>}\"",
			"$0"
		],
		"description": "vault templated 'client_secret' parameter of configuration 'seal' for seal wrapping mechanism 'azurekeyvault'"
	},
	"vault configuration 'seal' azurekeyvault parameter 'environment'": {
		"prefix": ["vault-configuration-seal-azurekeyvault-parameter-environment"],
		"body": [
			"  // azurekeyvault environment",
			"  // may also be specified by the AZURE_ENVIRONMENT environment variable.",
			"  environment = \"${1:<azure-environment>}\"",
			"$0"
		],
		"description": "vault templated 'environment' parameter of configuration 'seal' for seal wrapping mechanism 'azurekeyvault'"
	},
	"vault configuration 'seal' azurekeyvault parameter 'vault_name'": {
		"prefix": ["vault-configuration-seal-azurekeyvault-parameter-vault-name"],
		"body": [
			"  // azurekeyvault vault_name",
			"  // the Key Vault vault to use the encryption keys for encryption and decryption.",
			"  // may also be specified by the VAULT_AZUREKEYVAULT_VAULT_NAME environment variable.",
			"  vault_name = \"${1:<azure-vault-name>}\"",
			"$0"
		],
		"description": "vault templated 'vault_name' parameter of configuration 'seal' for seal wrapping mechanism 'azurekeyvault'"
	},
	"vault configuration 'seal' azurekeyvault parameter 'key_name'": {
		"prefix": ["vault-configuration-seal-azurekeyvault-parameter-key-name"],
		"body": [
			"  // azurekeyvault key_name",
			"  // the Key Vault key to use for encryption and decryption.",
			"  // may also be specified by the VAULT_AZUREKEYVAULT_KEY_NAME environment variable.",
			"  key_name = \"${1:<azure-key-name>}\"",
			"$0"
		],
		"description": "vault templated 'key_name' parameter of configuration 'seal' for seal wrapping mechanism 'azurekeyvault'"
	},
	"vault configuration 'seal' gcpckms - empty": {
		"prefix": ["vault-configuration-seal-gcpckms-empty"],
		"body": [
			"seal \"gcpckms\" {",
			"  $0",
			"}",
			""
		],
		"description": "vault empty 'seal' configuration for seal wrapping mechanism 'gcpckms'"
	},
	"vault configuration 'seal' gcpckms - full": {
		"prefix": ["vault-configuration-seal-gcpckms-full"],
		"body": [
			"seal \"gcpckms\" {",
			"  // gcpckms credentials",
			"  // the path to the credentials JSON file to use.",
			"  // may be also specified by the GOOGLE_CREDENTIALS or GOOGLE_APPLICATION_CREDENTIALS environment variable",
			"  // or set automatically if running under Google App Engine, Google Compute Engine or Google Kubernetes Engine.",
			"  credentials = \"${1:<gcp-cloud-credentials>}\"",
			"",
			"  // gcpckms project",
			"  // may also be specified by the GOOGLE_PROJECT environment variable.",
			"  project = \"${2:<gcp-cloud-project>}\"",
			"",
			"  // gcpckms region",
			"  // may also be specified by the GOOGLE_REGION environment variable.",
			"  region = \"${3:<gcp-cloud-region>}\"",
			"",
			"  // gcpckms key_ring",
			"  // may also be specified by the VAULT_GCPCKMS_SEAL_KEY_RING environment variable.",
			"  key_ring = \"${4:<gcp-cloud-key-ring>}\"",
			"",
			"  // gcpckms crypto_key",
			"  // may also be specified by the VAULT_GCPCKMS_SEAL_CRYPTO_KEY environment variable.",
			"  crypto_key = \"${5:<gcp-cloud-crypto-ring>}\"",
			"}",
			"$0"
		],
		"description": "vault full 'seal' configuration for seal wrapping mechanism 'gcpckms'"
	},
	"vault configuration 'seal' gcpckms - common": {
		"prefix": ["vault-configuration-seal-gcpckms-common"],
		"body": [
			"seal \"gcpckms\" {",
			"  // gcpckms credentials",
			"  // the path to the credentials JSON file to use.",
			"  // may be also specified by the GOOGLE_CREDENTIALS or GOOGLE_APPLICATION_CREDENTIALS environment variable",
			"  // or set automatically if running under Google App Engine, Google Compute Engine or Google Kubernetes Engine.",
			"  credentials = \"${1:<gcp-cloud-credentials>}\"",
			"",
			"  // gcpckms project",
			"  // may also be specified by the GOOGLE_PROJECT environment variable.",
			"  project = \"${2:<gcp-cloud-project>}\"",
			"",
			"  // gcpckms region",
			"  // may also be specified by the GOOGLE_REGION environment variable.",
			"  region = \"${3:<gcp-cloud-region>}\"",
			"",
			"  // gcpckms key_ring",
			"  // may also be specified by the VAULT_GCPCKMS_SEAL_KEY_RING environment variable.",
			"  key_ring = \"${4:<gcp-cloud-key-ring>}\"",
			"",
			"  // gcpckms crypto_key",
			"  // may also be specified by the VAULT_GCPCKMS_SEAL_CRYPTO_KEY environment variable.",
			"  crypto_key = \"${5:<gcp-cloud-crypto-ring>}\"",
			"}",
			"$0"
		],
		"description": "vault common 'seal' configuration for seal wrapping mechanism 'gcpckms'"
	},
	"vault configuration 'seal' gcpckms parameter 'credentials'": {
		"prefix": ["vault-configuration-seal-gcpckms-parameter-credentials"],
		"body": [
			"  // gcpckms credentials",
			"  // the path to the credentials JSON file to use.",
			"  // may be also specified by the GOOGLE_CREDENTIALS or GOOGLE_APPLICATION_CREDENTIALS environment variable",
			"  // or set automatically if running under Google App Engine, Google Compute Engine or Google Kubernetes Engine.",
			"  credentials = \"${1:<gcp-cloud-credentials>}\"",
			"$0"
		],
		"description": "vault templated 'credentials' parameter of configuration 'seal' for seal wrapping mechanism 'gcpckms'"
	},
	"vault configuration 'seal' gcpckms parameter 'project'": {
		"prefix": ["vault-configuration-seal-gcpckms-parameter-project"],
		"body": [
			"  // gcpckms project",
			"  // may also be specified by the GOOGLE_PROJECT environment variable.",
			"  project = \"${1:<gcp-cloud-project>}\"",
			"$0"
		],
		"description": "vault templated 'project' parameter of configuration 'seal' for seal wrapping mechanism 'gcpckms'"
	},
	"vault configuration 'seal' gcpckms parameter 'region'": {
		"prefix": ["vault-configuration-seal-gcpckms-parameter-region"],
		"body": [
			"  // gcpckms region",
			"  // may also be specified by the GOOGLE_REGION environment variable.",
			"  region = \"${1:<gcp-cloud-region>}\"",
			"$0"
		],
		"description": "vault templated 'region' parameter of configuration 'seal' for seal wrapping mechanism 'gcpckms'"
	},
	"vault configuration 'seal' gcpckms parameter 'key_ring'": {
		"prefix": ["vault-configuration-seal-gcpckms-parameter-key-ring"],
		"body": [
			"  // gcpckms key_ring",
			"  // may also be specified by the VAULT_GCPCKMS_SEAL_KEY_RING environment variable.",
			"  key_ring = \"${1:<gcp-cloud-key-ring>}\"",
			"$0"
		],
		"description": "vault templated 'key_ring' parameter of configuration 'seal' for seal wrapping mechanism 'gcpckms'"
	},
	"vault configuration 'seal' gcpckms parameter 'crypto_key'": {
		"prefix": ["vault-configuration-seal-gcpckms-parameter-crypto-ring"],
		"body": [
			"  // gcpckms crypto_key",
			"  // may also be specified by the VAULT_GCPCKMS_SEAL_CRYPTO_KEY environment variable.",
			"  crypto_key = \"${1:<gcp-cloud-crypto-ring>}\"",
			"$0"
		],
		"description": "vault templated 'crypto_key' parameter of configuration 'seal' for seal wrapping mechanism 'gcpckms'"
	},
	"vault configuration 'seal' ocikms - empty": {
		"prefix": ["vault-configuration-seal-ocikms-empty"],
		"body": [
			"seal \"ocikms\" {",
			"  $0",
			"}",
			""
		],
		"description": "vault empty 'seal' configuration for seal wrapping mechanism 'ocikms'"
	},
	"vault configuration 'seal' ocikms - full": {
		"prefix": ["vault-configuration-seal-ocikms-full"],
		"body": [
			"seal \"ocikms\" {",
			"  // ocikms key_id",
			"  // may also be specified by the VAULT_OCIKMS_SEAL_KEY_ID environment variable.",
			"  key_id = \"${1:<oci-key-id>}\"",
			"",
			"  // ocikms crypto_endpoint",
			"  // may also be specified by the VAULT_OCIKMS_CRYPTO_ENDPOINT environment variable.",
			"  crypto_endpoint = \"${2:<oci-crypto-endpoint>}\"",
			"",
			"  // ocikms management_endpoint",
			"  // may also be specified by the VAULT_OCIKMS_MANAGEMENT_ENDPOINT environment variable.",
			"  management_endpoint = \"${3:<oci-management-endpoint>}\"",
			"",
			"  // ocikms auth_type_api_key",
			"  // if it is false, Vault authenticates using the instance principal from the compute instance.",
			"  // default is false.",
			"  auth_type_api_key = \"${4:<oci-auth-type-api-key>}\"",
			"}",
			"$0"
		],
		"description": "vault full 'seal' configuration for seal wrapping mechanism 'ocikms'"
	},
	"vault configuration 'seal' ocikms - common": {
		"prefix": ["vault-configuration-seal-ocikms-common"],
		"body": [
			"seal \"ocikms\" {",
			"  // ocikms key_id",
			"  // may also be specified by the VAULT_OCIKMS_SEAL_KEY_ID environment variable.",
			"  key_id = \"${1:<oci-key-id>}\"",
			"",
			"  // ocikms crypto_endpoint",
			"  // may also be specified by the VAULT_OCIKMS_CRYPTO_ENDPOINT environment variable.",
			"  crypto_endpoint = \"${2:<oci-crypto-endpoint>}\"",
			"",
			"  // ocikms management_endpoint",
			"  // may also be specified by the VAULT_OCIKMS_MANAGEMENT_ENDPOINT environment variable.",
			"  management_endpoint = \"${3:<oci-management-endpoint>}\"",
			"}",
			"$0"
		],
		"description": "vault common 'seal' configuration for seal wrapping mechanism 'ocikms'"
	},
	"vault configuration 'seal' ocikms parameter 'key_id'": {
		"prefix": ["vault-configuration-seal-ocikms-parameter-key-id"],
		"body": [
			"  // ocikms key_id",
			"  // may also be specified by the VAULT_OCIKMS_SEAL_KEY_ID environment variable.",
			"  key_id = \"${1:<oci-key-id>}\"",
			"$0"
		],
		"description": "vault templated 'key_id' parameter of configuration 'seal' for seal wrapping mechanism 'ocikms'"
	},
	"vault configuration 'seal' ocikms parameter 'crypto_endpoint'": {
		"prefix": ["vault-configuration-seal-ocikms-parameter-crypto-endpoint"],
		"body": [
			"  // ocikms crypto_endpoint",
			"  // may also be specified by the VAULT_OCIKMS_CRYPTO_ENDPOINT environment variable.",
			"  crypto_endpoint = \"${1:<oci-crypto-endpoint>}\"",
			"$0"
		],
		"description": "vault templated 'crypto_endpoint' parameter of configuration 'seal' for seal wrapping mechanism 'ocikms'"
	},
	"vault configuration 'seal' ocikms parameter 'management_endpoint'": {
		"prefix": ["vault-configuration-seal-ocikms-parameter-management-endpoint"],
		"body": [
			"  // ocikms management_endpoint",
			"  // may also be specified by the VAULT_OCIKMS_MANAGEMENT_ENDPOINT environment variable.",
			"  management_endpoint = \"${1:<oci-management-endpoint>}\"",
			"$0"
		],
		"description": "vault templated 'management_endpoint' parameter of configuration 'seal' for seal wrapping mechanism 'ocikms'"
	},
	"vault configuration 'seal' ocikms parameter 'auth_type_api_key'": {
		"prefix": ["vault-configuration-seal-ocikms-parameter-auth-type-api-key"],
		"body": [
			"  // ocikms auth_type_api_key",
			"  // if it is false, Vault authenticates using the instance principal from the compute instance.",
			"  // default is false.",
			"  auth_type_api_key = \"${1:<oci-auth-type-api-key>}\"",
			"$0"
		],
		"description": "vault templated 'auth_type_api_key' parameter of configuration 'seal' for seal wrapping mechanism 'ocikms'"
	},
	"vault configuration 'seal' pkcs11 - empty": {
		"prefix": ["vault-configuration-seal-pkcs11-empty"],
		"body": [
			"seal \"pkcs11\" {",
			"  $0",
			"}",
			""
		],
		"description": "vault empty 'seal' configuration for seal wrapping mechanism 'pkcs11'"
	},
	"vault configuration 'seal' pkcs11 - full": {
		"prefix": ["vault-configuration-seal-pkcs11-full"],
		"body": [
			"seal \"pkcs11\" {",
			"  // pkcs11 lib",
			"  // may also be specified by the VAULT_HSM_LIB environment variable.",
			"  lib = \"${1:<path-to-pkcs11-lib>}\"",
			"",
			"  // pkcs11 slot",
			"  // may also be specified by the VAULT_HSM_SLOT environment variable.",
			"  slot        = \"${2:<hsm-slot-number>}\"",
			"",
			"  // pkcs11 token_label",
			"  // may also be specified by the VAULT_HSM_TOKEN_LABEL environment variable.",
			"  token_label = \"${3:<hsm-token-label>}\"",
			"",
			"  // pkcs11 pin",
			"  // may also be specified by the VAULT_HSM_PIN environment variable.",
			"  // ! if set via the environment variable, Vault will obfuscate the environment variable after reading it, and it will need to be re-set if Vault is restarted. !",
			"  pin = \"${4:<hsm-pin>}\"",
			"",
			"  // pkcs11 key_label",
			"  // if the key does not exist and generation is enabled, this is the label that will be given to the generated key.",
			"  // may also be specified by the VAULT_HSM_KEY_LABEL environment variable.",
			"  key_label = \"${5:<hsm-key-label>}\"",
			"",
			"  // pkcs11 default_key_label",
			"  // this is the default key label for decryption operations.",
			"  // seal entries track the label used in encryption operations.",
			"  // the default value for this field is the 'key_label'.",
			"  // if 'key_label' is rotated and this value is not set, decryption may fail.",
			"  // may also be specified by the VAULT_HSM_DEFAULT_KEY_LABEL environment variable.",
			"  default_key_label = \"${6:<hsm-default-key-label>}\"",
			"",
			"  // pkcs11 hmac_key_label",
			"  // if the key does not exist and generation is enabled, this is the label that will be given to the generated key.",
			"  // may also be specified by the VAULT_HSM_HMAC_KEY_LABEL environment variable.",
			"  hmac_key_label         = \"${7:<hsm-hmac-key-label>}\"",
			"  // pkcs11 default_hmac_key_label",
			"  // the default value for this field is the hmac_key_label.",
			"  // if hmac_key_label is rotated and this value is not set, signature verification may fail.",
			"  // may also be specified by the VAULT_HSM_HMAC_DEFAULT_KEY_LABEL environment variable.",
			"  default_hmac_key_label = \"${8:<hsm-default-hmac-key-label>}\"",
			"",
			"  // pkcs11 mechanism",
			"  // specified as a decimal or hexadecimal (prefixed by 0x) string.",
			"  // may also be specified by the VAULT_HSM_MECHANISM environment variable.",
			"  // currently supported mechanisms (in order of precedence):",
			"  //    0x1085 - CKM_AES_CBC_PAD (HMAC mechanism required)",
			"  //    0x1082 - CKM_AES_CBC (HMAC mechanism required)",
			"  //    0x1087 - CKM_AES_GCM",
			"  //    0x0009 - CKM_RSA_PKCS_OAEP",
			"  //    0x0001 - CKM_RSA_PKCS",
			"  mechanism      = \"${9:<hsm-mechanism>}\"",
			"  // pkcs11 hmac_mechanism",
			"  // specified as a decimal or hexadecimal (prefixed by 0x) string.",
			"  // currently only '0x0251' (corresponding to CKM_SHA256_HMAC from the specification) is supported.",
			"  // may also be specified by the VAULT_HSM_HMAC_MECHANISM environment variable.",
			"  hmac_mechanism = \"${10:<hsm-hmac-mechanism>}\"",
			"",
			"  // pkcs11 generate_key",
			"  // if no existing key with the label specified by key_label can be found at Vault initialization time, instructs Vault to generate a key.",
			"  // may also be specified by the VAULT_HSM_GENERATE_KEY environment variable.",
			"  generate_key = \"${11:<hsm-generate-key>}\" # (\"true\"|\"false\")",
			"",
			"  // pkcs11 rsa_encrypt_local",
			"  // may also be specified by the VAULT_HSM_RSA_ENCRYPT_LOCAL environment variable.",
			"  rsa_encrypt_local = \"${12:<hsm-rsa-encrypt-local>}\"",
			"",
			"}",
			"$0"
		],
		"description": "vault full 'seal' configuration for seal wrapping mechanism 'pkcs11'"
	},
	"vault configuration 'seal' pkcs11 - common": {
		"prefix": ["vault-configuration-seal-pkcs11-common"],
		"body": [
			"seal \"pkcs11\" {",
			"  // pkcs11 lib",
			"  // may also be specified by the VAULT_HSM_LIB environment variable.",
			"  lib = \"${1:<path-to-pkcs11-lib>}\"",
			"",
			"  // pkcs11 slot",
			"  // may also be specified by the VAULT_HSM_SLOT environment variable.",
			"  slot        = \"${2:<hsm-slot-number>}\"",
			"",
			"  // pkcs11 token_label",
			"  // may also be specified by the VAULT_HSM_TOKEN_LABEL environment variable.",
			"  token_label = \"${3:<hsm-token-label>}\"",
			"",
			"  // pkcs11 pin",
			"  // may also be specified by the VAULT_HSM_PIN environment variable.",
			"  // ! if set via the environment variable, Vault will obfuscate the environment variable after reading it, and it will need to be re-set if Vault is restarted. !",
			"  pin = \"${4:<hsm-pin>}\"",
			"",
			"  // pkcs11 key_label",
			"  // if the key does not exist and generation is enabled, this is the label that will be given to the generated key.",
			"  // may also be specified by the VAULT_HSM_KEY_LABEL environment variable.",
			"  key_label = \"${5:<hsm-key-label>}\"",
			"",
			"  // pkcs11 hmac_key_label",
			"  // if the key does not exist and generation is enabled, this is the label that will be given to the generated key.",
			"  // may also be specified by the VAULT_HSM_HMAC_KEY_LABEL environment variable.",
			"  hmac_key_label = \"${6:<hsm-hmac-key-label>}\"",
			"}",
			"$0"
		],
		"description": "vault common 'seal' configuration for seal wrapping mechanism 'pkcs11'"
	},
	"vault configuration 'seal' pkcs11 parameter 'lib'": {
		"prefix": ["vault-configuration-seal-pkcs11-parameter-lib"],
		"body": [
			"  // pkcs11 lib",
			"  // may also be specified by the VAULT_HSM_LIB environment variable.",
			"  lib = \"${1:<path-to-pkcs11-lib>}\"",
			"$0"
		],
		"description": "vault templated 'lib' parameter of configuration 'seal' for seal wrapping mechanism 'pkcs11'"
	},
	"vault configuration 'seal' pkcs11 parameter 'slot'": {
		"prefix": ["vault-configuration-seal-pkcs11-parameter-slot"],
		"body": [
			"  // pkcs11 slot",
			"  // may also be specified by the VAULT_HSM_SLOT environment variable.",
			"  slot = \"${1:<hsm-slot-number>}\"",
			"$0"
		],
		"description": "vault templated 'slot' parameter of configuration 'seal' for seal wrapping mechanism 'pkcs11'"
	},
	"vault configuration 'seal' pkcs11 parameter 'token_label'": {
		"prefix": ["vault-configuration-seal-pkcs11-parameter-token-label"],
		"body": [
			"  // pkcs11 token_label",
			"  // may also be specified by the VAULT_HSM_TOKEN_LABEL environment variable.",
			"  token_label = \"${1:<hsm-slot-token-label>}\"",
			"$0"
		],
		"description": "vault templated 'token_label' parameter of configuration 'seal' for seal wrapping mechanism 'pkcs11'"
	},
	"vault configuration 'seal' pkcs11 parameter 'pin'": {
		"prefix": ["vault-configuration-seal-pkcs11-parameter-pin"],
		"body": [
			"  // pkcs11 pin",
			"  // may also be specified by the VAULT_HSM_PIN environment variable.",
			"  // ! if set via the environment variable, Vault will obfuscate the environment variable after reading it, and it will need to be re-set if Vault is restarted. !",
			"  pin = \"${1:<hsm-pin>}\"",
			"$0"
		],
		"description": "vault templated 'pin' parameter of configuration 'seal' for seal wrapping mechanism 'pkcs11'"
	},
	"vault configuration 'seal' pkcs11 parameter 'key_label'": {
		"prefix": ["vault-configuration-seal-pkcs11-parameter-key-label"],
		"body": [
			"  // pkcs11 key_label",
			"  // if the key does not exist and generation is enabled, this is the label that will be given to the generated key.",
			"  // may also be specified by the VAULT_HSM_KEY_LABEL environment variable.",
			"  key_label = \"${1:<hsm-key-label>}\"",
			"$0"
		],
		"description": "vault templated 'key_label' parameter of configuration 'seal' for seal wrapping mechanism 'pkcs11'"
	},
	"vault configuration 'seal' pkcs11 parameter 'default_key_label'": {
		"prefix": ["vault-configuration-seal-pkcs11-parameter-default-key-label"],
		"body": [
			"  // pkcs11 default_key_label",
			"  // this is the default key label for decryption operations.",
			"  // seal entries track the label used in encryption operations.",
			"  // the default value for this field is the 'key_label'.",
			"  // if 'key_label' is rotated and this value is not set, decryption may fail.",
			"  // may also be specified by the VAULT_HSM_DEFAULT_KEY_LABEL environment variable.",
			"  default_key_label = \"${1:<hsm-default-key-label>}\"",
			"$0"
		],
		"description": "vault templated 'default_key_label' parameter of configuration 'seal' for seal wrapping mechanism 'pkcs11'"
	},
	"vault configuration 'seal' pkcs11 parameter 'hmac_key_label'": {
		"prefix": ["vault-configuration-seal-pkcs11-parameter-hmac-key-label"],
		"body": [
			"  // pkcs11 hmac_key_label",
			"  // if the key does not exist and generation is enabled, this is the label that will be given to the generated key.",
			"  // may also be specified by the VAULT_HSM_HMAC_KEY_LABEL environment variable.",
			"  hmac_key_label = \"${1:<hsm-hmac-key-label>}\"",
			"$0"
		],
		"description": "vault templated 'hmac_key_label' parameter of configuration 'seal' for seal wrapping mechanism 'pkcs11'"
	},
	"vault configuration 'seal' pkcs11 parameter 'default_hmac_key_label'": {
		"prefix": ["vault-configuration-seal-pkcs11-parameter-default-hmac-key-label"],
		"body": [
			"  // pkcs11 default_hmac_key_label",
			"  // the default value for this field is the hmac_key_label.",
			"  // if hmac_key_label is rotated and this value is not set, signature verification may fail.",
			"  // may also be specified by the VAULT_HSM_HMAC_DEFAULT_KEY_LABEL environment variable.",
			"  default_hmac_key_label = \"${1:<hsm-default-hmac-key-label>}\"",
			"$0"
		],
		"description": "vault templated 'default_hmac_key_label' parameter of configuration 'seal' for seal wrapping mechanism 'pkcs11'"
	},
	"vault configuration 'seal' pkcs11 parameter 'mechanism'": {
		"prefix": ["vault-configuration-seal-pkcs11-parameter-mechanism"],
		"body": [
			"  // pkcs11 mechanism",
			"  // specified as a decimal or hexadecimal (prefixed by '0x') string.",
			"  // may also be specified by the VAULT_HSM_MECHANISM environment variable.",
			"  // currently supported mechanisms (in order of precedence):",
			"  //    0x1085 - CKM_AES_CBC_PAD (HMAC mechanism required)",
			"  //    0x1082 - CKM_AES_CBC (HMAC mechanism required)",
			"  //    0x1087 - CKM_AES_GCM",
			"  //    0x0009 - CKM_RSA_PKCS_OAEP",
			"  //    0x0001 - CKM_RSA_PKCS",
			"  mechanism = \"${1:<hsm-mechanism>}\"",
			"$0"
		],
		"description": "vault templated 'mechanism' parameter of configuration 'seal' for seal wrapping mechanism 'pkcs11'"
	},
	"vault configuration 'seal' pkcs11 parameter 'hmac_mechanism'": {
		"prefix": ["vault-configuration-seal-pkcs11-parameter-hmac-mechanism"],
		"body": [
			"  // pkcs11 hmac_mechanism",
			"  // specified as a decimal or hexadecimal (prefixed by 0x) string.",
			"  // currently only '0x0251' (corresponding to CKM_SHA256_HMAC from the specification) is supported.",
			"  // may also be specified by the VAULT_HSM_HMAC_MECHANISM environment variable.",
			"  hmac_mechanism = \"${1:<hsm-hmac-mechanism>}\"",
			"$0"
		],
		"description": "vault templated 'hmac_mechanism' parameter of configuration 'seal' for seal wrapping mechanism 'pkcs11'"
	},
	"vault configuration 'seal' pkcs11 parameter 'generate_key'": {
		"prefix": ["vault-configuration-seal-pkcs11-parameter-generate-key"],
		"body": [
			"  // pkcs11 generate_key",
			"  // if no existing key with the label specified by key_label can be found at Vault initialization time, instructs Vault to generate a key.",
			"  // may also be specified by the VAULT_HSM_GENERATE_KEY environment variable.",
			"  generate_key = \"${1:<hsm-generate-key>}\" # (\"true\"|\"false\")",
			"$0"
		],
		"description": "vault templated 'generate_key' parameter of configuration 'seal' for seal wrapping mechanism 'pkcs11'"
	},
	"vault configuration 'seal' pkcs11 parameter 'rsa_encrypt_local'": {
		"prefix": ["vault-configuration-seal-pkcs11-parameter-rsa-encrypt-local"],
		"body": [
			"  // pkcs11 rsa_encrypt_local",
			"  // may also be specified by the VAULT_HSM_RSA_ENCRYPT_LOCAL environment variable.",
			"  rsa_encrypt_local = \"${1:<hsm-rsa-encrypt-local>}\"",
			"$0"
		],
		"description": "vault templated 'rsa_encrypt_local' parameter of configuration 'seal' for seal wrapping mechanism 'pkcs11'"
	},
	"vault configuration 'seal' pkcs11 parameter 'rsa_oaep_hash'": {
		"prefix": ["vault-configuration-seal-pkcs11-parameter-rsa-oaep-hash"],
		"body": [
			"  // pkcs11 rsa_oaep_hash",
			"  // specify the hash algorithm to use for RSA with OAEP padding.",
			"  // valid values are 'sha1', 'sha224', 'sha256', 'sha384', and 'sha512'.",
			"  // may also be specified by the VAULT_HSM_RSA_OAEP_HASH environment variable.",
			"  rsa_oaep_hash = \"${1:<hsm-rsa-oaep-hash>}\"",
			"$0"
		],
		"description": "vault templated 'rsa_oaep_hash' parameter of configuration 'seal' for seal wrapping mechanism 'pkcs11'"
	},
	"vault configuration 'seal' transit - empty": {
		"prefix": ["vault-configuration-seal-transit-empty"],
		"body": [
			"seal \"transit\" {",
			"  $0",
			"}",
			""
		],
		"description": "vault empty 'seal' configuration for seal wrapping mechanism 'transit'"
	},
	"vault configuration 'seal' transit - full": {
		"prefix": ["vault-configuration-seal-transit-full"],
		"body": [
			"seal \"transit\" {",
			"  // transit address",
			"  // may also be specified by the VAULT_ADDR environment variable.",
			"  address = \"${1:<vault-address>}\"",
			"",
			"  // transit token",
			"  // may also be specified by the VAULT_TOKEN environment variable.",
			"  token = \"${2:<vault-token>}\"",
			"",
			"  // transit key_name",
			"  // may also be specified by the VAULT_TRANSIT_SEAL_KEY_NAME environment variable.",
			"  key_name = \"${3:<vault-key-name>}\"",
			"",
			"  // transit mount_path",
			"  // may also be specified by the VAULT_TRANSIT_SEAL_MOUNT_PATH environment variable.",
			"  mount_path = \"${4:<vault-secrets-engine-mount-path>}\"",
			"",
			"  // transit namespace",
			"  // may also be specified by the VAULT_NAMESPACE environment variable.",
			"  namespace = \"${5:<vault-namespace>}\"",
			"",
			"  // transit disable_renewal",
			"  // disables the automatic renewal of the token in case the lifecycle of the token is managed with some other mechanism outside of Vault, such as Vault Agent.",
			"  // may also be specified by the VAULT_TRANSIT_SEAL_DISABLE_RENEWAL environment variable.",
			"  disable_renewal = \"${6:<vault-disable-renewal>}\" # (\"true\"|\"false\")",
			"",
			"  // transit tls_ca_cert",
			"  // may also be specified by the VAULT_CACERT environment variable.",
			"  tls_ca_cert     = \"${7:<path-to-tls-ca-cert>}\"",
			"  // transit tls_client_cert",
			"  // may also be specified by the VAULT_CLIENT_CERT environment variable.",
			"  tls_client_cert = \"${8:<path-to-tls-client-cert>}\"",
			"  // transit tls_client_key",
			"  // may also be specified by the VAULT_CLIENT_KEY environment variable.",
			"  tls_client_key  = \"${9:<path-to-tls-client-key>}\"",
			"  // transit tls_server_name",
			"  // may also be specified by the VAULT_TLS_SERVER_NAME environment variable.",
			"  tls_server_name = \"${10:<vault-tls-server-name>}\"",
			"  // transit tls_skip_verify",
			"  // may also be specified by the VAULT_SKIP_VERIFY environment variable.",
			"  tls_skip_verify = \"${11:<vault-tls-skip-verify>}\" # (\"true\"|\"false\")",
			"}",
			"$0"
		],
		"description": "vault full 'seal' configuration for seal wrapping mechanism 'transit'"
	},
	"vault configuration 'seal' transit - common": {
		"prefix": ["vault-configuration-seal-transit-common"],
		"body": [
			"seal \"transit\" {",
			"  // transit address",
			"  // may also be specified by the VAULT_ADDR environment variable.",
			"  address = \"${1:<vault-address>}\"",
			"",
			"  // transit token",
			"  // may also be specified by the VAULT_TOKEN environment variable.",
			"  token = \"${2:<vault-token>}\"",
			"",
			"  // transit key_name",
			"  // may also be specified by the VAULT_TRANSIT_SEAL_KEY_NAME environment variable.",
			"  key_name = \"${3:<vault-key-name>}\"",
			"",
			"  // transit mount_path",
			"  // may also be specified by the VAULT_TRANSIT_SEAL_MOUNT_PATH environment variable.",
			"  mount_path = \"${4:<vault-secrets-engine-mount-path>}\"",
			"",
			"  // transit tls_ca_cert",
			"  // may also be specified by the VAULT_CACERT environment variable.",
			"  tls_ca_cert     = \"${5:<path-to-tls-ca-cert>}\"",
			"  // transit tls_client_cert",
			"  // may also be specified by the VAULT_CLIENT_CERT environment variable.",
			"  tls_client_cert = \"${6:<path-to-tls-client-cert>}\"",
			"  // transit tls_client_key",
			"  // may also be specified by the VAULT_CLIENT_KEY environment variable.",
			"  tls_client_key  = \"${7:<path-to-tls-client-key>}\"",
			"  // transit tls_server_name",
			"  // may also be specified by the VAULT_TLS_SERVER_NAME environment variable.",
			"  tls_server_name = \"${8:<vault-tls-server-name>}\"",
			"  // transit tls_skip_verify",
			"  // may also be specified by the VAULT_SKIP_VERIFY environment variable.",
			"  tls_skip_verify = \"${9:false}\"",
			"}",
			"$0"
		],
		"description": "vault common 'seal' configuration for seal wrapping mechanism 'transit'"
	},
	"vault configuration 'seal' transit parameter 'address'": {
		"prefix": ["vault-configuration-seal-transit-parameter-address"],
		"body": [
			"  // transit address",
			"  // may also be specified by the VAULT_ADDR environment variable.",
			"  address = \"${1:<vault-address>}\"",
			"$0"
		],
		"description": "vault templated 'address' parameter of configuration 'seal' for seal wrapping mechanism 'transit'"
	},
	"vault configuration 'seal' transit parameter 'token'": {
		"prefix": ["vault-configuration-seal-transit-parameter-token"],
		"body": [
			"  // transit token",
			"  // may also be specified by the VAULT_TOKEN environment variable.",
			"  token = \"${1:<vault-token>}\"",
			"$0"
		],
		"description": "vault templated 'token' parameter of configuration 'seal' for seal wrapping mechanism 'transit'"
	},
	"vault configuration 'seal' transit parameter 'key_name'": {
		"prefix": ["vault-configuration-seal-transit-parameter-key-name"],
		"body": [
			"  // transit key_name",
			"  // may also be specified by the VAULT_TRANSIT_SEAL_KEY_NAME environment variable.",
			"  key_name = \"${1:<vault-key-name>}\"",
			"$0"
		],
		"description": "vault templated 'key_name' parameter of configuration 'seal' for seal wrapping mechanism 'transit'"
	},
	"vault configuration 'seal' transit parameter 'mount_path'": {
		"prefix": ["vault-configuration-seal-transit-parameter-mount-path"],
		"body": [
			"  // transit mount_path",
			"  // may also be specified by the VAULT_TRANSIT_SEAL_MOUNT_PATH environment variable.",
			"  mount_path = \"${1:<vault-secrets-engine-mount-path>}\"",
			"$0"
		],
		"description": "vault templated 'mount_path' parameter of configuration 'seal' for seal wrapping mechanism 'transit'"
	},
	"vault configuration 'seal' transit parameter 'namespace'": {
		"prefix": ["vault-configuration-seal-transit-parameter-namespace"],
		"body": [
			"  // transit namespace",
			"  // may also be specified by the VAULT_NAMESPACE environment variable.",
			"  namespace = \"${1:<vault-namespace>}\"",
			"$0"
		],
		"description": "vault templated 'namespace' parameter of configuration 'seal' for seal wrapping mechanism 'transit'"
	},
	"vault configuration 'seal' transit parameter 'disable_renewal'": {
		"prefix": ["vault-configuration-seal-transit-parameter-disable-renewal"],
		"body": [
			"  // transit disable_renewal",
			"  // disables the automatic renewal of the token in case the lifecycle of the token is managed with some other mechanism outside of Vault, such as Vault Agent.",
			"  // may also be specified by the VAULT_TRANSIT_SEAL_DISABLE_RENEWAL environment variable.",
			"  disable_renewal = \"${1:<vault-disable-renewal>}\" # (\"true\"|\"false\")",
			"$0"
		],
		"description": "vault templated 'disable_renewal' parameter of configuration 'seal' for seal wrapping mechanism 'transit'"
	},
	"vault configuration 'seal' transit parameter 'tls_ca_cert'": {
		"prefix": ["vault-configuration-seal-transit-parameter-tls-ca-cert"],
		"body": [
			"  // transit tls_ca_cert",
			"  // may also be specified by the VAULT_CACERT environment variable.",
			"  tls_ca_cert = \"${1:<path-to-tls-ca-cert>}\"",
			"$0"
		],
		"description": "vault templated 'tls_ca_cert' parameter of configuration 'seal' for seal wrapping mechanism 'transit'"
	},
	"vault configuration 'seal' transit parameter 'tls_client_cert'": {
		"prefix": ["vault-configuration-seal-transit-parameter-tls-client-cert"],
		"body": [
			"  // transit tls_client_cert",
			"  // may also be specified by the VAULT_CLIENT_CERT environment variable.",
			"  tls_client_cert = \"${1:<path-to-tls-client-cert>}\"",
			"$0"
		],
		"description": "vault templated 'tls_client_cert' parameter of configuration 'seal' for seal wrapping mechanism 'transit'"
	},
	"vault configuration 'seal' transit parameter 'tls_client_key'": {
		"prefix": ["vault-configuration-seal-transit-parameter-tls-client-key"],
		"body": [
			"  // transit tls_client_key",
			"  // may also be specified by the VAULT_CLIENT_KEY environment variable.",
			"  tls_client_key = \"${1:<path-to-tls-client-key>}\"",
			"$0"
		],
		"description": "vault templated 'tls_client_key' parameter of configuration 'seal' for seal wrapping mechanism 'transit'"
	},
	"vault configuration 'seal' transit parameter 'tls_server_name'": {
		"prefix": ["vault-configuration-seal-transit-parameter-tls-server-name"],
		"body": [
			"  // transit tls_server_name",
			"  // may also be specified by the VAULT_TLS_SERVER_NAME environment variable.",
			"  tls_server_name = \"${1:<vault-tls-server-name>}\"",
			"$0"
		],
		"description": "vault templated 'tls_server_name' parameter of configuration 'seal' for seal wrapping mechanism 'transit'"
	},
	"vault configuration 'seal' transit parameter 'tls_skip_verify'": {
		"prefix": ["vault-configuration-seal-transit-parameter-tls-skip-verify"],
		"body": [
			"  // transit tls_skip_verify",
			"  // may also be specified by the VAULT_SKIP_VERIFY environment variable.",
			"  tls_skip_verify = \"${1:<vault-tls-skip-verify>}\" # (\"true\"|\"false\")",
			"$0"
		],
		"description": "vault templated 'tls_skip_verify' parameter of configuration 'seal' for seal wrapping mechanism 'transit'"
	},
	"vault configuration 'sentinel' - empty": {
		"prefix": ["vault-configuration-sentinel-empty"],
		"body": [
			"sentinel {",
			"  // a valid Vault Enterprise license is required for use of Sentinel policies.",
			"  $0",
			"}",
			""
		],
		"description": "vault empty 'sentinel' configuration"
	},
	"vault configuration 'sentinel' - full": {
		"prefix": ["vault-configuration-sentinel-full"],
		"body": [
			"sentinel {",
			"  // sentinel additional_enabled_modules",
			"  // a valid Vault Enterprise license is required for use of Sentinel policies.",
			"  additional_enabled_modules = [\"${1:<module1>}\",\"${2:<module2>}\",\"${3:<moduleN>}\"]",
			"}",
			"$0"
		],
		"description": "vault full 'sentinel' configuration"
	},
	"vault configuration 'sentinel' - common": {
		"prefix": ["vault-configuration-sentinel-common"],
		"body": [
			"sentinel {",
			"  // sentinel additional_enabled_modules",
			"  // a valid Vault Enterprise license is required for use of Sentinel policies.",
			"  additional_enabled_modules = [\"${1:<module1>}\",\"${2:<module2>}\",\"${3:<moduleN>}\"]",
			"}",
			"$0"
		],
		"description": "vault common 'sentinel' configuration"
	},
	"vault configuration 'sentinel' parameter 'additional_enabled_modules'": {
		"prefix": ["vault-configuration-sentinel-parameter-additional-enabled-modules"],
		"body": [
			"  // sentinel additional_enabled_modules",
			"  // a valid Vault Enterprise license is required for use of Sentinel policies.",
			"  additional_enabled_modules = [\"${1:<module1>}\",\"${2:<module2>}\",\"${3:<moduleN>}\"]",
			"$0"
		],
		"description": "vault templated 'additional_enabled_modules' parameter of configuration 'sentinel'"
	},
	"vault configuration 'service_registration' consul - empty": {
		"prefix": ["vault-configuration-service-registration-consul-empty"],
		"body": [
			"service_registration \"consul\" {",
			"  $0",
			"}",
			""
		],
		"description": "vault empty 'service_registration' configuration for registrar 'consul'"
	},
	"vault configuration 'service_registration' consul - full": {
		"prefix": ["vault-configuration-service-registration-consul-full"],
		"body": [
			"service_registration \"consul\" {",
			"  // consul address",
			"  address = \"${1:<consul-agent-address>}\"",
			"",
			"  // consul check_timeout",
			"  // specifies the check interval used to send health check information back to Consul.",
			"  check_timeout = \"${2:<check-timeout>}\"",
			"",
			"  // consul disable_registration",
			"  disable_registration = ${3|true,false|}",
			"",
			"  // consul scheme",
			"  scheme = \"${4:<scheme>}\" # (http|https)",
			"",
			"  // consul service",
			"  // specifies the name of the service to register in Consul.",
			"  service         = \"${5:<service>}\"",
			"  // consul service_tags",
			"  // specifies a comma-separated list of tags to attach to the service registration in Consul.",
			"  service_tags    = \"${6:<service-tags>}\"",
			"  // consul service_address",
			"  // specifies a service-specific address to set on the service registration in Consul.",
			"  // if unset, Vault will use what it knows to be the HA redirect address - which is usually desirable.",
			"  // setting this parameter to \"\" will tell Consul to leverage the configuration of the node the service is registered on dynamically.",
			"  // this could be beneficial if you intend to leverage Consul's translate_wan_addrs parameter.",
			"  service_address = \"${7:<service-address>}\"",
			"",
			"  // consul token",
			"  // specifies the Consul ACL token with permission to register the Vault service into Consul's service catalog.",
			"  // this is _not_ a Vault token.",
			"  token = \"${8:<consul-token>}\"",
			"",
			"  // consul tls_ca_file",
			"  tls_ca_file     = \"${9:<path-to-ca-file>}\"",
			"  // consul tls_cert_file",
			"  tls_cert_file   = \"${10:<path-to-cert-file>}\"",
			"  // consul tls_key_file",
			"  tls_key_file    = \"${11:<path-to-key-file>}\"",
			"  // consul tls_min_version",
			"  tls_min_version = \"${12:<consul-tls-min-version>}\"",
			"  // consul tls_skip_verify",
			"  tls_skip_verify = \"${13|true,false|}",
			"}",
			"$0"
		],
		"description": "vault full 'service_registration' configuration for registrar 'consul'"
	},
	"vault configuration 'service_registration' consul - common": {
		"prefix": ["vault-configuration-service-registration-consul-common"],
		"body": [
			"service_registration \"consul\" {",
			"  // consul address",
			"  address = \"${1:<consul-agent-address>}\"",
			"",
			"  // consul service",
			"  // specifies the name of the service to register in Consul.",
			"  service = \"${2:<service>}\"",
			"",
			"  // consul token",
			"  // specifies the Consul ACL token with permission to register the Vault service into Consul's service catalog.",
			"  // this is _not_ a Vault token.",
			"  token = \"${3:<consul-token>}\"",
			"",
			"  // consul tls_ca_file",
			"  tls_ca_file     = \"${4:<path-to-ca-file>}\"",
			"  // consul tls_cert_file",
			"  tls_cert_file   = \"${5:<path-to-cert-file>}\"",
			"  // consul tls_key_file",
			"  tls_key_file    = \"${6:<path-to-key-file>}\"",
			"  // consul tls_skip_verify",
			"  tls_skip_verify = \"${7:false}\"",
			"}",
			"$0"
		],
		"description": "vault common 'service_registration' configuration for registrar 'consul'"
	},
	"vault configuration 'service_registration' consul parameter 'address'": {
		"prefix": ["vault-configuration-service-registration-consul-parameter-address"],
		"body": [
			"  // consul address",
			"  address = \"${1:<consul-agent-address>}\"",
			"$0"
		],
		"description": "vault templated 'address' parameter of configuration 'service_registration' for registrar 'consul'"
	},
	"vault configuration 'service_registration' consul parameter 'check_timeout'": {
		"prefix": ["vault-configuration-service-registration-consul-parameter-check-timeout"],
		"body": [
			"  // consul check_timeout",
			"  // specifies the check interval used to send health check information back to Consul.",
			"  check_timeout = \"${1:<check-timeout>}\"",
			"$0"
		],
		"description": "vault templated 'check_timeout' parameter of configuration 'service_registration' for registrar 'consul'"
	},
	"vault configuration 'service_registration' consul parameter 'disable_registration'": {
		"prefix": ["vault-configuration-service-registration-consul-parameter-disable-registration"],
		"body": [
			"  // consul disable_registration",
			"  disable_registration = ${1|true,false|}",
			"$0"
		],
		"description": "vault templated 'disable_registration' parameter of configuration 'service_registration' for registrar 'consul'"
	},
	"vault configuration 'service_registration' consul parameter 'scheme'": {
		"prefix": ["vault-configuration-service-registration-consul-parameter-scheme"],
		"body": [
			"  // consul scheme",
			"  scheme = \"${1:<scheme>}\" # (http|https)",
			"$0"
		],
		"description": "vault templated 'scheme' parameter of configuration 'service_registration' for registrar 'consul'"
	},
	"vault configuration 'service_registration' consul parameter 'service'": {
		"prefix": ["vault-configuration-service-registration-consul-parameter-service"],
		"body": [
			"  // consul service",
			"  // specifies the name of the service to register in Consul.",
			"  service = \"${1:<service>}\"",
			"$0"
		],
		"description": "vault templated 'service' parameter of configuration 'service_registration' for registrar 'consul'"
	},
	"vault configuration 'service_registration' consul parameter 'service_tags'": {
		"prefix": ["vault-configuration-service-registration-consul-parameter-service-tags"],
		"body": [
			"  // consul service_tags",
			"  // specifies a comma-separated list of tags to attach to the service registration in Consul.",
			"  service_tags = \"${1:<service-tags>}\"",
			"$0"
		],
		"description": "vault templated 'service_tags' parameter of configuration 'service_registration' for registrar 'consul'"
	},
	"vault configuration 'service_registration' consul parameter 'service_address'": {
		"prefix": ["vault-configuration-service-registration-consul-parameter-service-address"],
		"body": [
			"  // consul service_address",
			"  // specifies a service-specific address to set on the service registration in Consul.",
			"  // if unset, Vault will use what it knows to be the HA redirect address - which is usually desirable.",
			"  // setting this parameter to \"\" will tell Consul to leverage the configuration of the node the service is registered on dynamically.",
			"  // this could be beneficial if you intend to leverage Consul's translate_wan_addrs parameter.",
			"  service_address = \"${1:<service-address>}\"",
			"$0"
		],
		"description": "vault templated 'service_address' parameter of configuration 'service_registration' for registrar 'consul'"
	},
	"vault configuration 'service_registration' consul parameter 'token'": {
		"prefix": ["vault-configuration-service-registration-consul-parameter-token"],
		"body": [
			"  // consul token",
			"  // specifies the Consul ACL token with permission to register the Vault service into Consul's service catalog.",
			"  // this is _not_ a Vault token.",
			"  token = \"${1:<consul-token>}\"",
			"$0"
		],
		"description": "vault templated 'token' parameter of configuration 'service_registration' for registrar 'consul'"
	},
	"vault configuration 'service_registration' consul parameter 'tls_ca_file'": {
		"prefix": ["vault-configuration-service-registration-consul-parameter-tls-ca-file"],
		"body": [
			"  // consul tls_ca_file",
			"  tls_ca_file = \"${1:<path-to-ca-file>}\"",
			"$0"
		],
		"description": "vault templated 'tls_ca_file' parameter of configuration 'service_registration' for registrar 'consul'"
	},
	"vault configuration 'service_registration' consul parameter 'tls_cert_file'": {
		"prefix": ["vault-configuration-service-registration-consul-parameter-tls-cert-file"],
		"body": [
			"  // consul tls_cert_file",
			"  tls_cert_file = \"${1:<path-to-cert-file>}\"",
			"$0"
		],
		"description": "vault templated 'tls_cert_file' parameter of configuration 'service_registration' for registrar 'consul'"
	},
	"vault configuration 'service_registration' consul parameter 'tls_key_file'": {
		"prefix": ["vault-configuration-service-registration-consul-parameter-tls-key-file"],
		"body": [
			"  // consul tls_key_file",
			"  tls_key_file = \"${1:<path-to-key-file>}\"",
			"$0"
		],
		"description": "vault templated 'tls_key_file' parameter of configuration 'service_registration' for registrar 'consul'"
	},
	"vault configuration 'service_registration' consul parameter 'tls_min_version'": {
		"prefix": ["vault-configuration-service-registration-consul-parameter-tls-min-version"],
		"body": [
			"  // consul tls_min_version",
			"  tls_min_version = \"${1:<consul-tls-min-version>}\"",
			"$0"
		],
		"description": "vault templated 'tls_min_version' parameter of configuration 'service_registration' for registrar 'consul'"
	},
	"vault configuration 'service_registration' consul parameter 'tls_skip_verify'": {
		"prefix": ["vault-configuration-service-registration-consul-parameter-tls-skip-verify"],
		"body": [
			"  // consul tls_skip_verify",
			"  tls_skip_verify = \"${1|true,false|}",
			"$0"
		],
		"description": "vault templated 'tls_skip_verify' parameter of configuration 'service_registration' for registrar 'consul'"
	},
	"vault configuration 'service_registration' kubernetes - empty": {
		"prefix": ["vault-configuration-service-registration-k8s-empty","vault-configuration-service-registration-kubernetes-empty"],
		"body": [
			"service_registration \"kubernetes\" {",
			"  $0",
			"}",
			""
		],
		"description": "vault empty 'service_registration' configuration for registrar 'kubernetes'"
	},
	"vault configuration 'service_registration' kubernetes - full": {
		"prefix": ["vault-configuration-service-registration-k8s-full","vault-configuration-service-registration-kubernetes-full"],
		"body": [
			"service_registration \"kubernetes\" {",
			"  // kubernetes tls_skip_verify",
			"  namespace = \"${1:<k8s-namespace>}\"",
			"  // kubernetes pod_name",
			"  pod_name  = \"${2:<pod-name>}\"",
			"}",
			"$0"
		],
		"description": "vault full 'service_registration' configuration for registrar 'kubernetes'"
	},
	"vault configuration 'service_registration' kubernetes - common": {
		"prefix": ["vault-configuration-service-registration-k8s-common","vault-configuration-service-registration-kubernetes-common"],
		"body": [
			"service_registration \"kubernetes\" {",
			"  // kubernetes tls_skip_verify",
			"  namespace = \"${1:<k8s-namespace>}\"",
			"  // kubernetes pod_name",
			"  pod_name  = \"${2:<pod-name>}\"",
			"}",
			"$0"
		],
		"description": "vault common 'service_registration' configuration for registrar 'kubernetes'"
	},
	"vault configuration 'service_registration' kubernetes parameter 'namespace'": {
		"prefix": ["vault-configuration-service-registration-k8s-parameter-namespace","vault-configuration-service-registration-kubernetes-parameter-namespace"],
		"body": [
			"  // kubernetes tls_skip_verify",
			"  namespace = \"${1:<k8s-namespace>}\"",
			"$0"
		],
		"description": "vault templated 'namespace' parameter of configuration 'service_registration' for registrar 'kubernetes'"
	},
	"vault configuration 'service_registration' kubernetes parameter 'pod_name'": {
		"prefix": ["vault-configuration-service-registration-k8s-parameter-pod-name","vault-configuration-service-registration-kubernetes-parameter-pod-name"],
		"body": [
			"  // kubernetes pod_name",
			"  pod_name = \"${1:<pod-name>}\"",
			"$0"
		],
		"description": "vault templated 'pod_name' parameter of configuration 'service_registration' for registrar 'kubernetes'"
	},
	"vault configuration 'storage' consul - empty": {
		"prefix": ["vault-configuration-storage-consul-empty"],
		"body": [
			"storage \"consul\" {",
			"  $0",
			"}",
			""
		],
		"description": "vault empty 'storage' configuration for storage backend 'consul'"
	},
	"vault configuration 'storage' consul - full": {
		"prefix": ["vault-configuration-storage-consul-full"],
		"body": [
			"storage \"consul\" {",
			"  // consul agent address",
			"  // specifies the address of the Consul agent to communicate with.",
			"  // this can be an IP address, DNS record, or unix socket.",
			"  // it is recommended that you communicate with a local Consul agent; do not communicate directly with a server.",
			"  address = \"${1:<consul-address>}\"",
			"",
			"  // consul check_timeout",
			"  // specifies the check interval used to send health check information back to Consul.",
			"  check_timeout = \"${2:<consul-check-timeout>}\"",
			"",
			"  // consul consistency_mode",
			"  // possible values are 'default' or 'strong'.",
			"  consistency_mode = \"${3:<consul-consistency-mode>}\"",
			"",
			"  // consul disable_registration",
			"  // specifies whether Vault should register itself with Consul.",
			"  disable_registration = \"${4:<consul-disable-registration>}\" # (\"true\"|\"false\")",
			"",
			"  // consul max_parallel",
			"  // specifies the maximum number of concurrent requests to Consul.",
			"  // make sure that your Consul agents are configured to support this level of parallelism, see 'http_max_conns_per_client'.",
			"  max_parallel = \"${5:<consul-max-parallel>}\"",
			"",
			"  // consul path",
			"  // default: \"vault/\"",
			"  path = \"${6:<path-in-consul-key-value-store>}\"",
			"",
			"  // consul scheme",
			"  scheme = \"${7:<consul-scheme>}\") # (\"http\"|\"https\")",
			"",
			"  // consul vault service",
			"  // default: \"vault\"",
			"  service         = \"${8:<consul-vault-service>}\"",
			"  // consul vault service tags",
			"  service_tags    = \"${9:<consul-vault-service-tags>}\"",
			"  // consul vault service address",
			"  // specifies a service-specific address to set on the service registration in Consul.",
			"  // if unset, Vault will use what it knows to be the HA redirect address - which is usually desirable.",
			"  // setting this parameter to \"\" will tell Consul to leverage the configuration of the node the service is registered on dynamically.",
			"  // this could be beneficial if you intend to leverage Consul's translate_wan_addrs parameter.",
			"  service_address = \"${10:<consul-vault-service-address>}\"",
			"",
			"  // consul acl token",
			"  // may also be specified by the CONSUL_HTTP_TOKEN environment variable.",
			"  token = \"${11:<consul-acl-token>}\"",
			"",
			"  // consul session_ttl",
			"  // may also be specified by the CONSUL_HTTP_TOKEN environment variable.",
			"  session_ttl = \"${12:<consul-session-ttl>}\"",
			"",
			"  // consul lock_wait_time",
			"  lock_wait_time = \"${13:<consul-lock-wait-time>}\"",
			"",
			"  // consul tls_ca_file",
			"  tls_ca_file     = \"${14:<path-to-ca-file>}\"",
			"  // consul tls_cert_file",
			"  tls_cert_file   = \"${15:<path-to-cert-file>}\"",
			"  // consul tls_key_file",
			"  tls_key_file    = \"${16:<path-to-key-file>}\"",
			"  // consul tls_min_version",
			"  // accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'.",
			"  tls_min_version = \"${17:<consul-tls-min-version>}\"",
			"  // consul tls_skip_verify",
			"  tls_skip_verify = \"${18:false}\"",
			"}",
			"$0"
		],
		"description": "vault full 'storage' configuration for storage backend 'consul'"
	},
	"vault configuration 'storage' consul - common": {
		"prefix": ["vault-configuration-storage-consul-common"],
		"body": [
			"storage \"consul\" {",
			"  // consul agent address",
			"  // specifies the address of the Consul agent to communicate with.",
			"  // this can be an IP address, DNS record, or unix socket.",
			"  // it is recommended that you communicate with a local Consul agent; do not communicate directly with a server.",
			"  address = \"${1:<consul-address>}\"",
			"",
			"  // consul path",
			"  // default: \"vault/\"",
			"  path = \"${2:<path-in-consul-key-value-store>}\"",
			"",
			"  // consul acl token",
			"  // may also be specified by the CONSUL_HTTP_TOKEN environment variable.",
			"  token = \"${3:<consul-acl-token>}\"",
			"",
			"  // consul tls_ca_file",
			"  tls_ca_file     = \"${4:<path-to-ca-file>}\"",
			"  // consul tls_cert_file",
			"  tls_cert_file   = \"${5:<path-to-cert-file>}\"",
			"  // consul tls_key_file",
			"  tls_key_file    = \"${6:<path-to-key-file>}\"",
			"  // consul tls_min_version",
			"  // accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'.",
			"  tls_min_version = \"${7:<consul-tls-min-version>}\"",
			"  // consul tls_skip_verify",
			"  tls_skip_verify = \"${8:false}\"",
			"}",
			"$0"
		],
		"description": "vault common 'storage' configuration for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'address'": {
		"prefix": ["vault-configuration-storage-consul-parameter-address"],
		"body": [
			"  // consul agent address",
			"  // specifies the address of the Consul agent to communicate with.",
			"  // this can be an IP address, DNS record, or unix socket.",
			"  // it is recommended that you communicate with a local Consul agent; do not communicate directly with a server.",
			"  address = \"${1:<consul-address>}\"",
			"$0"
		],
		"description": "vault templated 'address' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'check_timeout'": {
		"prefix": ["vault-configuration-storage-consul-parameter-check-timeout"],
		"body": [
			"  // consul check_timeout",
			"  // specifies the check interval used to send health check information back to Consul.",
			"  check_timeout = \"${1:<consul-check-timeout>}\"",
			"$0"
		],
		"description": "vault templated 'check_timeout' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'consistency_mode'": {
		"prefix": ["vault-configuration-storage-consul-parameter-consistency-mode"],
		"body": [
			"  // consul consistency_mode",
			"  // possible values are 'default' or 'strong'.",
			"  consistency_mode = \"${1:<consul-consistency-mode>}\"",
			"$0"
		],
		"description": "vault templated 'consistency_mode' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'disable_registration'": {
		"prefix": ["vault-configuration-storage-consul-parameter-disable-registration"],
		"body": [
			"  // consul disable_registration",
			"  // specifies whether Vault should register itself with Consul.",
			"  disable_registration = \"${1:<consul-disable-registration>}\" # (\"true\"|\"false\")",
			"$0"
		],
		"description": "vault templated 'disable_registration' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'max_parallel'": {
		"prefix": ["vault-configuration-storage-consul-parameter-max-parallel"],
		"body": [
			"  // consul max_parallel",
			"  // specifies the maximum number of concurrent requests to Consul.",
			"  // make sure that your Consul agents are configured to support this level of parallelism, see 'http_max_conns_per_client'.",
			"  max_parallel = \"${1:<consul-max-parallel>}\"",
			"$0"
		],
		"description": "vault templated 'max_parallel' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'path'": {
		"prefix": ["vault-configuration-storage-consul-parameter-path"],
		"body": [
			"  // consul path",
			"  // default: \"vault/\"",
			"  path = \"${1:<path-in-consul-key-value-store>}\"",
			"$0"
		],
		"description": "vault templated 'path' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'scheme'": {
		"prefix": ["vault-configuration-storage-consul-parameter-scheme"],
		"body": [
			"  // consul scheme",
			"  scheme = \"${1:<consul-scheme>}\") # (\"http\"|\"https\")",
			"$0"
		],
		"description": "vault templated 'scheme' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'service'": {
		"prefix": ["vault-configuration-storage-consul-parameter-service"],
		"body": [
			"  // consul vault service",
			"  // default: \"vault\"",
			"  service = \"${1:<consul-vault-service>}\"",
			"$0"
		],
		"description": "vault templated 'scheme' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'service_tags'": {
		"prefix": ["vault-configuration-storage-consul-parameter-service-tags"],
		"body": [
			"  // consul vault service tags",
			"  service_tags = \"${1:<consul-vault-service-tags>}\"",
			"$0"
		],
		"description": "vault templated 'service_tags' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'service_address'": {
		"prefix": ["vault-configuration-storage-consul-parameter-service-address"],
		"body": [
			"  // consul vault service address",
			"  // specifies a service-specific address to set on the service registration in Consul.",
			"  // if unset, Vault will use what it knows to be the HA redirect address - which is usually desirable.",
			"  // setting this parameter to \"\" will tell Consul to leverage the configuration of the node the service is registered on dynamically.",
			"  // this could be beneficial if you intend to leverage Consul's translate_wan_addrs parameter.",
			"  service_address = \"${1:<consul-vault-service-address>}\"",
			"$0"
		],
		"description": "vault templated 'service_address' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'token'": {
		"prefix": ["vault-configuration-storage-consul-parameter-token"],
		"body": [
			"  // consul acl token",
			"  // may also be specified by the CONSUL_HTTP_TOKEN environment variable.",
			"  token = \"${1:<consul-acl-token>}\"",
			"$0"
		],
		"description": "vault templated 'token' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'session_ttl'": {
		"prefix": ["vault-configuration-storage-consul-parameter-session-ttl"],
		"body": [
			"  // consul session_ttl",
			"  // may also be specified by the CONSUL_HTTP_TOKEN environment variable.",
			"  session_ttl = \"${1:<consul-session-ttl>}\"",
			"$0"
		],
		"description": "vault templated 'session_ttl' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'lock_wait_time'": {
		"prefix": ["vault-configuration-storage-consul-parameter-lock-wait-time"],
		"body": [
			"  // consul lock_wait_time",
			"  lock_wait_time = \"${1:<consul-lock-wait-time>}\"",
			"$0"
		],
		"description": "vault templated 'lock_wait_time' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'tls_ca_file'": {
		"prefix": ["vault-configuration-storage-consul-parameter-tls-ca-file"],
		"body": [
			"  // consul tls_ca_file",
			"  tls_ca_file = \"${1:<path-to-ca-file>}\"",
			"$0"
		],
		"description": "vault templated 'tls_ca_file' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'tls_cert_file'": {
		"prefix": ["vault-configuration-storage-consul-parameter-tls-cert-file"],
		"body": [
			"  // consul tls_cert_file",
			"  tls_cert_file = \"${1:<path-to-cert-file>}\"",
			"$0"
		],
		"description": "vault templated 'tls_cert_file' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'tls_key_file'": {
		"prefix": ["vault-configuration-storage-consul-parameter-tls-key-file"],
		"body": [
			"  // consul tls_key_file",
			"  tls_key_file = \"${1:<path-to-key-file>}\"",
			"$0"
		],
		"description": "vault templated 'tls_key_file' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'tls_min_version'": {
		"prefix": ["vault-configuration-storage-consul-parameter-tls-min-version"],
		"body": [
			"  // consul tls_min_version",
			"  // accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'.",
			"  tls_min_version = \"${1:<consul-tls-min-version>}\"",
			"$0"
		],
		"description": "vault templated 'tls_min_version' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' consul parameter 'tls_skip_verify'": {
		"prefix": ["vault-configuration-storage-consul-parameter-tls-skip-verify"],
		"body": [
			"  // consul tls_skip_verify",
			"  tls_skip_verify = \"${1:<consul-tls-skip-verify>}\"",
			"$0"
		],
		"description": "vault templated 'tls_skip_verify' parameter of configuration 'storage' for storage backend 'consul'"
	},
	"vault configuration 'storage' file - empty": {
		"prefix": ["vault-configuration-storage-file-empty"],
		"body": [
			"storage \"file\" {",
			"  $0",
			"}",
			""
		],
		"description": "vault empty 'storage' configuration for storage backend 'file'"
	},
	"vault configuration 'storage' file - full": {
		"prefix": ["vault-configuration-storage-file-full"],
		"body": [
			"storage \"file\" {",
			"  // file data path",
			"  path = \"${1:<path-to-vault-data>}\"",
			"}",
			"$0"
		],
		"description": "vault full 'storage' configuration for storage backend 'file'"
	},
	"vault configuration 'storage' file - common": {
		"prefix": ["vault-configuration-storage-file-common"],
		"body": [
			"storage \"file\" {",
			"  // file data path",
			"  path = \"${1:<path-to-vault-data>}\"",
			"}",
			"$0"
		],
		"description": "vault common 'storage' configuration for storage backend 'file'"
	},
	"vault configuration 'storage' file parameter 'path'": {
		"prefix": ["vault-configuration-storage-file-parameter-path"],
		"body": [
			"  // file data path",
			"  path = \"${1:<path-to-vault-data>}\"",
			"$0"
		],
		"description": "vault templated 'path' parameter of configuration 'storage' for storage backend 'file'"
	},
	"vault configuration 'storage' raft - empty": {
		"prefix": ["vault-configuration-storage-raft-empty","vault-configuration-storage-integrated-empty"],
		"body": [
			"storage \"raft\" {",
			"  // note:",
			"  //   when using the Integrated Storage backend,",
			"  //   it is required to provide 'cluster_addr' to indicate the address and port",
			"  //   to be used for communication between the nodes in the Raft cluster.",
			"  // ",
			"  // note:",
			"  //   when using the Integrated Storage backend, a separate ha_storage backend cannot be declared.",
			"  //",
			"  // note:",
			"  //   when using the Integrated Storage backend, it is strongly recommended to set disable_mlock to true,",
			"  //   and to disable memory swapping on the system.",
			"  $0",
			"}",
			""
		],
		"description": "vault empty 'storage' configuration for storage backend 'raft'"
	},
	"vault configuration 'storage' raft - full": {
		"prefix": ["vault-configuration-storage-raft-full","vault-configuration-storage-integrated-full"],
		"body": [
			"storage \"raft\" {",
			"  // note:",
			"  //   when using the Integrated Storage backend,",
			"  //   it is required to provide 'cluster_addr' to indicate the address and port",
			"  //   to be used for communication between the nodes in the Raft cluster.",
			"  // ",
			"  // note:",
			"  //   when using the Integrated Storage backend, a separate ha_storage backend cannot be declared.",
			"  //",
			"  // note:",
			"  //   when using the Integrated Storage backend, it is strongly recommended to set disable_mlock to true,",
			"  //   and to disable memory swapping on the system.",
			"",
			"  // raft data path",
			"  // this value can be overridden by setting the VAULT_RAFT_PATH environment variable.",
			"  path = \"${1:<path-to-vault-data>}\"",
			"",
			"  // raft node_id",
			"  // this value can be overridden by setting the VAULT_RAFT_NODE_ID environment variable.",
			"  node_id = \"${2:<raft-node-id>}\"",
			"",
			"  // raft performance_multiplier",
			"  // an integer multiplier used by servers to scale key Raft timing parameters.",
			"  // tuning this affects the time it takes Vault to detect leader failures and to perform leader elections,",
			"  // at the expense of requiring more network and CPU resources for better performance.",
			"  // omitting this value or setting it to 0 uses default timing described below.",
			"  // lower values are used to tighten timing and increase sensitivity while higher values relax timings and reduce sensitivity.",
			"  // ",
			"  // by default, Vault will use a lower-performance timing that's suitable for minimal Vault servers,",
			"  // currently equivalent to setting this to a value of 5.",
			"  // setting this to a value of 1 will configure Raft to its highest-performance mode and is recommended for production Vault servers.",
			"  // the maximum allowed value is 10.",
			"  performance_multiplier = ${3:<raft-performance-multiplier>}",
			"",
			"  // raft trailing_logs",
			"  // this controls how many log entries are left in the log store on disk after a snapshot is made.",
			"  trailing_logs = ${4:<raft-performance-multiplier>}",
			"",
			"  // raft snapshot_threshold",
			"  // this controls the minimum number of raft commit entries between snapshots that are saved to disk.",
			"  snapshot_threshold = ${5:<raft-snapshot-threshold>}",
			"",
			"  // raft retry_join",
			"  // there can be one or more retry_join stanzas.",
			"  // when the raft cluster is getting bootstrapped, if the connection details of all the nodes are known beforehand,",
			"  // then specifying this config stanzas enables the nodes to automatically join a raft cluster.",
			"  // all the nodes would mention all other nodes that they could join using this config.",
			"  // when one of the nodes is initialized, it becomes the leader and all the other nodes will join the leader node to form the cluster.",
			"  // when using Shamir seal, the joined nodes will still need to be unsealed manually.",
			"  retry_join {",
			"    leader_api_addr         = ${5:<raft-leader-api-addr>}",
			"    leader_tls_servername   = ${6:<raft-leader-tls-servername>}",
			"    leader_ca_cert_file     = ${7:<raft-leader-ca-cert-file>}",
			"    leader_client_cert_file = ${8:<raft-leader-client-cert-file>}",
			"    leader_client_key_file  = ${9:<raft-leader-client-key-file>}",
			"    leader_ca_cert          = ${10:<raft-leader-ca-cert>}",
			"    leader_client_cert      = ${11:<raft-leader-client-cert>}",
			"    leader_client_key       = ${12:<raft-leader-client-key>}",
			"    ",
			"    auto_join        = ${13:<raft-cloud-auto-join-configuration>} # see https://github.com/hashicorp/go-discover",
			"    auto_join_scheme = ${14:<raft-cloud-auto-join-scheme>}        # optional uri protocol; (\"http\"|\"https\")",
			"    auto_join_port   = ${15:<raft-cloud-auto-join-port>}          # optional port used for addressed discovered via auto-join",
			"  }",
			"}",
			"$0"
		],
		"description": "vault full 'storage' configuration for storage backend 'raft'"
	},
	"vault configuration 'storage' raft - common": {
		"prefix": ["vault-configuration-storage-raft-common","vault-configuration-storage-integrated-common"],
		"body": [
			"storage \"raft\" {",
			"  // note:",
			"  //   when using the Integrated Storage backend,",
			"  //   it is required to provide 'cluster_addr' to indicate the address and port",
			"  //   to be used for communication between the nodes in the Raft cluster.",
			"  // ",
			"  // note:",
			"  //   when using the Integrated Storage backend, a separate ha_storage backend cannot be declared.",
			"  //",
			"  // note:",
			"  //   when using the Integrated Storage backend, it is strongly recommended to set disable_mlock to true,",
			"  //   and to disable memory swapping on the system.",
			"",
			"  // raft data path",
			"  // this value can be overridden by setting the VAULT_RAFT_PATH environment variable.",
			"  path = \"${1:<path-to-vault-data>}\"",
			"",
			"  // raft node_id",
			"  // this value can be overridden by setting the VAULT_RAFT_NODE_ID environment variable.",
			"  node_id = \"${2:<raft-node-id>}\"",
			"",
			"  // raft performance_multiplier",
			"  // an integer multiplier used by servers to scale key Raft timing parameters.",
			"  // tuning this affects the time it takes Vault to detect leader failures and to perform leader elections,",
			"  // at the expense of requiring more network and CPU resources for better performance.",
			"  // omitting this value or setting it to 0 uses default timing described below.",
			"  // lower values are used to tighten timing and increase sensitivity while higher values relax timings and reduce sensitivity.",
			"  // ",
			"  // by default, Vault will use a lower-performance timing that's suitable for minimal Vault servers,",
			"  // currently equivalent to setting this to a value of 5.",
			"  // setting this to a value of 1 will configure Raft to its highest-performance mode and is recommended for production Vault servers.",
			"  // the maximum allowed value is 10.",
			"  performance_multiplier = ${3:1}",
			"",
			"  // raft retry_join",
			"  // there can be one or more retry_join stanzas.",
			"  // when the raft cluster is getting bootstrapped, if the connection details of all the nodes are known beforehand,",
			"  // then specifying this config stanzas enables the nodes to automatically join a raft cluster.",
			"  // all the nodes would mention all other nodes that they could join using this config.",
			"  // when one of the nodes is initialized, it becomes the leader and all the other nodes will join the leader node to form the cluster.",
			"  // when using Shamir seal, the joined nodes will still need to be unsealed manually.",
			"  retry_join {",
			"    leader_api_addr         = ${4:<raft-leader-api-addr>}",
			"    leader_tls_servername   = ${5:<raft-leader-tls-servername>}",
			"    leader_ca_cert_file     = ${6:<raft-leader-ca-cert-file>}",
			"    leader_client_cert_file = ${7:<raft-leader-client-cert-file>}",
			"    leader_client_key_file  = ${8:<raft-leader-client-key-file>}",
			"    leader_ca_cert          = ${9:<raft-leader-ca-cert>}",
			"    leader_client_cert      = ${10:<raft-leader-client-cert>}",
			"    leader_client_key       = ${11:<raft-leader-client-key>}",
			"    ",
			"    auto_join        = ${12:<raft-cloud-auto-join-configuration>} # see https://github.com/hashicorp/go-discover",
			"    auto_join_scheme = ${13:<raft-cloud-auto-join-scheme>}        # optional uri protocol; (\"http\"|\"https\")",
			"    auto_join_port   = ${13:<raft-cloud-auto-join-port>}          # optional port used for addressed discovered via auto-join",
			"  }",
			"}",
			"$0"
		],
		"description": "vault common 'storage' configuration for storage backend 'raft'"
	},
	"vault configuration 'storage' raft parameter 'path'": {
		"prefix": ["vault-configuration-storage-raft-parameter-path","vault-configuration-storage-integrated-parameter-path"],
		"body": [
			"  // raft data path",
			"  // this value can be overridden by setting the VAULT_RAFT_PATH environment variable.",
			"  path = \"${1:<path-to-vault-data>}\"",
			"$0"
		],
		"description": "vault templated 'path' parameter of configuration 'storage' for storage backend 'raft'"
	},
	"vault configuration 'storage' raft parameter 'node_id'": {
		"prefix": ["vault-configuration-storage-raft-parameter-node-id"],
		"body": [
			"  // raft node_id",
			"  // this value can be overridden by setting the VAULT_RAFT_NODE_ID environment variable.",
			"  node_id = \"${1:<raft-node-id>}\"",
			"$0"
		],
		"description": "vault templated 'node_id' parameter of configuration 'storage' for storage backend 'raft'"
	},
	"vault configuration 'storage' raft parameter 'performance_multiplier'": {
		"prefix": ["vault-configuration-storage-raft-parameter-performance-multiplier","vault-configuration-storage-integrated-parameter-performance-multiplier"],
		"body": [
			"  // raft performance_multiplier",
			"  // an integer multiplier used by servers to scale key Raft timing parameters.",
			"  // tuning this affects the time it takes Vault to detect leader failures and to perform leader elections,",
			"  // at the expense of requiring more network and CPU resources for better performance.",
			"  // omitting this value or setting it to 0 uses default timing described below.",
			"  // lower values are used to tighten timing and increase sensitivity while higher values relax timings and reduce sensitivity.",
			"  // ",
			"  // by default, Vault will use a lower-performance timing that's suitable for minimal Vault servers,",
			"  // currently equivalent to setting this to a value of 5.",
			"  // setting this to a value of 1 will configure Raft to its highest-performance mode and is recommended for production Vault servers.",
			"  // the maximum allowed value is 10.",
			"  performance_multiplier = ${1:<raft-performance-multiplier>}",
			"$0"
		],
		"description": "vault templated 'performance_multiplier' parameter of configuration 'storage' for storage backend 'raft'"
	},
	"vault configuration 'storage' raft parameter 'trailing_logs'": {
		"prefix": ["vault-configuration-storage-raft-parameter-trailing-logs","vault-configuration-storage-integrated-parameter-trailing-logs"],
		"body": [
			"  // raft trailing_logs",
			"  // this controls how many log entries are left in the log store on disk after a snapshot is made.",
			"  trailing_logs = ${1:<raft-performance-multiplier>}",
			"$0"
		],
		"description": "vault templated 'trailing_logs' parameter of configuration 'storage' for storage backend 'raft'"
	},
	"vault configuration 'storage' raft parameter 'snapshot_threshold'": {
		"prefix": ["vault-configuration-storage-raft-parameter-snapshot-threshold","vault-configuration-storage-integrated-parameter-snapshot-threshold"],
		"body": [
			"  // raft snapshot_threshold",
			"  // this controls the minimum number of raft commit entries between snapshots that are saved to disk.",
			"  snapshot_threshold = ${1:<raft-snapshot-threshold>}",
			"$0"
		],
		"description": "vault templated 'snapshot_threshold' parameter of configuration 'storage' for storage backend 'raft'"
	},
	"vault configuration 'storage' raft parameter 'retry_join'": {
		"prefix": ["vault-configuration-storage-raft-parameter-retry-join","vault-configuration-storage-integrated-parameter-retry-join"],
		"body": [
			"  // raft retry_join",
			"  // there can be one or more retry_join stanzas.",
			"  // when the raft cluster is getting bootstrapped, if the connection details of all the nodes are known beforehand,",
			"  // then specifying this config stanzas enables the nodes to automatically join a raft cluster.",
			"  // all the nodes would mention all other nodes that they could join using this config.",
			"  // when one of the nodes is initialized, it becomes the leader and all the other nodes will join the leader node to form the cluster.",
			"  // when using Shamir seal, the joined nodes will still need to be unsealed manually.",
			"  retry_join {",
			"    leader_api_addr         = ${1:<raft-leader-api-addr>}",
			"    leader_tls_servername   = ${2:<raft-leader-tls-servername>}",
			"    leader_ca_cert_file     = ${3:<raft-leader-ca-cert-file>}",
			"    leader_client_cert_file = ${4:<raft-leader-client-cert-file>}",
			"    leader_client_key_file  = ${5:<raft-leader-client-key-file>}",
			"    leader_ca_cert          = ${6:<raft-leader-ca-cert>}",
			"    leader_client_cert      = ${7:<raft-leader-client-cert>}",
			"    leader_client_key       = ${8:<raft-leader-client-key>}",
			"    ",
			"    auto_join        = ${9:<raft-cloud-auto-join-configuration>} # see https://github.com/hashicorp/go-discover",
			"    auto_join_scheme = ${10:<raft-cloud-auto-join-scheme>}        # optional uri protocol; (\"http\"|\"https\")",
			"    auto_join_port   = ${11:<raft-cloud-auto-join-port>}          # optional port used for addressed discovered via auto-join",
			"  }",
			"$0"
		],
		"description": "vault templated 'retry_join' parameter of configuration 'storage' for storage backend 'raft'"
	},
	"vault configuration 'telemetry' - empty": {
		"prefix": ["vault-configuration-telemetry-empty"],
		"body": [
			"telemetry {",
			"  $0",
			"}",
			""
		],
		"description": "vault empty 'telemetry' configuration"
	},
	"vault configuration 'telemetry' - full": {
		"prefix": ["vault-configuration-telemetry-full"],
		"body": [
			"telemetry {",
			"  // telemetry usage_gauge_period",
			"  usage_gauge_period        = \"${1:<usage-gauge-period>}\"",
			"  // telemetry maximum_gauge_cardinality",
			"  maximum_gauge_cardinality = ${2:<maximum-gauge-cardinality>}",
			"",
			"  // telemetry disable_hostname",
			"  disable_hostname      = ${3|true,false|}",
			"  // telemetry enable_hostname_label",
			"  enable_hostname_label = ${4|true,false|}",
			"",
			"  // telemetry lease_metrics_epsilon",
			"  lease_metrics_epsilon              = \"${5:<lease-metrics-epsilon>}\"",
			"  // telemetry num_lease_metrics_buckets",
			"  num_lease_metrics_buckets          = ${6:<num-lease-metrics-buckets>}",
			"  // telemetry add_lease_metrics_namespace_labels",
			"  add_lease_metrics_namespace_labels = ${7|true,false|}",
			"",
			"  // telemetry filter_default",
			"  filter_default = ${8|true,false|}",
			"  // telemetry prefix_filter",
			"  prefix_filter  = [\"${9:+<prefix-filter1>}\",\"${10:-<prefix-filter1>}\",\"${11:+<prefix-filterN>}\"]",
			"",
			"  // telemetry statsite_address",
			"  statsite_address = \"${12:<statsite-address>}\"",
			"",
			"  // telemetry statsd_address",
			"  statsd_address = \"${13:<statsd-address>}\"",
			"",
			"  // telemetry dogstatsd_addr",
			"  dogstatsd_addr = \"${14:<dogstatsd-address>}\"",
			"  // telemetry dogstatsd_tags",
			"  dogstatsd_tags = [\"${15:<dogstatsd-tag-name1:dogstatsd-tag-value1>}\",\"${16:<dogstatsd-tag-name2:dogstatsd-tag-value2>}\",\"${17:<dogstatsd-tag-nameN:dogstatsd-tag-valueN>}\"]",
			"",
			"  // telemetry prometheus_retention_time",
			"  prometheus_retention_time = \"${18:<prometheus-retention-time>}\"",
			"",
			"  // telemetry stackdriver_project_id",
			"  stackdriver_project_id = \"${19:<stackdriver-project-id>}\"",
			"  // telemetry stackdriver_location",
			"  stackdriver_location   = \"${20:<stackdriver-location>}\"",
			"  // telemetry stackdriver_namespace",
			"  stackdriver_namespace  = \"${21:<stackdriver-namespace>}\"",
			"  // telemetry stackdriver_debug_logs",
			"  stackdriver_debug_logs = ${22|true,false|}",
			"}",
			"$0"
		],
		"description": "vault full 'telemetry' configuration"
	},
	"vault configuration 'telemetry' - common": {
		"prefix": ["vault-configuration-telemetry-common"],
		"body": [
			"telemetry {",
			"}",
			"$0"
		],
		"description": "vault common 'telemetry' configuration"
	},
	"vault configuration 'telemetry' parameter 'usage_gauge_period'": {
		"prefix": ["vault-configuration-telemetry-parameter-usage-gauge-period"],
		"body": [
			"  // telemetry usage_gauge_period",
			"  usage_gauge_period = \"${1:<usage-gauge-period>}\"",
			"$0"
		],
		"description": "vault templated 'usage_gauge_period' parameter of configuration 'telemetry'"
	},
	"vault configuration 'telemetry' parameter 'maximum_gauge_cardinality'": {
		"prefix": ["vault-configuration-telemetry-parameter-maximum-gauge-cardinality"],
		"body": [
			"  // telemetry maximum_gauge_cardinality",
			"  maximum_gauge_cardinality = ${1:<maximum-gauge-cardinality>}",
			"$0"
		],
		"description": "vault templated 'maximum_gauge_cardinality' parameter of configuration 'telemetry'"
	},
	"vault configuration 'telemetry' parameter 'disable_hostname'": {
		"prefix": ["vault-configuration-telemetry-parameter-disable-hostname"],
		"body": [
			"  // telemetry disable_hostname",
			"  disable_hostname = ${1|true,false|}",
			"$0"
		],
		"description": "vault templated 'disable_hostname' parameter of configuration 'telemetry'"
	},
	"vault configuration 'telemetry' parameter 'enable_hostname_label'": {
		"prefix": ["vault-configuration-telemetry-parameter-enable-hostname-label"],
		"body": [
			"  // telemetry enable_hostname_label",
			"  enable_hostname_label = ${1|true,false|}",
			"$0"
		],
		"description": "vault templated 'enable_hostname_label' parameter of configuration 'telemetry'"
	},
	"vault configuration 'telemetry' parameter 'lease_metrics_epsilon'": {
		"prefix": ["vault-configuration-telemetry-parameter-lease-metrics-epsilon"],
		"body": [
			"  // telemetry lease_metrics_epsilon",
			"  lease_metrics_epsilon = \"${1:<lease-metrics-epsilon>}\"",
			"$0"
		],
		"description": "vault templated 'lease_metrics_epsilon' parameter of configuration 'telemetry'"
	},
	"vault configuration 'telemetry' parameter 'num_lease_metrics_buckets'": {
		"prefix": ["vault-configuration-telemetry-parameter-num-lease-metrics-buckets"],
		"body": [
			"  // telemetry num_lease_metrics_buckets",
			"  num_lease_metrics_buckets = ${1:<num-lease-metrics-buckets>}",
			"$0"
		],
		"description": "vault templated 'num_lease_metrics_buckets' parameter of configuration 'telemetry'"
	},
	"vault configuration 'telemetry' parameter 'add_lease_metrics_namespace_labels'": {
		"prefix": ["vault-configuration-telemetry-parameter-add-lease-metrics-namespace-labels"],
		"body": [
			"  // telemetry add_lease_metrics_namespace_labels",
			"  add_lease_metrics_namespace_labels = ${1|true,false|}",
			"$0"
		],
		"description": "vault templated 'add_lease_metrics_namespace_labels' parameter of configuration 'telemetry'"
	},
	"vault configuration 'telemetry' parameter 'filter_default'": {
		"prefix": ["vault-configuration-telemetry-parameter-filter-default"],
		"body": [
			"  // telemetry filter_default",
			"  filter_default = ${1|true,false|}",
			"$0"
		],
		"description": "vault templated 'filter_default' parameter of configuration 'telemetry'"
	},
	"vault configuration 'telemetry' parameter 'prefix_filter'": {
		"prefix": ["vault-configuration-telemetry-parameter-prefix-filter"],
		"body": [
			"  // telemetry prefix_filter",
			"  prefix_filter = [\"${1:+<prefix-filter1>}\",\"${2:-<prefix-filter1>}\",\"${3:+<prefix-filterN>}\"]",
			"$0"
		],
		"description": "vault templated 'prefix_filter' parameter of configuration 'telemetry'"
	},
	"vault configuration 'telemetry' parameter 'statsite_address'": {
		"prefix": ["vault-configuration-telemetry-parameter-statsite-address"],
		"body": [
			"  // telemetry statsite_address",
			"  statsite_address = \"${1:<statsite-address>}\"",
			"$0"
		],
		"description": "vault templated 'statsite_address' parameter of configuration 'telemetry'"
	},
	"vault configuration 'telemetry' parameter 'statsd_address'": {
		"prefix": ["vault-configuration-telemetry-parameter-statsd-address"],
		"body": [
			"  // telemetry statsd_address",
			"  statsd_address = \"${1:<statsd-address>}\"",
			"$0"
		],
		"description": "vault templated 'statsd_address' parameter of configuration 'telemetry'"
	},
	"vault configuration 'telemetry' parameter 'dogstatsd_addr'": {
		"prefix": ["vault-configuration-telemetry-parameter-dogstatsd-addr"],
		"body": [
			"  // telemetry dogstatsd_addr",
			"  dogstatsd_addr = \"${1:<dogstatsd-address>}\"",
			"$0"
		],
		"description": "vault templated 'dogstatsd_addr' parameter of configuration 'telemetry'"
	},
	"vault configuration 'telemetry' parameter 'dogstatsd_tags'": {
		"prefix": ["vault-configuration-telemetry-parameter-dogstatsd-tags"],
		"body": [
			"  // telemetry dogstatsd_tags",
			"  dogstatsd_tags = [\"${1:<dogstatsd-tag-name1:dogstatsd-tag-value1>}\",\"${2:<dogstatsd-tag-name2:dogstatsd-tag-value2>}\",\"${3:<dogstatsd-tag-nameN:dogstatsd-tag-valueN>}\"]",
			"$0"
		],
		"description": "vault templated 'dogstatsd_tags' parameter of configuration 'telemetry'"
	},
	"vault configuration 'telemetry' parameter 'prometheus_retention_time'": {
		"prefix": ["vault-configuration-telemetry-parameter-prometheus-retention-time"],
		"body": [
			"  // telemetry prometheus_retention_time",
			"  prometheus_retention_time = \"${1:<prometheus-retention-time>}\"",
			"$0"
		],
		"description": "vault templated 'prometheus_retention_time' parameter of configuration 'telemetry'"
	},
	"vault configuration 'telemetry' parameter 'stackdriver_project_id'": {
		"prefix": ["vault-configuration-telemetry-parameter-stackdriver-project-id"],
		"body": [
			"  // telemetry stackdriver_project_id",
			"  stackdriver_project_id = \"${1:<stackdriver-project-id>}\"",
			"$0"
		],
		"description": "vault templated 'stackdriver_project_id' parameter of configuration 'telemetry'"
	},
	"vault configuration 'telemetry' parameter 'stackdriver_location'": {
		"prefix": ["vault-configuration-telemetry-parameter-stackdriver-location"],
		"body": [
			"  // telemetry stackdriver_location",
			"  stackdriver_location = \"${1:<stackdriver-location>}\"",
			"$0"
		],
		"description": "vault templated 'stackdriver_location' parameter of configuration 'telemetry'"
	},
	"vault configuration 'telemetry' parameter 'stackdriver_namespace'": {
		"prefix": ["vault-configuration-telemetry-parameter-stackdriver-namespace"],
		"body": [
			"  // telemetry stackdriver_namespace",
			"  stackdriver_namespace = \"${1:<stackdriver-namespace>}\"",
			"$0"
		],
		"description": "vault templated 'stackdriver_namespace' parameter of configuration 'telemetry'"
	},
	"vault configuration 'telemetry' parameter 'stackdriver_debug_logs'": {
		"prefix": ["vault-configuration-telemetry-parameter-stackdriver-debug-logs"],
		"body": [
			"  // telemetry stackdriver_debug_logs",
			"  stackdriver_debug_logs = ${1|true,false|}",
			"$0"
		],
		"description": "vault templated 'stackdriver_debug_logs' parameter of configuration 'telemetry'"
	},
	"vault configuration 'ui'": {
		"prefix": ["vault-configuration-ui"],
		"body": [
			"ui = ${1|true,false|}",
			"$0"
		],
		"description": "vault templated 'ui' configuration"
	},
	"vault policy - empty": {
		"prefix": ["vault-policy-empty"],
		"body": [
			"path \"${1:path}\" {",
			"  $0",
			"}",
			""
		],
		"description": "vault empty policy"
	},
	"vault policy - admin": {
		"prefix": ["vault-policy-admin"],
		"body": [
			"// admin is a type of user empowered with managing a Vault infrastructure for a team or organizations.",
			"// empowered with sudo, the administrator is focused on configuring",
			"// and maintaining the health of Vault cluster(s) as well as providing bespoke support to Vault users.",
			"",
			"// admin must be able to:",
			"//   - enable and manage auth methods broadly across Vault",
			"//   - enable and manage the key/value secret engine at secret/ path",
			"//   - create and manage ACL policies broadly across Vault",
			"//   - read system health check",
			"",
			"// manage auth methods broadly across Vault",
			"path \"auth/*\" {",
			"  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]",
			"}",
			"",
			"// create, update, and delete auth methods",
			"path \"sys/auth/*\" {",
			"  capabilities = [\"create\", \"update\", \"delete\", \"sudo\"]",
			"}",
			"",
			"// list auth methods",
			"path \"sys/auth\" {",
			"  capabilities = [\"read\"]",
			"}",
			"",
			"// list existing policies",
			"path \"sys/policies/acl\" {",
			"  capabilities = [\"list\"]",
			"}",
			"",
			"// create and manage ACL policies",
			"path \"sys/policies/acl/*\" {",
			"  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]",
			"}",
			"",
			"// list, create, update, and delete key/value secrets",
			"path \"secret/*\" {",
			"  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]",
			"}",
			"",
			"// manage secret engines",
			"path \"sys/mounts/*\" {",
			"  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]",
			"}",
			"",
			"// list existing secret engines.",
			"path \"sys/mounts\" {",
			"  capabilities = [\"read\"]",
			"}",
			"",
			"// Read health checks",
			"path \"sys/health\" {",
			"  capabilities = [\"read\", \"sudo\"]",
			"}",
			"$0"
		],
		"description": "vault admin policy"
	},
	"vault policy - another-root": {
		"prefix": ["vault-policy-another-root"],
		"body": [
			"// manage auth methods broadly across Vault",
			"path \"auth/*\" {",
			"  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]",
			"}",
			"",
			"// create, update, and delete auth methods",
			"path \"sys/auth/*\" {",
			"  capabilities = [\"create\", \"update\", \"delete\", \"sudo\"]",
			"}",
			"",
			"// list auth methods",
			"path \"sys/auth\" {",
			"  capabilities = [\"read\"]",
			"}",
			"",
			"// create and manage ACL policies",
			"path \"sys/policies/acl/*\" {",
			"  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]",
			"}",
			"",
			"// to list policies - Step 3",
			"path \"sys/policies/acl\" {",
			"  capabilities = [\"list\"]",
			"}",
			"",
			"// List, create, update, and delete key/value secrets",
			"path \"secret/*\" {",
			"  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]",
			"}",
			"",
			"// create and manage secret engines broadly across Vault.",
			"path \"sys/mounts/*\" {",
			"  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]",
			"}",
			"",
			"// read health checks",
			"path \"sys/health\" {",
			"  capabilities = [\"read\", \"sudo\"]",
			"}",
			"",
			"// check capabilities of a token",
			"path \"sys/capabilities\" {",
			"  capabilities = [\"create\", \"update\"]",
			"}",
			"",
			"// check capabilities of a token",
			"path \"sys/capabilities-self\" {",
			"  capabilities = [\"create\", \"update\"]",
			"}",
			"$0"
		],
		"description": "vault another-root policy"
	},
	"vault policy - audit": {
		"prefix": ["vault-policy-audit"],
		"body": [
			"// 'sudo' capability is required to manage audit devices",
			"path \"sys/audit/*\" {",
			"  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]",
			"}",
			"",
			"// to list enabled audit devices, 'sudo' capability is required",
			"path \"sys/audit\" {",
			"  capabilities = [\"read\", \"sudo\"]",
			"}",
			"$0"
		],
		"description": "vault audit policy"
	},
	"vault policy - metrics": {
		"prefix": ["vault-policy-metrics"],
		"body": [
			"// to retrieve the usage metrics",
			"path \"sys/internal/counters/activity\" {",
			"  capabilities = [\"read\"]",
			"}",
			"",
			"// to read and update the usage metrics configuration",
			"path \"sys/internal/counters/config\" {",
			"  capabilities = [\"read\", \"update\"]",
			"}",
			"",
			"//----------------------",
			"// Vault Enterprise only",
			"//----------------------",
			"",
			"// to view existing namespaces if any",
			"path \"sys/namespaces\" {",
			"  capabilities = [\"list\", \"read\", \"update\"]",
			"}",
			"",
			"// ui to show the namespace selector",
			"path \"sys/internal/ui/namespaces\" {",
			"  capabilities = [\"read\", \"list\", \"update\", \"sudo\"]",
			"}",
			"",
			"// ui to list existing mounts",
			"path \"sys/internal/ui/mounts\" {",
			"  capabilities = [\"read\", \"sudo\"]",
			"}",
			"",
			"// to read and update the usage metrics configuration for any namespace",
			"path \"+/sys/internal/counters/config\" {",
			"  capabilities = [\"read\", \"update\"]",
			"}",
			"",
			"// to retrieve the usage metrics for any namespace",
			"path \"+/sys/internal/counters/activity\" {",
			"  capabilities = [\"read\"]",
			"}",
			"$0"
		],
		"description": "vault metrics policy"
	},
	"vault policy - provisioner": {
		"prefix": ["vault-policy-provisioner"],
		"body": [
			"// provisioner is a type of user or service that will be used by an automated tool (e.g. Terraform) to provision",
			"// and configure a namespace within a Vault secret engine for a new Vault user to access and write secrets.",
			"",
			"// provisioner must be able to:",
			"//   - enable and manage auth methods",
			"//   - enable and manage the key/value secret engine at secret/ path",
			"//   - create and manage ACL policies",
			"",
			"// manage auth methods broadly across Vault",
			"path \"auth/*\" {",
			"  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]",
			"}",
			"",
			"// create, update, and delete auth methods",
			"path \"sys/auth/*\" {",
			"  capabilities = [\"create\", \"update\", \"delete\", \"sudo\"]",
			"}",
			"",
			"// list auth methods",
			"path \"sys/auth\" {",
			"  capabilities = [\"read\"]",
			"}",
			"",
			"// list existing policies",
			"path \"sys/policies/acl\" {",
			"  capabilities = [\"list\"]",
			"}",
			"",
			"// create and manage ACL policies via api & ui",
			"path \"sys/policies/acl/*\" {",
			"  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]",
			"}",
			"",
			"// list, create, update, and delete key/value secrets",
			"path \"secret/*\" {",
			"  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]",
			"}",
			"$0"
		],
		"description": "vault provisioner policy"
	},
	"vault policy path 'create' capability": {
		"prefix": ["vault-policy-path-capability-create"],
		"body": [
			"  // create",
			"  // (POST/PUT)",
			"  // allows creating data at the given path.",
			"  // very few parts of Vault distinguish between create and update, so most operations require both create and update capabilities.",
			"  // parts of Vault that provide such a distinction are noted in documentation.",
			"  capabilities = [\"create\"]",
			"",
			"$0"
		],
		"description": "vault templated 'create' cabability of policy path"
	},
	"vault policy path 'read' capability": {
		"prefix": ["vault-policy-path-capability-read"],
		"body": [
			"  // read",
			"  // (GET)",
			"  // allows reading the data at the given path.",
			"  capabilities = [\"read\"]",
			"",
			"$0"
		],
		"description": "vault templated 'read' cabability of policy path"
	},
	"vault policy path 'update' capability": {
		"prefix": ["vault-policy-path-capability-update"],
		"body": [
			"  // update",
			"  // (POST/PUT)",
			"  // allows changing the data at the given path.",
			"  // in most parts of Vault, this implicitly includes the ability to create the initial value at the path.",
			"  capabilities = [\"update\"]",
			"",
			"$0"
		],
		"description": "vault templated 'update' cabability of policy path"
	},
	"vault policy path 'delete' capability": {
		"prefix": ["vault-policy-path-capability-delete"],
		"body": [
			"  // delete",
			"  // (DELETE)",
			"  // allows deleting the data at the given path.",
			"  capabilities = [\"delete\"]",
			"",
			"$0"
		],
		"description": "vault templated 'delete' cabability of policy path"
	},
	"vault policy path 'list' capability": {
		"prefix": ["vault-policy-path-capability-list"],
		"body": [
			"  // list",
			"  // (LIST)",
			"  // allows listing values at the given path.",
			"  // note that the keys returned by a list operation are not filtered by policies.",
			"  // do not encode sensitive information in key names. Not all backends support listing.",
			"  capabilities = [\"list\"]",
			"",
			"$0"
		],
		"description": "vault templated 'list' cabability of policy path"
	},
	"vault policy path 'sudo' capability": {
		"prefix": ["vault-policy-path-capability-sudo"],
		"body": [
			"  // sudo",
			"  // allows access to paths that are root-protected.",
			"  // tokens are not permitted to interact with these paths unless they have the sudo capability",
			"  // for example, modifying the audit log backends requires a token with sudo privileges.",
			"  capabilities = [\"sudo\"]",
			"",
			"$0"
		],
		"description": "vault templated 'sudo' cabability of policy path"
	},
	"vault policy path 'deny' capability": {
		"prefix": ["vault-policy-path-capability-deny"],
		"body": [
			"  // deny",
			"  // disallows access.",
			"  // this always takes precedence regardless of any other defined capabilities, including sudo.",
			"  capabilities = [\"sudo\"]",
			"",
			"$0"
		],
		"description": "vault templated 'deny' cabability of policy path"
	},
	"vault policy path 'identity' parameter 'identity.entity.id'": {
		"prefix": ["vault-policy-path-identity-parameter-identity-entity-id"],
		"body": [
			"// variable replacement 'identity.entity.id'",
			"// the entity's id",
			"path \"${1:<path-to-secret-data>}/{{identity.entity.id\\}\\}/*\" {",
			"$0",
			"}",
			""
		],
		"description": "vault templated 'identity.entity.id' parameter of policy path"
	},
	"vault policy path 'identity' parameter 'identity.entity.name'": {
		"prefix": ["vault-policy-path-identity-parameter-identity-entity-name"],
		"body": [
			"// variable replacement 'identity.entity.name'",
			"// the entity's name",
			"path \"${1:<path-to-secret-data>}/{{identity.entity.name\\}\\}/*\" {",
			"$0",
			"}",
			""
		],
		"description": "vault templated 'identity.entity.name' parameter of policy path"
	},
	"vault policy path 'identity' parameter 'identity.entity.metadata.<metadata key>'": {
		"prefix": ["vault-policy-path-identity-parameter-identity-entity-metadata"],
		"body": [
			"// variable replacement 'identity.entity.metadata.<metadata key>'",
			"// metadata associated with the entity for the given key",
			"path \"${1:<path-to-secret-data>}/{{identity.entity.metadata.${2:<metadata key>}\\}\\}/*\" {",
			"$0",
			"}",
			""
		],
		"description": "vault templated 'identity.entity.metadata.<metadata key>' parameter of policy path"
	},
	"vault policy path 'identity' parameter 'identity.entity.aliases.<mount accessor>.id'": {
		"prefix": ["vault-policy-path-identity-parameter-identity-entity-aliases-mount-accessor-id"],
		"body": [
			"// variable replacement 'identity.entity.aliases.<mount accessor>.id'",
			"// entity alias id for the given mount",
			"path \"${1:<path-to-secret-data>}/{{identity.entity.aliases.${2:<mount accessor>}.id\\}\\}/*\" {",
			"$0",
			"}",
			""
		],
		"description": "vault templated 'identity.entity.aliases.<mount accessor>.id' parameter of policy path"
	},
	"vault policy path 'identity' parameter 'identity.entity.aliases.<mount accessor>.name'": {
		"prefix": ["vault-policy-path-identity-parameter-identity-entity-aliases-mount-accessor-name"],
		"body": [
			"// variable replacement 'identity.entity.aliases.<mount accessor>.name'",
			"// entity alias name for the given mount",
			"path \"${1:<path-to-secret-data>}/{{identity.entity.aliases.${2:<mount accessor>}.name\\}\\}/*\" {",
			"$0",
			"}",
			""
		],
		"description": "vault templated 'identity.entity.aliases.<mount accessor>.name' parameter of policy path"
	},
	"vault policy path 'identity' parameter 'identity.entity.aliases.<mount accessor>.metadata.<metadata key>'": {
		"prefix": ["vault-policy-path-identity-parameter-identity-entity-aliases-mount-accessor-metadata-metadata-key"],
		"body": [
			"// variable replacement 'identity.entity.aliases.<mount accessor>.metadata.<metadata key>'",
			"// metadata associated with the alias for the given mount and metadata key",
			"path \"${1:<path-to-secret-data>}/{{identity.entity.aliases.${2:<mount accessor>}.metadata.${3:<metadata key>}\\}\\}/*\" {",
			"$0",
			"}",
			""
		],
		"description": "vault templated 'identity.entity.aliases.<mount accessor>.metadata.<metadata key>' parameter of policy path"
	},
	"vault policy path 'identity' parameter 'identity.groups.ids.<group id>.name'": {
		"prefix": ["vault-policy-path-identity-parameter-identity-groups-ids-group-id-name"],
		"body": [
			"// variable replacement 'identity.groups.ids.<group id>.name'",
			"// the group name for the given group id",
			"path \"${1:<path-to-secret-data>}/{{identity.groups.ids.${2:<group id>}.name\\}\\}/*\" {",
			"$0",
			"}",
			""
		],
		"description": "vault templated 'identity.groups.ids.<group id>.name' parameter of policy path"
	},
	"vault policy path 'identity' parameter 'identity.groups.ids.<group id>.metadata.<metadata key>'": {
		"prefix": ["vault-policy-path-identity-parameter-identity-groups-ids-group-id-metadata-metadata-key"],
		"body": [
			"// variable replacement 'identity.groups.ids.<group id>.metadata.<metadata key>'",
			"// metadata associated with the group for the given key",
			"path \"${1:<path-to-secret-data>}/{{identity.groups.ids.${2:<group id>}.metadata.${3:<metadata key>}\\}\\}/*\" {",
			"$0",
			"}",
			""
		],
		"description": "vault templated 'identity.groups.ids.<group id>.metadata.<metadata key>' parameter of policy path"
	},
	"vault policy path 'identity' parameter 'identity.groups.names.<group name>.id'": {
		"prefix": ["vault-policy-path-identity-parameter-identity-groups-names-group-name-id"],
		"body": [
			"// variable replacement 'identity.groups.names.<group name>.id'",
			"// the group id for the given group name",
			"path \"${1:<path-to-secret-data>}/{{identity.groups.names.${2:<group name>}.id\\}\\}/*\" {",
			"$0",
			"}",
			""
		],
		"description": "vault templated 'identity.groups.names.<group name>.id' parameter of policy path"
	},
	"vault policy path 'identity' parameter 'identity.groups.names.<group name>.metadata.<metadata key>'": {
		"prefix": ["vault-policy-path-identity-parameter-identity-groups-names-group-name-metadata-metadata-key"],
		"body": [
			"// variable replacement 'identity.groups.names.<group name>.metadata.<metadata key>'",
			"// metadata associated with the group for the given key",
			"path \"${1:<path-to-secret-data>}/{{identity.groups.names.${2:<group name>}.metadata.${3:<metadata key>}\\}\\}/*\" {",
			"$0",
			"}",
			""
		],
		"description": "vault templated 'identity.groups.names.<group name>.metadata.<metadata key>' parameter of policy path"
	},
	"vault policy path 'required_parameters' constraint": {
		"prefix": ["vault-policy-path-constraint-required-parameters"],
		"body": [
			"  // list of parameters that must be specified.",
			"  required_parameters = [\"${1:<parameter1}\",\"${2:<parameter2}\",\"${3:<parameterN}\"]",
			"",
			"$0"
		],
		"description": "vault templated 'required_parameters' constraint of policy path"
	},
	"vault policy path 'allowed_parameters' constraint": {
		"prefix": ["vault-policy-path-constraint-allowed-parameters"],
		"body": [
			"  // list of keys and values that are permitted on the given path.",
			"  allowed_parameters = {",
			"    \"${1:<parameter-any-value-allowed>}\" = []",
			"    \"${2:<parameter-with-defined-values-allowed>}\" = [\"${3:<value1>}\",\"${4:<value2>}\",\"${5:<valueN>}\"]",
			"    // any other parameters may be created with any value.",
			"    \"*\" = []",
			"  }",
			"$0"
		],
		"description": "vault templated 'allowed_parameters' constraint of policy path"
	},
	"vault policy path 'denied_parameters' constraint": {
		"prefix": ["vault-policy-path-constraint-denied-parameters"],
		"body": [
			"  // blacklists a list of parameter and values.",
			"  // any values specified here take precedence over allowed_parameters",
			"  denied_parameters = {",
			"    // any parameters not named '<this>'",
			"    \"${1:<this>}\" = []",
			"    // can contain any other parameters, but '<this>' cannot contain the values '<that>', '<these>' or '<those>'",
			"    \"${2:<this>}\" = [\"${3:<that>}\",\"${4:<these>}\",\"${5:<those>}\"]",
			"    // deny any parameter.",
			"    \"*\" = []",
			"  }",
			"$0"
		],
		"description": "vault templated 'denied_parameters' constraint of policy path"
	},
	"vault policy path 'min_wrapping_ttl' response wrapping parameter": {
		"prefix": ["vault-policy-path-repsonse-wrapping-parameter-min-wrapping-ttl"],
		"body": [
			"  // the minimum allowed ttl that clients can specify for a wrapped response.",
			"  // in practice, setting a minimum ttl of one second effectively makes response wrapping mandatory for a particular path.",
			"  // it can also be used to ensure that the ttl is not too low, leading to end targets being unable to unwrap before the token expires.",
			"  min_wrapping_ttl = \"${1:<minimum-wrapping-ttl>}\"",
			"$0"
		],
		"description": "vault templated 'min_wrapping_ttl' response wrapping parameter of policy path"
	},
	"vault policy path 'max_wrapping_ttl' response wrapping parameter": {
		"prefix": ["vault-policy-path-repsonse-wrapping-parameter-max-wrapping-ttl"],
		"body": [
			"  // the maximum allowed ttl that clients can specify for a wrapped response.",
			"  max_wrapping_ttl = \"${1:<maximum-wrapping-ttl>}\"",
			"$0"
		],
		"description": "vault templated 'max_wrapping_ttl' response wrapping parameter of policy path"
	},
	"vault password policy - empty": {
		"prefix": ["vault-password-policy-empty"],
		"body": [
			"// length",
			"// specifies how long the generated password will be.",
			"// must be >= 4",
			"length = ${1:<length>}",
			"rule \"${2:<rule-type>}\" {",
			"  $0",
			"}",
			""
		],
		"description": "vault empty password policy"
	},
	"vault password policy - full": {
		"prefix": ["vault-password-policy-full"],
		"body": [
			"// length",
			"// specifies how long the generated password will be.",
			"// must be >= 4",
			"length = ${1:<length>}",
			"rule \"${2:<rule-type>}\" {",
			"  // charset",
			"  // a string representation of the character set that this rule observes.",
			"  // accepts utf-8 compatible strings.",
			"  // all characters within the string must be printable.",
			"  // please note that the JSON output returned may be escaped for the special and control characters such as <,>,& etc as per the JSON specification.",
			"  charset = \"${3:<charset>}\"",
			"",
			"  // min-chars",
			"  // specifies a minimum number of characters required from the charset specified in this rule.",
			"  // for example: if min-chars = 2, the password must have at least 2 characters from charset.",
			"  min-chars = ${4:<minimum-number-of-characters>}",
			"}",
			"$0"
		],
		"description": "vault full password policy"
	},
	"vault password policy - common": {
		"prefix": ["vault-password-policy-common"],
		"body": [
			"// length",
			"// specifies how long the generated password will be.",
			"// must be >= 4",
			"length = ${1:<length>}",
			"rule \"${2:<rule-type>}\" {",
			"  // charset",
			"  // a string representation of the character set that this rule observes.",
			"  // accepts utf-8 compatible strings.",
			"  // all characters within the string must be printable.",
			"  // please note that the JSON output returned may be escaped for the special and control characters such as <,>,& etc as per the JSON specification.",
			"  charset = \"${3:<charset>}\"",
			"}",
			"$0"
		],
		"description": "vault common password policy"
	},
	"vault password policy 'charset' parameter": {
		"prefix": ["vault-password-policy-parameter-charset"],
		"body": [
			"  // charset",
			"  // a string representation of the character set that this rule observes.",
			"  // accepts utf-8 compatible strings.",
			"  // all characters within the string must be printable.",
			"  // please note that the JSON output returned may be escaped for the special and control characters such as <,>,& etc as per the JSON specification.",
			"  charset = \"${1:<charset>}\"",
			"$0"
		],
		"description": "vault templated 'charset' parameter of password policy"
	},
	"vault password policy 'min-chars' parameter": {
		"prefix": ["vault-password-policy-parameter-min-chars"],
		"body": [
			"  // min-chars",
			"  // specifies a minimum number of characters required from the charset specified in this rule.",
			"  // for example: if min-chars = 2, the password must have at least 2 characters from charset.",
			"  min-chars = ${1:<minimum-number-of-characters>}",
			"$0"
		],
		"description": "vault templated 'min-chars' parameter of password policy"
	},
	"vault agent configuration - full": {
		"prefix": ["vault-agent-configuration-full"],
		"body": [
			"// pid_file",
			"pid_file = \"${1:<path-to-pid-file>}\"",
			"",
			"vault {",
			"  // vault server address",
			"  // the address of the Vault server.",
			"  // this should be a complete URL such as https://127.0.0.1:8200.",
			"  // this value can be overridden by setting the VAULT_ADDR environment variable.",
			"  address = \"${2:<vault-server-address>}\"",
			"}",
			"// specifies the method and other options used for auto-auth functionality.",
			"auto_auth {",
			"  // vault agent auto auth method",
			"  method \"${3:<auto-auth-method>}\" {",
			"    // the mount path of the method.",
			"    // if not specified, defaults to a value of auth/<method type>",
			"    mount_path = \"${4:<auto-auth-method-mount-path>}\"",
			"",
			"    // the default namespace path for the mount.",
			"    // if not specified, defaults to the root namespace.",
			"    namespace = \"${5:<auto-auth-method-namespace>}\"",
			"",
			"    // if specified, the written token will be response-wrapped by the agent.",
			"    // this is more secure than wrapping by sinks, but does not allow the agent to keep the token renewed",
			"    // or automatically reauthenticate when it expires.",
			"    // rather than a simple string, the written value will be a JSON-encoded SecretWrapInfo structure.",
			"    // values can be an integer number of seconds or a stringish value like 5m.",
			"    wrap_ttl = \"${6:<auto-auth-method-wrap-ttl>}\"",
			"",
			"    // the maximum time Agent will delay before retrying after a failed auth attempt.",
			"    // the backoff will start at 1 second and double (with some randomness) after successive failures, capped by max_backoff.",
			"    max_backoff = \"${7:<auto-auth-method-max-backoff>}\"",
			"",
			"    config = {${8:<insert-your-method-configuration-here>}}",
			"  }",
			"}",
			"// allows client-side caching of responses containing newly created tokens",
			"// and responses containing leased secrets generated off of these newly created tokens.",
			"// the renewals of the cached tokens and leases are also managed by the agent.",
			"cache {",
			"  // use_auto_auth_token",
			"  // if set, the requests made to agent without a Vault token will be forwarded to the Vault server",
			"  // with the auto-auth token attached.",
			"  // ff the requests already bear a token, this configuration will be overridden",
			"  // and the token in the request will be used to forward the request to the Vault server.",
			"  // if set to 'force' Agent will use the auto-auth token, overwriting the attached Vault token if set.",
			"  use_auto_auth_token = ${9|true,false|}",
			"",
			"  // persistent cache",
			"  persist \"${10:<cache-persist-type>}\" {",
			"    // path",
			"    // the path on disk where the persistent cache file should be created or restored from.",
			"    path = \"${11:<path-to-persistent-cache-file>}\"",
			"",
			"    // keep_after_import",
			"    // when set to true, a restored cache file is not deleted.",
			"    // defaults to false",
			"    keep_after_import = ${12|true,false|}",
			"",
			"    // exit_on_err",
			"    // when set to true, if any errors occur during a persitent cache restore, Vault Agent will exit with an error.",
			"    // defaults to true.",
			"    exit_on_err = ${13|true,false|}",
			"  }",
			"}",
			"// there can be one or more listener blocks at the top level.",
			"// these configuration values are common to both tcp and unix listener blocks.",
			"// blocks of type tcp support the standard tcp listener options.",
			"listener \"${14:<listener-type>}\"{",
			"  // the address for the listener to listen to.",
			"  // this can either be a URL path when using tcp or a file path when using unix.",
			"  // for example, 127.0.0.1:8200 or /path/to/socket.",
			"  // defaults to 127.0.0.1:8200.",
			"  address = \"${15:<listener-address>}\"",
			"",
			"  tls_disable   = ${16|true,false|}",
			"  tls_key_file  = \"${17:<path-to-tls-key-file>}\"",
			"  tls_cert_file = \"${18:<path-to-tls-cert-file>}\"",
			"}",
			"",
			"template {",
			"  // source",
			"  // path on disk to use as the input template.",
			"  // this option is required if not using the contents option.",
			"  source = \"${1:<path-to-input-template>}\"",
			"",
			"  // contents",
			"  // this option allows embedding the contents of a template in the configuration file",
			"  // rather then supplying the source path to the template file.",
			"  // this is useful for short templates.",
			"  // this option is mutually exclusive with the source option.",
			"  contents = \"${2:<embedded-template-content>}\"",
			"",
			"  // destination",
			"  // path on disk where the rendered secrets should be created.",
			"  // if the parent directories do not exist, Vault Agent will attempt to create them, unless 'create_dest_dirs' is false.",
			"  destination = \"${3:<path-for-rendered-secrets>}\"",
			"",
			"  // create_dest_dirs",
			"  // this option tells Vault Agent to create the parent directories of the destination path if they do not exist.",
			"  create_dest_dirs = ${4|true,false|}",
			"",
			"  // command",
			"  // this is the optional command to run when the template is rendered.",
			"  // the command will only run if the resulting template changes.",
			"  // the command must return within 30s (configurable), and it must have a successful exit code.",
			"  // Vault Agent is not a replacement for a process monitor or init system.",
			"  command         = \"${5:<command-to-run-when-rendered>}\"",
			"  // command_timeout",
			"  // this is the maximum amount of time to wait for the optional command to return.",
			"  command_timeout = \"${6:<command-timeout>}\"",
			"",
			"  // error_on_missing_key",
			"  // exit with an error when accessing a struct or map field/key that does notexist.",
			"  // the default behavior will print <no value> when accessing a field that does not exist.",
			"  // it is highly recommended you set this to 'true'.",
			"  error_on_missing_key = ${7|true,false|}",
			"",
			"  // perms",
			"  // this is the permission to render the file.",
			"  // if this option is left unspecified, Vault Agent will attempt to match the permissions of the file",
			"  // that already exists at the destination path. If no file exists at that path, the permissions are 0644.",
			"  perms = \"${8:<perms>}\"",
			"",
			"  // backup",
			"  // this option backs up the previously rendered template at the destination path before writing a new one.",
			"  // tt keeps exactly one backup. This option is useful for preventing accidental changes to the data without having a rollback strategy.",
			"  backup = ${9|true,false|}",
			"",
			"  // left_delimiter",
			"  // delimiter to use in the template. The default is '\\{\\{' but for some templates,",
			"  // it may be easier to use a different delimiter that does not conflict with the output file itself.",
			"  left_delimiter  = \"${10:<left-delimiter>}\"",
			"  // right_delimiter",
			"  // delimiter to use in the template. The default is '}}' but for some templates,",
			"  // it may be easier to use a different delimiter that does not conflict with the output file itself.",
			"  right_delimiter = \"${11:<right-delimiter>}\"",
			"",
			"  // sandbox_path",
			"  // if a sandbox path is provided, any path provided to the file function is checked that it falls within the sandbox path.",
			"  // relative paths that try to traverse outside the sandbox path will exit with an error.",
			"  sandbox_path = \"${12:<path-to-sandbox>}\"",
			"",
			"  // wait",
			"  // this is the minimum(:maximum) to wait before rendering a new template to disk and triggering a command,",
			"  // separated by a colon ( : ).",
			"  wait = \"${13:<minimum(:maximum)-wait-before-rendering-new-template>}\"",
			"}",
			"$0"
		],
		"description": "full vault agent configuration"
	},
	"vault agent configuration - common": {
		"prefix": ["vault-agent-configuration-common"],
		"body": [
			"// pid_file",
			"pid_file = \"${1:<path-to-pid-file>}\"",
			"",
			"// there can be one or more listener blocks at the top level.",
			"// these configuration values are common to both tcp and unix listener blocks.",
			"// blocks of type tcp support the standard tcp listener options.",
			"listener \"${2:<listener-type>}\"{",
			"  // the address for the listener to listen to.",
			"  // this can either be a URL path when using tcp or a file path when using unix.",
			"  // for example, 127.0.0.1:8200 or /path/to/socket.",
			"  // defaults to 127.0.0.1:8200.",
			"  address = \"${3:<listener-address>}\"",
			"",
			"  tls_disable   = ${4|true,false|}",
			"  tls_key_file  = \"${5:<path-to-tls-key-file>}\"",
			"  tls_cert_file = \"${6:<path-to-tls-cert-file>}\"",
			"}",
			"",
			"template {",
			"  // source",
			"  // path on disk to use as the input template.",
			"  // this option is required if not using the contents option.",
			"  source = \"${7:<path-to-input-template>}\"",
			"",
			"  // destination",
			"  // path on disk where the rendered secrets should be created.",
			"  // if the parent directories do not exist, Vault Agent will attempt to create them, unless 'create_dest_dirs' is false.",
			"  destination = \"${8:<path-for-rendered-secrets>}\"",
			"",
			"  // wait",
			"  // this is the minimum(:maximum) to wait before rendering a new template to disk and triggering a command,",
			"  // separated by a colon ( : ).",
			"  wait = \"${9:<minimum(:maximum)-wait-before-rendering-new-template>}\"",
			"}",
			"$0"
		],
		"description": "common vault agent configuration"
	},
	"vault agent configuration 'pid_file'": {
		"prefix": ["vault-agent-configuration-pid-file"],
		"body": [
			"// pid_file",
			"pid_file = \"${1:<path-to-pid-file>}\"",
			"$0"
		],
		"description": "vault agent templated 'pid_file' configuration"
	},
	"vault agent configuration 'vault' - empty": {
		"prefix": ["vault-agent-configuration-vault-empty"],
		"body": [
			"// specifies the remote Vault server the Agent connects to.",
			"vault {",
			"  $0",
			"}",
			""
		],
		"description": "vault agent empty 'vault' configuration"
	},
	"vault agent configuration 'vault' - full": {
		"prefix": ["vault-agent-configuration-vault-full"],
		"body": [
			"// specifies the remote Vault server the Agent connects to.",
			"vault {",
			"  // vault server address",
			"  // the address of the Vault server.",
			"  // this should be a complete URL such as https://127.0.0.1:8200.",
			"  // this value can be overridden by setting the VAULT_ADDR environment variable.",
			"  address = \"${1:<vault-server-address>}\"",
			"",
			"  // vault server ca_cert",
			"  // path on the local disk to a single PEM-encoded CA certificate to verify the Vault server's SSL certificate.",
			"  // this value can be overridden by setting the VAULT_CACERT environment variable.",
			"  ca_cert = \"${2:<path-to-ca-cert-file>}\"",
			"  // vault server ca_path",
			"  // path on the local disk to a directory of PEM-encoded CA certificates to verify the Vault server's SSL certificate.",
			"  // this value can be overridden by setting the VAULT_CAPATH environment variable.",
			"  ca_path = \"${3:<path-to-ca-cert-directory>}\"",
			"",
			"  // vault server client_cert",
			"  // this value can be overridden by setting the VAULT_CLIENT_CERT environment variable.",
			"  client_cert = \"${4:<path-to-client-cert>}\"",
			"  // vault server client_key",
			"  // this value can be overridden by setting the VAULT_CLIENT_KEY environment variable.",
			"  client_key  = \"${5:<path-to-client-key>}\"",
			"",
			"  // vault server tls_skip_verify",
			"  // this value can be overridden by setting the VAULT_SKIP_VERIFY environment variable.",
			"  tls_skip_verify = \"${6:false}\" # (\"true\"|\"false\")",
			"  // vault server tls_server_name",
			"  // name to use as the SNI host when connecting via TLS.",
			"  // this value can be overridden by setting the VAULT_TLS_SERVER_NAME environment variable.",
			"  tls_server_name = \"${7:<tls-server-name>}\"",
			"",
			"  // vault server retry",
			"  // controls how failing Vault requests are handled, whether these requests are issued in order to render templates,",
			"  // or are proxied requests coming from the proxy cache subsystem.",
			"  retry {",
			"    // specify how many times a failing request will be retried.",
			"    // a value of 0 translates to the default, i.e. 12 retries.",
			"    // avalue of -1 disables retries.",
			"    num_retries = ${8:<number-of-retries>}",
			"  }",
			"}",
			"$0"
		],
		"description": "vault agent full 'vault' configuration"
	},
	"vault agent configuration 'vault' - common": {
		"prefix": ["vault-agent-configuration-vault-common"],
		"body": [
			"// specifies the remote Vault server the Agent connects to.",
			"vault {",
			"  // vault server address",
			"  // the address of the Vault server.",
			"  // this should be a complete URL such as https://127.0.0.1:8200.",
			"  // this value can be overridden by setting the VAULT_ADDR environment variable.",
			"  address = \"${1:<vault-server-address>}\"",
			"",
			"  // vault server ca_cert",
			"  // path on the local disk to a single PEM-encoded CA certificate to verify the Vault server's SSL certificate.",
			"  // this value can be overridden by setting the VAULT_CACERT environment variable.",
			"  ca_cert = \"${2:<path-to-ca-cert-file>}\"",
			"  // vault server ca_path",
			"  // path on the local disk to a directory of PEM-encoded CA certificates to verify the Vault server's SSL certificate.",
			"  // this value can be overridden by setting the VAULT_CAPATH environment variable.",
			"  ca_path = \"${3:<path-to-ca-cert-directory>}\"",
			"",
			"  // vault server client_cert",
			"  // this value can be overridden by setting the VAULT_CLIENT_CERT environment variable.",
			"  client_cert = \"${4:<path-to-client-cert>}\"",
			"  // vault server client_key",
			"  // this value can be overridden by setting the VAULT_CLIENT_KEY environment variable.",
			"  client_key  = \"${5:<path-to-client-key>}\"",
			"",
			"  // vault server tls_skip_verify",
			"  // this value can be overridden by setting the VAULT_SKIP_VERIFY environment variable.",
			"  tls_skip_verify = \"${6:false}\" # (\"true\"|\"false\")",
			"  // vault server tls_server_name",
			"  // name to use as the SNI host when connecting via TLS.",
			"  // this value can be overridden by setting the VAULT_TLS_SERVER_NAME environment variable.",
			"  tls_server_name = \"${7:<tls-server-name>}\"",
			"",
			"}",
			"$0"
		],
		"description": "vault agent common 'vault' configuration"
	},
	"vault agent configuration 'vault' parameter 'address'": {
		"prefix": ["vault-agent-configuration-vault-parameter-address"],
		"body": [
			"  // vault server address",
			"  // the address of the Vault server.",
			"  // this should be a complete URL such as https://127.0.0.1:8200.",
			"  // this value can be overridden by setting the VAULT_ADDR environment variable.",
			"  address = \"${1:<vault-server-address>}\"",
			"$0"
		],
		"description": "vault agent templated 'address' parameter of configuration 'vault'"
	},
	"vault agent configuration 'vault' parameter 'ca_cert'": {
		"prefix": ["vault-agent-configuration-vault-parameter-ca-cert"],
		"body": [
			"  // vault server ca_cert",
			"  // path on the local disk to a single PEM-encoded CA certificate to verify the Vault server's SSL certificate.",
			"  // this value can be overridden by setting the VAULT_CACERT environment variable.",
			"  ca_cert = \"${1:<path-to-ca-cert-file>}\"",
			"$0"
		],
		"description": "vault agent templated 'ca_cert' parameter of configuration 'vault'"
	},
	"vault agent configuration 'vault' parameter 'ca_path'": {
		"prefix": ["vault-agent-configuration-vault-parameter-ca-path"],
		"body": [
			"  // vault server ca_path",
			"  // path on the local disk to a directory of PEM-encoded CA certificates to verify the Vault server's SSL certificate.",
			"  // this value can be overridden by setting the VAULT_CAPATH environment variable.",
			"  ca_path = \"${1:<path-to-ca-cert-directory>}\"",
			"$0"
		],
		"description": "vault agent templated 'ca_path' parameter of configuration 'vault'"
	},
	"vault agent configuration 'vault' parameter 'client_cert'": {
		"prefix": ["vault-agent-configuration-vault-parameter-client-cert"],
		"body": [
			"  // vault server client_cert",
			"  // this value can be overridden by setting the VAULT_CLIENT_CERT environment variable.",
			"  client_cert = \"${1:<path-to-client-cert>}\"",
			"$0"
		],
		"description": "vault agent templated 'client_cert' parameter of configuration 'vault'"
	},
	"vault agent configuration 'vault' parameter 'client_key'": {
		"prefix": ["vault-agent-configuration-vault-parameter-client-key"],
		"body": [
			"  // vault server client_key",
			"  // this value can be overridden by setting the VAULT_CLIENT_KEY environment variable.",
			"  client_key = \"${1:<path-to-client-key>}\"",
			"$0"
		],
		"description": "vault agent templated 'client_key' parameter of configuration 'vault'"
	},
	"vault agent configuration 'vault' parameter 'tls_skip_verify'": {
		"prefix": ["vault-agent-configuration-vault-parameter-tls-skip-verify"],
		"body": [
			"  // vault server tls_skip_verify",
			"  // this value can be overridden by setting the VAULT_SKIP_VERIFY environment variable.",
			"  tls_skip_verify = \"${1:<tls-skip-verify>}\" # (\"true\"|\"false\")",
			"$0"
		],
		"description": "vault agent templated 'tls_skip_verify' parameter of configuration 'vault'"
	},
	"vault agent configuration 'vault' parameter 'tls_server_name'": {
		"prefix": ["vault-agent-configuration-vault-parameter-tls-server-name"],
		"body": [
			"  // vault server tls_server_name",
			"  // name to use as the SNI host when connecting via TLS.",
			"  // this value can be overridden by setting the VAULT_TLS_SERVER_NAME environment variable.",
			"  tls_server_name = \"${1:<tls-server-name>}\"",
			"$0"
		],
		"description": "vault agent templated 'tls_server_name' parameter of configuration 'vault'"
	},
	"vault agent configuration 'vault' parameter 'retry'": {
		"prefix": ["vault-agent-configuration-vault-parameter-retry"],
		"body": [
			"  // vault server retry",
			"  // controls how failing Vault requests are handled, whether these requests are issued in order to render templates,",
			"  // or are proxied requests coming from the proxy cache subsystem.",
			"  retry {",
			"    // specify how many times a failing request will be retried.",
			"    // a value of 0 translates to the default, i.e. 12 retries.",
			"    // avalue of -1 disables retries.",
			"    num_retries = ${1:<number-of-retries>}",
			"  }",
			"$0"
		],
		"description": "vault agent templated 'retry' parameter of configuration 'vault'"
	},
	"vault agent configuration 'auto_auth' - empty": {
		"prefix": ["vault-agent-configuration-auto-auth-empty"],
		"body": [
			"// specifies the method and other options used for auto-auth functionality.",
			"auto_auth {",
			"  $0",
			"}",
			""
		],
		"description": "vault agent empty 'auto_auth' configuration"
	},
	"vault agent configuration 'auto_auth' - full": {
		"prefix": ["vault-agent-configuration-auto-auth-full"],
		"body": [
			"// specifies the method and other options used for auto-auth functionality.",
			"auto_auth {",
			"  // vault agent auto auth method",
			"  method \"${1:<auto-auth-method>}\" {",
			"    // the mount path of the method.",
			"    // if not specified, defaults to a value of auth/<method type>",
			"    mount_path = \"${2:<auto-auth-method-mount-path>}\"",
			"",
			"    // the default namespace path for the mount.",
			"    // if not specified, defaults to the root namespace.",
			"    namespace = \"${3:<auto-auth-method-namespace>}\"",
			"",
			"    // if specified, the written token will be response-wrapped by the agent.",
			"    // this is more secure than wrapping by sinks, but does not allow the agent to keep the token renewed",
			"    // or automatically reauthenticate when it expires.",
			"    // rather than a simple string, the written value will be a JSON-encoded SecretWrapInfo structure.",
			"    // values can be an integer number of seconds or a stringish value like 5m.",
			"    wrap_ttl = \"${4:<auto-auth-method-wrap-ttl>}\"",
			"",
			"    // the maximum time Agent will delay before retrying after a failed auth attempt.",
			"    // the backoff will start at 1 second and double (with some randomness) after successive failures, capped by max_backoff.",
			"    max_backoff = \"${5:<auto-auth-method-max-backoff>}\"",
			"",
			"    config = {${6:<insert-your-method-configuration-here>}}",
			"  }",
			"}",
			"$0"
		],
		"description": "vault agent full 'auto_auth' configuration"
	},
	"vault agent configuration 'auto_auth' - common": {
		"prefix": ["vault-agent-configuration-auto-auth-common"],
		"body": [
			"// specifies the method and other options used for auto-auth functionality.",
			"auto_auth {",
			"  // vault agent auto auth method",
			"  method \"${1:<auto-auth-method>}\" {",
			"    // the mount path of the method.",
			"    // if not specified, defaults to a value of auth/<method type>",
			"    mount_path = \"${2:<auto-auth-method-mount-path>}\"",
			"",
			"    // the default namespace path for the mount.",
			"    // if not specified, defaults to the root namespace.",
			"    namespace = \"${3:<auto-auth-method-namespace>}\"",
			"",
			"    // if specified, the written token will be response-wrapped by the agent.",
			"    // this is more secure than wrapping by sinks, but does not allow the agent to keep the token renewed",
			"    // or automatically reauthenticate when it expires.",
			"    // rather than a simple string, the written value will be a JSON-encoded SecretWrapInfo structure.",
			"    // values can be an integer number of seconds or a stringish value like 5m.",
			"    wrap_ttl = \"${4:<auto-auth-method-wrap-ttl>}\"",
			"",
			"    // the maximum time Agent will delay before retrying after a failed auth attempt.",
			"    // the backoff will start at 1 second and double (with some randomness) after successive failures, capped by max_backoff.",
			"    max_backoff = \"${5:<auto-auth-method-max-backoff>}\"",
			"",
			"    config = {${6:<insert-your-method-configuration-here>}}",
			"  }",
			"}",
			"$0"
		],
		"description": "vault agent common 'auto_auth' configuration"
	},
	"vault agent configuration 'auto_auth' parameter 'method' - empty": {
		"prefix": ["vault-agent-configuration-auto-auth-parameter-method-empty"],
		"body": [
			"  // vault agent auto auth method",
			"  method \"${1:<auto-auth-method>}\" {",
			"    $0",
			"  }",
			""
		],
		"description": "vault agent empty 'method' parameter of configuration 'auto_auth'"
	},
	"vault agent configuration 'auto_auth' parameter 'method' - full": {
		"prefix": ["vault-agent-configuration-auto-auth-parameter-method-full"],
		"body": [
			"  // vault agent auto auth method",
			"  method \"${1:<auto-auth-method>}\" {",
			"    // the mount path of the method.",
			"    // if not specified, defaults to a value of auth/<method type>",
			"    mount_path = \"${2:<auto-auth-method-mount-path>}\"",
			"",
			"    // the default namespace path for the mount.",
			"    // if not specified, defaults to the root namespace.",
			"    namespace = \"${3:<auto-auth-method-namespace>}\"",
			"",
			"    // if specified, the written token will be response-wrapped by the agent.",
			"    // this is more secure than wrapping by sinks, but does not allow the agent to keep the token renewed",
			"    // or automatically reauthenticate when it expires.",
			"    // rather than a simple string, the written value will be a JSON-encoded SecretWrapInfo structure.",
			"    // values can be an integer number of seconds or a stringish value like 5m.",
			"    wrap_ttl = \"${4:<auto-auth-method-wrap-ttl>}\"",
			"",
			"    // the maximum time Agent will delay before retrying after a failed auth attempt.",
			"    // the backoff will start at 1 second and double (with some randomness) after successive failures, capped by max_backoff.",
			"    max_backoff = \"${5:<auto-auth-method-max-backoff>}\"",
			"",
			"    config = {${6:<insert-your-method-configuration-here>}}",
			"  }",
			"$0"
		],
		"description": "vault agent full 'method' parameter of configuration 'auto_auth'"
	},
	"vault agent configuration 'auto_auth' parameter 'method' - common": {
		"prefix": ["vault-agent-configuration-auto-auth-parameter-method-common"],
		"body": [
			"  // vault agent auto auth method",
			"  method \"${1:<auto-auth-method>}\" {",
			"    config = {${2:<insert-your-method-configuration-here>}}",
			"  }",
			"$0"
		],
		"description": "vault agent common 'method' parameter of configuration 'auto_auth'"
	},
	"vault agent configuration 'auto_auth' parameter 'method' parameter 'mount_path'": {
		"prefix": ["vault-agent-configuration-auto-auth-parameter-method-parameter-mount-path"],
		"body": [
			"    // the mount path of the method.",
			"    // if not specified, defaults to a value of auth/<method type>",
			"    mount_path = \"${1:<auto-auth-method-mount-path>}\"",
			"$0"
		],
		"description": "vault agent templated 'mount_path' parameter of parameter 'method' of configuration 'auto_auth'"
	},
	"vault agent configuration 'auto_auth' parameter 'method' parameter 'namespace'": {
		"prefix": ["vault-agent-configuration-auto-auth-parameter-method-parameter-namespace"],
		"body": [
			"    // the default namespace path for the mount.",
			"    // if not specified, defaults to the root namespace.",
			"    namespace = \"${1:<auto-auth-method-namespace>}\"",
			"$0"
		],
		"description": "vault agent templated 'namespace' parameter of parameter 'method' of configuration 'auto_auth'"
	},
	"vault agent configuration 'auto_auth' parameter 'method' parameter 'max_backoff'": {
		"prefix": ["vault-agent-configuration-auto-auth-parameter-method-parameter-max-backoff"],
		"body": [
			"    // the maximum time Agent will delay before retrying after a failed auth attempt.",
			"    // the backoff will start at 1 second and double (with some randomness) after successive failures, capped by max_backoff.",
			"    max_backoff = \"${1:<auto-auth-method-max-backoff>}\"",
			"$0"
		],
		"description": "vault agent templated 'max_backoff' parameter of parameter 'method' of configuration 'auto_auth'"
	},
	"vault agent configuration 'auto_auth' parameter 'method' parameter 'config' - alicoud": {
		"prefix": ["vault-agent-configuration-auto-auth-parameter-method-parameter-config-alicoud"],
		"body": [
			"    // vault agent auto auth method config 'alicloud'",
			"    config = {",
			"      role   = \"${1:<ali-cloud-role>}\"",
			"",
			"      region = \"${2:<ali-cloud-region>}\"",
			"",
			"      // optional",
			"      credential_poll_interval = ${3:<ali-cloud-credential-poll-interval>}",
			"",
			"      // optional static credential configuration (not preferred)",
			"      access_key   = \"${4:<ali-cloud-access-key>}\"",
			"      access_token = \"${5:<ali-cloud-access-token>}\"",
			"",
			"      secret_key    = \"${6:<ali-cloud-secret-key>}\"",
			"      private_key   = \"${7:<ali-cloud-private-key>}\"",
			"      public_key_id = \"${8:<ali-cloud-public-key-id>}\"",
			"",
			"      role_arn                = \"${9:<ali-cloud-role-arn>}\"",
			"      role_name               = \"${10:<ali-cloud-role-name>}\"",
			"      role_session_name       = \"${11:<ali-cloud-role-session-name>}\"",
			"      role_session_expiration = \"${12:<ali-cloud-role-session-expiration>}\"",
			"",
			"      session_expiration = \"${13:<ali-cloud-session-expiration>}\"",
			"    }",
			"$0"
		],
		"description": "vault agent alicloud 'config' parameter of parameter 'method' of configuration 'auto_auth'"
	},
	"vault agent configuration 'auto_auth' parameter 'method' parameter 'config' - approle": {
		"prefix": ["vault-agent-configuration-auto-auth-parameter-method-parameter-config-approle"],
		"body": [
			"    // vault agent auto auth method config 'approle'",
			"    config = {",
			"      role_id_file_path   = \"${1:<approle-role-id-file-path>}\"",
			"",
			"      // optional, defaults to true",
			"      remove_secret_id_file_after_reading = ${3|true,false|}",
			"",
			"      // optional",
			"      secret_id_file_path = \"${2:<approle-secret-id-file-path>}\"",
			"",
			"      // if set, the value at 'secret_id_file_path' will be expected to be a response-wrapping token",
			"      // containing the output of the secret ID retrieval endpoint for the role (e.g. auth/approle/role/webservers/secret-id)",
			"      // and the creation path for the response-wrapping token must match the value set here.",
			"      secret_id_response_wrapping_path = \"${4:<approle-secret-id-response-wrapping-path-path>}\"",
			"    }",
			"$0"
		],
		"description": "vault agent approle 'config' parameter of parameter 'method' of configuration 'auto_auth'"
	},
	"vault agent configuration 'auto_auth' parameter 'method' parameter 'config' - aws": {
		"prefix": ["vault-agent-configuration-auto-auth-parameter-method-parameter-config-aws"],
		"body": [
			"    // vault agent auto auth method config 'aws'",
			"    config = {",
			"      type = \"${1:<aws-auth-type>}\" # (\"ec2\"|\"iam\")",
			"",
			"      role = \"${2:<aws-auth-role>}\"",
			"",
			"      // optional",
			"      credential_poll_interval = ${3:<aws-credential-poll-interval>}",
			"",
			"      access_key = \"${4:<aws-access-key>}\"",
			"      secret_key = \"${5:<aws-secret-key>}\"",
			"",
			"      session_token = \"${6:<aws-session-token>}\"",
			"",
			"      region = \"${7:<aws-region>}\"",
			"",
			"      // if configured in Vault, the value to use for 'iam_server_id_header_value'",
			"      header_value = \"${8:<aws-header-value>}\"",
			"    }",
			"$0"
		],
		"description": "vault agent aws 'config' parameter of parameter 'method' of configuration 'auto_auth'"
	},
	"vault agent configuration 'auto_auth' parameter 'method' parameter 'config' - azure": {
		"prefix": ["vault-agent-configuration-auto-auth-parameter-method-parameter-config-azure"],
		"body": [
			"    // vault agent auto auth method config 'azure'",
			"    config = {",
			"      role = \"${1:<azure-auth-role>}\"",
			"",
			"      // the resource name to use when getting instance information",
			"      resource = \"${2:<azure-auth-role>}\"",
			"    }",
			"$0"
		],
		"description": "vault agent azure 'config' parameter of parameter 'method' of configuration 'auto_auth'"
	},
	"vault agent configuration 'auto_auth' parameter 'method' parameter 'config' - cert": {
		"prefix": ["vault-agent-configuration-auto-auth-parameter-method-parameter-config-cert"],
		"body": [
			"    // vault agent auto auth method config 'cert'",
			"    config = {",
			"      // optional",
			"      // the trusted certificate role which should be used when authenticating with TLS.",
			"      // if a name is not specified, the auth method will try to authenticate against all trusted certificates.",
			"      name = \"${1:<trusted-certificate-role>}\"",
			"",
			"      // path on the local disk to a single PEM-encoded CA certificate to verify the Vault server's SSL certificate.",
			"      ca_cert = \"${2:<path-to-ca-cert>}\"",
			"",
			"      // path on the local disk to a single PEM-encoded client certificate to use for cert auth method authentication.",
			"      client_cert = \"${3:<path-to-client-cert>}\"",
			"      // path on the local disk to a single PEM-encoded private key matching the client certificate from client_cert.",
			"      client_key  = \"${4:<path-to-client-key>}\"",
			"    }",
			"$0"
		],
		"description": "vault agent cert 'config' parameter of parameter 'method' of configuration 'auto_auth'"
	},
	"vault agent configuration 'auto_auth' parameter 'method' parameter 'config' - cloud-foundry": {
		"prefix": ["vault-agent-configuration-auto-auth-parameter-method-parameter-config-cloud-foundry"],
		"body": [
			"    // vault agent auto auth method config 'cf'",
			"    // the Vault agent will use the CF_INSTANCE_CERT and CF_INSTANCE_KEY env variables to construct a valid login call for CF.",
			"    config = {",
			"      role = \"${1:<cloud-foundry-auth-role>}\"",
			"    }",
			"$0"
		],
		"description": "vault agent cloud-foundry 'config' parameter of parameter 'method' of configuration 'auto_auth'"
	},
	"vault agent configuration 'auto_auth' parameter 'method' parameter 'config' - google-cloud": {
		"prefix": ["vault-agent-configuration-auto-auth-parameter-method-parameter-config-google-cloud"],
		"body": [
			"    // vault agent auto auth method config 'gcp'",
			"    config = {",
			"      type = \"${1:<google-cloud-auth-type>}\" # (\"gce\"|\"iam\")",
			"",
			"      role = \"${2:<google-cloud-auth-role>}\"",
			"",
			"      // optional",
			"      // when using static credentials, the contents of the JSON credentials file",
			"      credentials = \"${3:<google-cloud-json-credentials-file-content>}\"",
			"",
			"      service_account = \"${4:<google-cloud-service-account>}\"",
			"",
			"      // the number of minutes a generated JWT should be valid for when using the iam method",
			"      // defaults to 15 minutes",
			"      jwt_exp = \"${5:<google-cloud-jwt-expiration>}\"",
			"    }",
			"$0"
		],
		"description": "vault agent google-cloud 'config' parameter of parameter 'method' of configuration 'auto_auth'"
	},
	"vault agent configuration 'auto_auth' parameter 'method' parameter 'config' - jwt": {
		"prefix": ["vault-agent-configuration-auto-auth-parameter-method-parameter-config-jwt"],
		"body": [
			"    // vault agent auto auth method config 'jwt'",
			"    config = {",
			"      path = \"${1:<path-to-jwt-file>}\"",
			"",
			"      role = \"${2:<jwt-auth-role>}\"",
			"    }",
			"$0"
		],
		"description": "vault agent jwt 'config' parameter of parameter 'method' of configuration 'auto_auth'"
	},
	"vault agent configuration 'auto_auth' parameter 'method' parameter 'config' - kerberos": {
		"prefix": ["vault-agent-configuration-auto-auth-parameter-method-parameter-config-kerberos"],
		"body": [
			"    // vault agent auto auth method config 'kerberos'",
			"    config = {",
			"      krb5conf_path = \"${1:<path-to-krb5-conf>}\"",
			"",
			"      // the path to the keytab in which the entry lives for the entity authenticating to Vault.",
			"      // keytab files should be protected from other users on a shared server using appropriate file permissions.",
			"      keytab_path = \"${2:<path-to-keytab>}\"",
			"",
			"      // the username for the entry _within_ the keytab to use for logging into Kerberos.",
			"      // this username must match a service account in ldap.",
			"      username = \"${3:<kerberos-keytab-entry-for-login>}\"",
			"",
			"      // the service principal name to use in obtaining a service ticket for gaining a SPNEGO token.",
			"      // this service must exist in ldap.",
			"      service = \"${4:<kerberos-service-principal-name>}\"",
			"",
			"      // the name of the Kerberos realm.",
			"      // this realm must match the UPNDomain configured on the ldap connection. This check is case-sensitive.",
			"      realm = \"${5:<kerberos-realm>}\"",
			"",
			"      // optional",
			"      // for disabling the Kerberos auth method's default of using FAST negotiation.",
			"      // FAST is a pre-authentication framework for Kerberos.",
			"      // it includes a mechanism for tunneling pre-authentication exchanges using armoured KDC messages.",
			"      // FAST provides increased resistance to passive password guessing attacks.",
			"      // some common Kerberos implementations do not support FAST negotiation.",
			"      // the default is false.",
			"      disable_fast_negotiation = ${6:<kerberos-disable-fast-negotiation>}",
			"    }",
			"$0"
		],
		"description": "vault agent kerberos 'config' parameter of parameter 'method' of configuration 'auto_auth'"
	},
	"vault agent configuration 'auto_auth' parameter 'method' parameter 'config' - kubernetes": {
		"prefix": ["vault-agent-configuration-auto-auth-parameter-method-parameter-config-kubernetes"],
		"body": [
			"    // vault agent auto auth method config 'kubernetes'",
			"    config = {",
			"      role = \"${1:<kubernetes-auth-role>}\"",
			"",
			"      // optional",
			"      // the file path to a custom JWT token to use for authentication.",
			"      // ff omitted, the default service account token path is used.",
			"      token_path = \"${2:<kerberos-realm>}\"",
			"    }",
			"$0"
		],
		"description": "vault agent kubernetes 'config' parameter of parameter 'method' of configuration 'auto_auth'"
	},
	// todo
	// [ sinks ]
	"vault agent configuration 'cache' - empty": {
		"prefix": ["vault-agent-configuration-cache-empty"],
		"body": [
			"// allows client-side caching of responses containing newly created tokens",
			"// and responses containing leased secrets generated off of these newly created tokens.",
			"// the renewals of the cached tokens and leases are also managed by the agent.",
			"cache {",
			"  $0",
			"}",
			""
		],
		"description": "vault agent empty 'cache' configuration"
	},
	"vault agent configuration 'cache' - full": {
		"prefix": ["vault-agent-configuration-cache-full"],
		"body": [
			"// allows client-side caching of responses containing newly created tokens",
			"// and responses containing leased secrets generated off of these newly created tokens.",
			"// the renewals of the cached tokens and leases are also managed by the agent.",
			"cache {",
			"  // use_auto_auth_token",
			"  // if set, the requests made to agent without a Vault token will be forwarded to the Vault server",
			"  // with the auto-auth token attached.",
			"  // ff the requests already bear a token, this configuration will be overridden",
			"  // and the token in the request will be used to forward the request to the Vault server.",
			"  // if set to 'force' Agent will use the auto-auth token, overwriting the attached Vault token if set.",
			"  use_auto_auth_token = ${1|true,false|}",
			"",
			"  // persistent cache",
			"  persist \"${2:<cache-persist-type>}\" {",
			"    // path",
			"    // the path on disk where the persistent cache file should be created or restored from.",
			"    path = \"${3:<path-to-persistent-cache-file>}\"",
			"",
			"    // keep_after_import",
			"    // when set to true, a restored cache file is not deleted.",
			"    // defaults to false",
			"    /keep_after_import = ${4|true,false|}",
			"",
			"    // exit_on_err",
			"    // when set to true, if any errors occur during a persitent cache restore, Vault Agent will exit with an error.",
			"    // defaults to true.",
			"    exit_on_err = ${5|true,false|}",
			"  }",
			"}",
			"$0"
		],
		"description": "vault agent full 'cache' configuration"
	},
	"vault agent configuration 'cache' - common": {
		"prefix": ["vault-agent-configuration-cache-common"],
		"body": [
			"// allows client-side caching of responses containing newly created tokens",
			"// and responses containing leased secrets generated off of these newly created tokens.",
			"// the renewals of the cached tokens and leases are also managed by the agent.",
			"cache {",
			"}",
			"$0"
		],
		"description": "vault agent common 'cache' configuration"
	},
	"vault agent configuration 'cache' parameter 'use_auto_auth_token'": {
		"prefix": ["vault-agent-configuration-cache-parameter-use-auto-auth-token"],
		"body": [
			"  // use_auto_auth_token",
			"  // if set, the requests made to agent without a Vault token will be forwarded to the Vault server",
			"  // with the auto-auth token attached.",
			"  // ff the requests already bear a token, this configuration will be overridden",
			"  // and the token in the request will be used to forward the request to the Vault server.",
			"  // if set to 'force' Agent will use the auto-auth token, overwriting the attached Vault token if set.",
			"  use_auto_auth_token = ${1|true,false|}",
			"$0"
		],
		"description": "vault agent templated 'use_auto_auth_token' parameter of configuration 'cache'"
	},
	"vault agent configuration 'cache' parameter 'persist' - empty": {
		"prefix": ["vault-agent-configuration-cache-parameter-persist-empty"],
		"body": [
			"  // persistent cache",
			"  persist \"${1:<cache-persist-type>}\" {",
			"    $0",
			"}",
			""
		],
		"description": "vault agent full 'persist' parameter of configuration 'cache'"
	},
	"vault agent configuration 'cache' parameter 'persist' - full": {
		"prefix": ["vault-agent-configuration-cache-parameter-persist-full"],
		"body": [
			"  // persistent cache",
			"  persist \"${1:<cache-persist-type>}\" {",
			"    // path",
			"    // the path on disk where the persistent cache file should be created or restored from.",
			"    path = \"${2:<path-to-persistent-cache-file>}\"",
			"",
			"    // keep_after_import",
			"    // when set to true, a restored cache file is not deleted.",
			"    // defaults to false",
			"    keep_after_import = ${3|true,false|}",
			"",
			"    // exit_on_err",
			"    // when set to true, if any errors occur during a persitent cache restore, Vault Agent will exit with an error.",
			"    // defaults to true.",
			"    exit_on_err = ${4|true,false|}",
			"}",
			"$0"
		],
		"description": "vault agent full 'persist' parameter of configuration 'cache'"
	},
	"vault agent configuration 'cache' parameter 'persist' - common": {
		"prefix": ["vault-agent-configuration-cache-parameter-persist-common"],
		"body": [
			"  // persistent cache",
			"  persist \"${1:<cache-persist-type>}\" {",
			"    // path",
			"    // the path on disk where the persistent cache file should be created or restored from.",
			"    path = \"${2:<path-to-persistent-cache-file>}\"",
			"}",
			"$0"
		],
		"description": "vault agent common 'persist' parameter of configuration 'cache'"
	},
	"vault agent configuration 'cache' parameter 'persist' parameter 'path'": {
		"prefix": ["vault-agent-configuration-cache-parameter-persist-parameter-path"],
		"body": [
			"    // path",
			"    // the path on disk where the persistent cache file should be created or restored from.",
			"    path = \"${1:<path-to-persistent-cache-file>}\"",
			"$0"
		],
		"description": "vault agent templated 'path' parameter of parameter 'persist' of configuration 'cache'"
	},
	"vault agent configuration 'cache' parameter 'persist' parameter 'keep_after_import'": {
		"prefix": ["vault-agent-configuration-cache-parameter-persist-parameter-keep-after-import"],
		"body": [
			"    // keep_after_import",
			"    // when set to true, a restored cache file is not deleted.",
			"    // defaults to false",
			"    keep_after_import = ${1|true,false|}",
			"$0"
		],
		"description": "vault agent templated 'keep_after_import' parameter of parameter 'persist' of configuration 'cache'"
	},
	"vault agent configuration 'cache' parameter 'persist' parameter 'exit_on_err'": {
		"prefix": ["vault-agent-configuration-cache-parameter-persist-parameter-exit-on-err"],
		"body": [
			"    // exit_on_err",
			"    // when set to true, if any errors occur during a persitent cache restore, Vault Agent will exit with an error.",
			"    // defaults to true.",
			"    exit_on_err = ${1|true,false|}",
			"$0"
		],
		"description": "vault agent templated 'exit_on_err' parameter of parameter 'persist' of configuration 'cache'"
	},
	"vault agent configuration 'listener' - empty": {
		"prefix": ["vault-agent-configuration-listener-empty"],
		"body": [
			"// there can be one or more listener blocks at the top level.",
			"// these configuration values are common to both tcp and unix listener blocks.",
			"// blocks of type tcp support the standard tcp listener options.",
			"listener \"${1:<listener-type>}\"{",
			"  $0",
			"}",
			""
		],
		"description": "vault agent empty 'listener' configuration"
	},
	"vault agent configuration 'listener' - full": {
		"prefix": ["vault-agent-configuration-listener-full"],
		"body": [
			"// there can be one or more listener blocks at the top level.",
			"// these configuration values are common to both tcp and unix listener blocks.",
			"// blocks of type tcp support the standard tcp listener options.",
			"listener \"${1:<listener-type>}\"{",
			"  // the address for the listener to listen to.",
			"  // this can either be a URL path when using tcp or a file path when using unix.",
			"  // for example, 127.0.0.1:8200 or /path/to/socket.",
			"  // defaults to 127.0.0.1:8200.",
			"  address = \"${2:<listener-address>}\"",
			"",
			"  tls_disable   = ${3|true,false|}",
			"  tls_key_file  = \"${4:<path-to-tls-key-file>}\"",
			"  tls_cert_file = \"${5:<path-to-tls-cert-file>}\"",
			"}",
			"$0"
		],
		"description": "vault agent full 'listener' configuration"
	},
	"vault agent configuration 'listener' - common": {
		"prefix": ["vault-agent-configuration-listener-common"],
		"body": [
			"// there can be one or more listener blocks at the top level.",
			"// these configuration values are common to both tcp and unix listener blocks.",
			"// blocks of type tcp support the standard tcp listener options.",
			"listener \"${1:<listener-type>}\"{",
			"  // the address for the listener to listen to.",
			"  // this can either be a URL path when using tcp or a file path when using unix.",
			"  // for example, 127.0.0.1:8200 or /path/to/socket.",
			"  // defaults to 127.0.0.1:8200.",
			"  address = \"${2:<listener-address>}\"",
			"",
			"  tls_disable   = ${3:false}",
			"  tls_key_file  = \"${4:<path-to-tls-key-file>}\"",
			"  tls_cert_file = \"${5:<path-to-tls-cert-file>}\"",
			"}",
			"$0"
		],
		"description": "vault agent common 'listener' configuration"
	},
	"vault agent configuration 'listener' parameter 'address'": {
		"prefix": ["vault-agent-configuration-listener-parameter-address"],
		"body": [
			"  // the address for the listener to listen to.",
			"  // this can either be a URL path when using tcp or a file path when using unix.",
			"  // for example, 127.0.0.1:8200 or /path/to/socket.",
			"  // defaults to 127.0.0.1:8200.",
			"  address = \"${1:<listener-address>}\"",
			"$0"
		],
		"description": "vault agent templated 'address' parameter of configuration 'listener'"
	},
	"vault agent configuration 'listener' parameter 'tls_disable'": {
		"prefix": ["vault-agent-configuration-listener-parameter-tls-disable"],
		"body": [
			"  tls_disable = ${1|true,false|}",
			"$0"
		],
		"description": "vault agent templated 'tls_disable' parameter of configuration 'listener'"
	},
	"vault agent configuration 'listener' parameter 'tls_key_file'": {
		"prefix": ["vault-agent-configuration-listener-parameter-tls-key-file"],
		"body": [
			"  tls_key_file = \"${1:<path-to-tls-key-file>}\"",
			"$0"
		],
		"description": "vault agent templated 'tls_key_file' parameter of configuration 'listener'"
	},
	"vault agent configuration 'listener' parameter 'tls_cert_file'": {
		"prefix": ["vault-agent-configuration-listener-parameter-tls-cert-file"],
		"body": [
			"  tls_cert_file = \"${1:<path-to-tls-cert-file>}\"",
			"$0"
		],
		"description": "vault agent templated 'tls_cert_file' parameter of configuration 'listener'"
	},
	"vault agent configuration 'template' - empty": {
		"prefix": ["vault-agent-configuration-template-empty"],
		"body": [
			"template {",
			"  $0",
			"}",
			""
		],
		"description": "vault agent empty 'template' configuration"
	},
	"vault agent configuration 'template' - full": {
		"prefix": ["vault-agent-configuration-template-full"],
		"body": [
			"template {",
			"  // source",
			"  // path on disk to use as the input template.",
			"  // this option is required if not using the contents option.",
			"  source = \"${1:<path-to-input-template>}\"",
			"",
			"  // contents",
			"  // this option allows embedding the contents of a template in the configuration file",
			"  // rather then supplying the source path to the template file.",
			"  // this is useful for short templates.",
			"  // this option is mutually exclusive with the source option.",
			"  contents = \"${2:<embedded-template-content>}\"",
			"",
			"  // destination",
			"  // path on disk where the rendered secrets should be created.",
			"  // if the parent directories do not exist, Vault Agent will attempt to create them, unless 'create_dest_dirs' is false.",
			"  destination = \"${3:<path-for-rendered-secrets>}\"",
			"",
			"  // create_dest_dirs",
			"  // this option tells Vault Agent to create the parent directories of the destination path if they do not exist.",
			"  create_dest_dirs = ${4|true,false|}",
			"",
			"  // command",
			"  // this is the optional command to run when the template is rendered.",
			"  // the command will only run if the resulting template changes.",
			"  // the command must return within 30s (configurable), and it must have a successful exit code.",
			"  // Vault Agent is not a replacement for a process monitor or init system.",
			"  command         = \"${5:<command-to-run-when-rendered>}\"",
			"  // command_timeout",
			"  // this is the maximum amount of time to wait for the optional command to return.",
			"  command_timeout = \"${6:<command-timeout>}\"",
			"",
			"  // error_on_missing_key",
			"  // exit with an error when accessing a struct or map field/key that does notexist.",
			"  // the default behavior will print <no value> when accessing a field that does not exist.",
			"  // it is highly recommended you set this to 'true'.",
			"  error_on_missing_key = ${7|true,false|}",
			"",
			"  // perms",
			"  // this is the permission to render the file.",
			"  // if this option is left unspecified, Vault Agent will attempt to match the permissions of the file",
			"  // that already exists at the destination path. If no file exists at that path, the permissions are 0644.",
			"  perms = \"${8:<perms>}\"",
			"",
			"  // backup",
			"  // this option backs up the previously rendered template at the destination path before writing a new one.",
			"  // tt keeps exactly one backup. This option is useful for preventing accidental changes to the data without having a rollback strategy.",
			"  backup = ${9|true,false|}",
			"",
			"  // left_delimiter",
			"  // delimiter to use in the template. The default is '\\{\\{' but for some templates,",
			"  // it may be easier to use a different delimiter that does not conflict with the output file itself.",
			"  left_delimiter  = \"${10:<left-delimiter>}\"",
			"  // right_delimiter",
			"  // delimiter to use in the template. The default is '}}' but for some templates,",
			"  // it may be easier to use a different delimiter that does not conflict with the output file itself.",
			"  right_delimiter = \"${11:<right-delimiter>}\"",
			"",
			"  // sandbox_path",
			"  // if a sandbox path is provided, any path provided to the file function is checked that it falls within the sandbox path.",
			"  // relative paths that try to traverse outside the sandbox path will exit with an error.",
			"  sandbox_path = \"${12:<path-to-sandbox>}\"",
			"",
			"  // wait",
			"  // this is the minimum(:maximum) to wait before rendering a new template to disk and triggering a command,",
			"  // separated by a colon ( : ).",
			"  wait = \"${13:<minimum(:maximum)-wait-before-rendering-new-template>}\"",
			"}",
			"$0"
		],
		"description": "vault agent full 'template' configuration"
	},
	"vault agent configuration 'template' - common": {
		"prefix": ["vault-agent-configuration-template-common"],
		"body": [
			"template {",
			"  // source",
			"  // path on disk to use as the input template.",
			"  // this option is required if not using the contents option.",
			"  source = \"${1:<path-to-input-template>}\"",
			"",
			"  // destination",
			"  // path on disk where the rendered secrets should be created.",
			"  // if the parent directories do not exist, Vault Agent will attempt to create them, unless 'create_dest_dirs' is false.",
			"  destination = \"${2:<path-for-rendered-secrets>}\"",
			"",
			"  // wait",
			"  // this is the minimum(:maximum) to wait before rendering a new template to disk and triggering a command,",
			"  // separated by a colon ( : ).",
			"  wait = \"${3:<minimum(:maximum)-wait-before-rendering-new-template>}\"",
			"}",
			"$0"
		],
		"description": "vault agent common 'template' configuration"
	},
	"vault agent configuration 'template' parameter 'source'": {
		"prefix": ["vault-agent-configuration-template-parameter-source"],
		"body": [
			"  // source",
			"  // path on disk to use as the input template.",
			"  // this option is required if not using the contents option.",
			"  source = \"${1:<path-to-input-template>}\"",
			"$0"
		],
		"description": "vault agent templated 'source' parameter of configuration 'template'"
	},
	"vault agent configuration 'template' parameter 'destination'": {
		"prefix": ["vault-agent-configuration-template-parameter-destination"],
		"body": [
			"  // destination",
			"  // path on disk where the rendered secrets should be created.",
			"  // if the parent directories do not exist, Vault Agent will attempt to create them, unless 'create_dest_dirs' is false.",
			"  destination = \"${1:<path-for-rendered-secrets>}\"",
			"$0"
		],
		"description": "vault agent templated 'destination' parameter of configuration 'template'"
	},
	"vault agent configuration 'template' parameter 'create_dest_dirs'": {
		"prefix": ["vault-agent-configuration-template-parameter-create-dest-dirs"],
		"body": [
			"  // create_dest_dirs",
			"  // this option tells Vault Agent to create the parent directories of the destination path if they do not exist.",
			"  create_dest_dirs = ${1|true,false|}",
			"$0"
		],
		"description": "vault agent templated 'create_dest_dirs' parameter of configuration 'template'"
	},
	"vault agent configuration 'template' parameter 'contents'": {
		"prefix": ["vault-agent-configuration-template-parameter-contents"],
		"body": [
			"  // contents",
			"  // this option allows embedding the contents of a template in the configuration file",
			"  // rather then supplying the source path to the template file.",
			"  // this is useful for short templates.",
			"  // this option is mutually exclusive with the source option.",
			"  contents = \"${1:<embedded-template-content>}\"",
			"$0"
		],
		"description": "vault agent templated 'contents' parameter of configuration 'template'"
	},
	"vault agent configuration 'template' parameter 'command'": {
		"prefix": ["vault-agent-configuration-template-parameter-command"],
		"body": [
			"  // command",
			"  // this is the optional command to run when the template is rendered.",
			"  // the command will only run if the resulting template changes.",
			"  // the command must return within 30s (configurable), and it must have a successful exit code.",
			"  // Vault Agent is not a replacement for a process monitor or init system.",
			"  command = \"${1:<command-to-run-when-rendered>}\"",
			"$0"
		],
		"description": "vault agent templated 'command' parameter of configuration 'template'"
	},
	"vault agent configuration 'template' parameter 'command_timeout'": {
		"prefix": ["vault-agent-configuration-template-parameter-command-timeout"],
		"body": [
			"  // command_timeout",
			"  // this is the maximum amount of time to wait for the optional command to return.",
			"  command_timeout = \"${1:<command-timeout>}\"",
			"$0"
		],
		"description": "vault agent templated 'command_timeout' parameter of configuration 'template'"
	},
	"vault agent configuration 'template' parameter 'error_on_missing_key'": {
		"prefix": ["vault-agent-configuration-template-parameter-error-on-missing-key"],
		"body": [
			"  // error_on_missing_key",
			"  // exit with an error when accessing a struct or map field/key that does notexist.",
			"  // the default behavior will print <no value> when accessing a field that does not exist.",
			"  // it is highly recommended you set this to 'true'.",
			"  error_on_missing_key = ${1|true,false|}",
			"$0"
		],
		"description": "vault agent templated 'error_on_missing_key' parameter of configuration 'template'"
	},
	"vault agent configuration 'template' parameter 'perms'": {
		"prefix": ["vault-agent-configuration-template-parameter-perms"],
		"body": [
			"  // perms",
			"  // this is the permission to render the file.",
			"  // if this option is left unspecified, Vault Agent will attempt to match the permissions of the file",
			"  // that already exists at the destination path. If no file exists at that path, the permissions are 0644.",
			"  perms = \"${1:<perms>}\"",
			"$0"
		],
		"description": "vault agent templated 'perms' parameter of configuration 'template'"
	},
	"vault agent configuration 'template' parameter 'backup'": {
		"prefix": ["vault-agent-configuration-template-parameter-backup"],
		"body": [
			"  // backup",
			"  // this option backs up the previously rendered template at the destination path before writing a new one.",
			"  // tt keeps exactly one backup. This option is useful for preventing accidental changes to the data without having a rollback strategy.",
			"  backup = ${1|true,false|}",
			"$0"
		],
		"description": "vault agent templated 'backup' parameter of configuration 'template'"
	},
	"vault agent configuration 'template' parameter 'left_delimiter'": {
		"prefix": ["vault-agent-configuration-template-parameter-left-delimiter"],
		"body": [
			"  // left_delimiter",
			"  // delimiter to use in the template. The default is '{{' but for some templates,",
			"  // it may be easier to use a different delimiter that does not conflict with the output file itself.",
			"  left_delimiter = \"${1:<left-delimiter>}\"",
			"$0"
		],
		"description": "vault agent templated 'left_delimiter' parameter of configuration 'template'"
	},
	"vault agent configuration 'template' parameter 'right_delimiter'": {
		"prefix": ["vault-agent-configuration-template-parameter-right-delimiter"],
		"body": [
			"  // right_delimiter",
			"  // delimiter to use in the template. The default is '}}' but for some templates,",
			"  // it may be easier to use a different delimiter that does not conflict with the output file itself.",
			"  right_delimiter = \"${1:<right-delimiter>}\"",
			"$0"
		],
		"description": "vault agent templated 'right_delimiter' parameter of configuration 'template'"
	},
	"vault agent configuration 'template' parameter 'sandbox_path'": {
		"prefix": ["vault-agent-configuration-template-parameter-sandbox-path"],
		"body": [
			"  // sandbox_path",
			"  // if a sandbox path is provided, any path provided to the file function is checked that it falls within the sandbox path.",
			"  // relative paths that try to traverse outside the sandbox path will exit with an error.",
			"  sandbox_path = \"${1:<path-to-sandbox>}\"",
			"$0"
		],
		"description": "vault agent templated 'sandbox_path' parameter of configuration 'template'"
	},
	"vault agent configuration 'template' parameter 'wait'": {
		"prefix": ["vault-agent-configuration-template-parameter-wait"],
		"body": [
			"  // wait",
			"  // this is the minimum(:maximum) to wait before rendering a new template to disk and triggering a command,",
			"  // separated by a colon ( : ).",
			"  wait = \"${1:<minimum(:maximum)-wait-before-rendering-new-template>}\"",
			"$0"
		],
		"description": "vault agent templated 'wait' parameter of configuration 'template'"
	},
	"vault agent configuration 'template_config' - empty": {
		"prefix": ["vault-agent-configuration-template-config-empty"],
		"body": [
			"template_config {",
			"  // the template_config stanza configures overall default behavior for the templating engine.",
			"  // note that 'template_config' can only be defined once, and is different from the template stanza.",
			"  // unlike template which focuses on where and how a specific secret is rendered, 'template_config'",
			"  // contains parameters affecting how the templating engine as a whole behaves and its interaction with the rest of Agent.",
			"  // this includes, but is not limited to, program exit behavior.",
			"  // other parameters that apply to the templating engine as a whole may be added over time.",
			"  $0",
			"}",
			""
		],
		"description": "vault agent empty 'template_config' configuration"
	},
	"vault agent configuration 'template_config' - full": {
		"prefix": ["vault-agent-configuration-template-config-full"],
		"body": [
			"template_config {",
			"  // the template_config stanza configures overall default behavior for the templating engine.",
			"  // note that 'template_config' can only be defined once, and is different from the template stanza.",
			"  // unlike template which focuses on where and how a specific secret is rendered, 'template_config'",
			"  // contains parameters affecting how the templating engine as a whole behaves and its interaction with the rest of Agent.",
			"  // this includes, but is not limited to, program exit behavior.",
			"  // other parameters that apply to the templating engine as a whole may be added over time.",
			"",
			"  // exit_on_retry_failure",
			"  // this option configures Vault Agent to exit after it has exhausted its number of template retry attempts due to failures.",
			"  exit_on_retry_failure = ${1|true,false|}",
			"",
			"  // static_secret_render_interval",
			"  // if specified, configures how often Vault Agent Template should render non-leased secrets such as KV v2.",
			"  // this setting will not change how often Vault Agent Templating renders leased secrets.",
			"  static_secret_render_interval = \"${2:<static-secret-render-interval>}\"",
			"}",
			"$0"
		],
		"description": "vault agent full 'template_config' configuration"
	},
	"vault agent configuration 'template_config' - common": {
		"prefix": ["vault-agent-configuration-template-config-common"],
		"body": [
			"template_config {",
			"  // the template_config stanza configures overall default behavior for the templating engine.",
			"  // note that 'template_config' can only be defined once, and is different from the template stanza.",
			"  // unlike template which focuses on where and how a specific secret is rendered, 'template_config'",
			"  // contains parameters affecting how the templating engine as a whole behaves and its interaction with the rest of Agent.",
			"  // this includes, but is not limited to, program exit behavior.",
			"  // other parameters that apply to the templating engine as a whole may be added over time.",
			"}",
			"$0"
		],
		"description": "vault agent common 'template_config' configuration"
	},
	"vault agent configuration 'template_config' parameter 'exit_on_retry_failure'": {
		"prefix": ["vault-agent-configuration-template-config-parameter-exit-on-retry-failure"],
		"body": [
			"  // exit_on_retry_failure",
			"  // this option configures Vault Agent to exit after it has exhausted its number of template retry attempts due to failures.",
			"  exit_on_retry_failure = ${1|true,false|}",
			"$0"
		],
		"description": "vault agent templated 'exit_on_retry_failure' parameter of configuration 'template_config'"
	},
	"vault agent configuration 'template_config' parameter 'static_secret_render_interval'": {
		"prefix": ["vault-agent-configuration-template-config-parameter-static-secret-render-interval"],
		"body": [
			"  // static_secret_render_interval",
			"  // if specified, configures how often Vault Agent Template should render non-leased secrets such as KV v2.",
			"  // this setting will not change how often Vault Agent Templating renders leased secrets.",
			"  static_secret_render_interval = \"${1:<static-secret-render-interval>}\"",
			"$0"
		],
		"description": "vault agent templated 'static_secret_render_interval' parameter of configuration 'template_config'"
	},

	//
	// waypoint (https://www.waypointproject.io/)
	//
}
